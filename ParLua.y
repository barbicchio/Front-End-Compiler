-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParLua where
import AbsLua
import LexLua
import ErrM

}

%name pProgram Program
%name pDec Dec
%name pStm Stm
%name pExp Exp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '%' { PT _ (TS _ 1) }
  '%=' { PT _ (TS _ 2) }
  '&' { PT _ (TS _ 3) }
  '&=' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '*=' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '+=' { PT _ (TS _ 10) }
  ',' { PT _ (TS _ 11) }
  '-' { PT _ (TS _ 12) }
  '-=' { PT _ (TS _ 13) }
  '/' { PT _ (TS _ 14) }
  '/=' { PT _ (TS _ 15) }
  ':' { PT _ (TS _ 16) }
  '<' { PT _ (TS _ 17) }
  '<=' { PT _ (TS _ 18) }
  '=' { PT _ (TS _ 19) }
  '==' { PT _ (TS _ 20) }
  '>' { PT _ (TS _ 21) }
  '>=' { PT _ (TS _ 22) }
  '?' { PT _ (TS _ 23) }
  '^' { PT _ (TS _ 24) }
  '^=' { PT _ (TS _ 25) }
  '_' { PT _ (TS _ 26) }
  'and' { PT _ (TS _ 27) }
  'boolean' { PT _ (TS _ 28) }
  'catch' { PT _ (TS _ 29) }
  'character' { PT _ (TS _ 30) }
  'const' { PT _ (TS _ 31) }
  'do' { PT _ (TS _ 32) }
  'else' { PT _ (TS _ 33) }
  'end' { PT _ (TS _ 34) }
  'float' { PT _ (TS _ 35) }
  'for' { PT _ (TS _ 36) }
  'function' { PT _ (TS _ 37) }
  'if' { PT _ (TS _ 38) }
  'integer' { PT _ (TS _ 39) }
  'not' { PT _ (TS _ 40) }
  'or' { PT _ (TS _ 41) }
  'pointer' { PT _ (TS _ 42) }
  'ref' { PT _ (TS _ 43) }
  'repeat' { PT _ (TS _ 44) }
  'return' { PT _ (TS _ 45) }
  'string' { PT _ (TS _ 46) }
  'then' { PT _ (TS _ 47) }
  'try' { PT _ (TS _ 48) }
  'until' { PT _ (TS _ 49) }
  'val' { PT _ (TS _ 50) }
  'void' { PT _ (TS _ 51) }
  'while' { PT _ (TS _ 52) }
  '{' { PT _ (TS _ 53) }
  '{}' { PT _ (TS _ 54) }
  '|=' { PT _ (TS _ 55) }
  '}' { PT _ (TS _ 56) }
  '~=' { PT _ (TS _ 57) }

L_Pbreak { PT _ (T_Pbreak _) }
L_Pcontinue { PT _ (T_Pcontinue _) }
L_Pbool { PT _ (T_Pbool _) }
L_Pident { PT _ (T_Pident _) }
L_Pint { PT _ (T_Pint _) }
L_Pstring { PT _ (T_Pstring _) }
L_Preal { PT _ (T_Preal _) }
L_Pchar { PT _ (T_Pchar _) }


%%

Pbreak    :: { Pbreak} : L_Pbreak { Pbreak (mkPosToken $1)}
Pcontinue    :: { Pcontinue} : L_Pcontinue { Pcontinue (mkPosToken $1)}
Pbool    :: { Pbool} : L_Pbool { Pbool (mkPosToken $1)}
Pident    :: { Pident} : L_Pident { Pident (mkPosToken $1)}
Pint    :: { Pint} : L_Pint { Pint (mkPosToken $1)}
Pstring    :: { Pstring} : L_Pstring { Pstring (mkPosToken $1)}
Preal    :: { Preal} : L_Preal { Preal (mkPosToken $1)}
Pchar    :: { Pchar} : L_Pchar { Pchar (mkPosToken $1)}

Program :: { Program }
Program : ListDec { AbsLua.Progr $1 }
ListDec :: { [Dec] }
ListDec : {- empty -} { [] }
        | Dec ListDec { (:) $1 $2 }
        | {- empty -} { [] }
        | Dec ListDec { (:) $1 $2 }
Dec :: { Dec }
Dec : Function_def { AbsLua.DecFunction $1 }
    | Type_specifier Pident { AbsLua.VarDeclar $1 $2 }
    | Type_specifier Pident '=' Exp { AbsLua.InitDeclarI $1 $2 $4 }
Type_specifier :: { Type_specifier }
Type_specifier : BasicType { AbsLua.Typespec $1 }
               | ComplexType { AbsLua.Typecompl $1 }
BasicType :: { BasicType }
BasicType : 'boolean' { AbsLua.BasicType_boolean }
          | 'character' { AbsLua.BasicType_character }
          | 'float' { AbsLua.BasicType_float }
          | 'integer' { AbsLua.BasicType_integer }
          | 'string' { AbsLua.BasicType_string }
          | 'void' { AbsLua.BasicType_void }
ComplexType :: { ComplexType }
ComplexType : '{}' Type_specifier { AbsLua.Tarray $2 }
            | 'pointer' Type_specifier { AbsLua.Tpointer $2 }
Function_def :: { Function_def }
Function_def : 'function' Type_specifier Pident '(' ListArgument ')' Chunk_stm 'end' { AbsLua.Func $2 $3 $5 $7 }
Argument :: { Argument }
Argument : Modality Type_specifier Pident { AbsLua.ParamInt $1 $2 $3 }
Modality :: { Modality }
Modality : {- empty -} { AbsLua.Modality1 }
         | 'val' { AbsLua.Modality_val }
         | 'const' { AbsLua.Modality_const }
         | 'ref' { AbsLua.Modality_ref }
ListArgument :: { [Argument] }
ListArgument : {- empty -} { [] }
             | Argument { (:[]) $1 }
             | Argument ',' ListArgument { (:) $1 $3 }
Stm :: { Stm }
Stm : Chunk_stm { AbsLua.CompStm $1 }
    | Return_stm { AbsLua.ReturnStm $1 }
    | Exp { AbsLua.ExpStm $1 }
    | Cond_stm { AbsLua.IterStm $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp ListExp { (:) $1 $2 }
        | {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Cond_stm :: { Cond_stm }
Cond_stm : 'try' Chunk_stm 'catch' Chunk_stm 'end' { AbsLua.TryCatch $2 $4 }
         | 'if' Exp 'then' Chunk_stm 'end' { AbsLua.If $2 $4 }
         | 'if' Exp 'then' Chunk_stm 'else' Chunk_stm 'end' { AbsLua.IfThenElse $2 $4 $6 }
         | 'while' Exp 'do' Chunk_stm 'end' { AbsLua.While $2 $4 }
         | 'repeat' Chunk_stm 'until' Exp { AbsLua.DoWhile $2 $4 }
         | 'for' Exp 'do' Chunk_stm 'end' { AbsLua.For $2 $4 }
Chunk_stm :: { Chunk_stm }
Chunk_stm : ListDec ListStm { AbsLua.Chunkstm $1 (reverse $2) }
Return_stm :: { Return_stm }
Return_stm : 'return' Exp { AbsLua.ReturnStm1 $2 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Exp :: { Exp }
Exp : Pident '(' ActPar ')' { AbsLua.Fcall $1 $3 } | Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Lexp Assignment_op Exp { AbsLua.Eassign $1 $2 $3 }
     | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 'or' Exp3 { AbsLua.Elor $1 $3 } | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 'and' Exp4 { AbsLua.Eland $1 $3 } | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '==' Exp5 { AbsLua.Eeq $1 $3 } | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '~=' Exp6 { AbsLua.Eneq $1 $3 } | Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp6 '<' Exp7 { AbsLua.Elthen $1 $3 } | Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp7 '>' Exp8 { AbsLua.Egrthen $1 $3 } | Exp8 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '<=' Exp9 { AbsLua.Elt $1 $3 } | Exp9 { $1 }
Exp9 :: { Exp }
Exp9 : Exp9 '>=' Exp10 { AbsLua.Egt $1 $3 } | Exp10 { $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '+' Exp11 { AbsLua.Eplus $1 $3 } | Exp11 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '-' Exp12 { AbsLua.Eminus $1 $3 } | Exp12 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp13 { AbsLua.Etimes $1 $3 } | Exp13 { $1 }
Exp13 :: { Exp }
Exp13 : Exp13 '/' Exp14 { AbsLua.Ediv $1 $3 } | Exp14 { $1 }
Exp14 :: { Exp }
Exp14 : Exp14 '%' Exp15 { AbsLua.Emod $1 $3 } | Exp15 { $1 }
Exp15 :: { Exp }
Exp15 : Exp15 '^' Exp16 { AbsLua.EPow $1 $3 } | Exp16 { $1 }
Exp16 :: { Exp }
Exp16 : Unary_operator Exp14 { AbsLua.Epreop $1 $2 } | Exp17 { $1 }
Exp17 :: { Exp }
Exp17 : Preal { AbsLua.Efloat $1 }
      | Pint { AbsLua.Einteger $1 }
      | Pbool { AbsLua.Eboolean $1 }
      | Pstring { AbsLua.Estring $1 }
      | Pchar { AbsLua.Echar $1 }
      | Lexp { AbsLua.Lexp $1 }
      | Exp18 { $1 }
Exp18 :: { Exp }
Exp18 : '{' ListExp '}' { AbsLua.ArrayExp $2 } | '(' Exp ')' { $2 }
ActPar :: { ActPar }
ActPar : ListExp { AbsLua.ActParam $1 }
Lexp :: { Lexp }
Lexp : Pident { AbsLua.Evar $1 }
     | '_' Exp { AbsLua.Indirection $2 }
     | Pident '{' Exp '}' { AbsLua.Arraysel $1 $3 }
     | Exp '?' Exp ':' Exp { AbsLua.InlineIf $1 $3 $5 }
Unary_operator :: { Unary_operator }
Unary_operator : '&' { AbsLua.Address }
               | 'not' { AbsLua.Logicalneg }
               | '-' { AbsLua.Negnum }
Assignment_op :: { Assignment_op }
Assignment_op : '=' { AbsLua.Assign }
              | '*=' { AbsLua.AssignMul }
              | '/=' { AbsLua.AssignDiv }
              | '%=' { AbsLua.AssignMod }
              | '+=' { AbsLua.AssignAdd }
              | '-=' { AbsLua.AssignSub }
              | '^=' { AbsLua.AssgnPow }
              | '&=' { AbsLua.AssgnAnd }
              | '|=' { AbsLua.AssgnOr }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

