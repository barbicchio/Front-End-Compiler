entrypoints Program,Dec,Stm,Exp;

Progr.  Program ::= [Dec] ;
separator Dec "" ;

DecFunction.   Dec ::= Function_def; --dich. funzioni
InitDeclarArr. Dec ::= Pident "{" Type_specifier "}" "=" ArrayInit; --dich. array (Controllare come gestire gli array multidim)
VarDeclar.     Dec ::= Type_specifier Pident;
InitDeclarI.   Dec ::= Type_specifier Pident  "=" Exp;



Tinteger.      Type_specifier ::= "integer";
Tboolean.      Type_specifier ::= "boolean";
Tfloat.        Type_specifier ::= "float";
Tchar.         Type_specifier ::= "character";
Tstring.       Type_specifier ::= "string";
Tarray.		   Type_specifier ::= "{" Type_specifier "}";
Tpointer.	   Type_specifier ::= "pointer" Type_specifier;
Tvoid. 		   Type_specifier ::= {-empty-};


--ArrayDef.      ArrayInit::= da controllare

Func.          Function_def ::= "function" Type_specifier Pident "(" Arguments ")" Chunk_stm "end";
Parameters.    Arguments::= "("[Argument]")";
--ParamArrayV.   Argument ::= Type_specifier Pident "[""]";
--ParamArray.    Argument ::= Type_specifier Pident "["Pint"]";
ParamInt.       Argument ::= Modality Type_specifier Pident;
rules Modality	::={-empty-}|"val"|"res"|"valres"|"name"|"const"|"ref";
separator Argument ",";

CompStm.        Stm ::= Chunk_stm ;
ReturnStm.      Stm ::= Return_stm ;
ExpStm.			Stm ::= Exp ;
IterStm.    	Stm ::= Cond_stm ;
separator Exp "";
separator Dec "";

If.          	Cond_stm ::= "if" Exp "then" Chunk_stm "end";
IfThenElse.     Cond_stm ::= "if" Exp "then" Chunk_stm "else" Chunk_stm "end";
--if else if da fare dopo
While.          Cond_stm ::= "while" Exp "do" Chunk_stm "end";
DoWhile.		Cond_stm ::="repeat" Chunk_stm "until" Exp;
--For.          Cond_stm ::= "for" Exp "do" Chunk_stm "end";
Chunkstm.	    Chunk_stm::=[Dec][Stm];
ReturnStm.		Return_stm::="return" Exp;
separator Stm "";


Fcall.       Exp   ::= Pident "("ActPar")";
Eassign.     Exp1  ::= Lexp Assignment_op Exp;
Elor.        Exp2  ::= Exp2 "or" Exp3;
Eland.       Exp3  ::= Exp3 "and" Exp4;
Eeq.         Exp4  ::= Exp4 "==" Exp5;
Eneq.        Exp5  ::= Exp5 "~=" Exp6;
Elthen.      Exp6  ::= Exp6 "<" Exp7;
Egrthen.     Exp7  ::= Exp7 ">" Exp8;
Elt.         Exp8  ::= Exp8 "<=" Exp9;
Egt.         Exp9  ::= Exp9 ">=" Exp10;
Eplus.       Exp10 ::= Exp10 "+" Exp11;
Eminus.      Exp11 ::= Exp11 "-" Exp12;
Etimes.      Exp12 ::= Exp12 "*" Exp13;
Ediv.        Exp13 ::= Exp13 "/" Exp14;
Emod.        Exp14 ::= Exp14 "%" Exp15;
EPow.        Exp15 ::= Exp15 "^" Exp16;
--Epreinc.     Exp15 ::= "++" Exp15;
--Epredec.     Exp15 ::= "--" Exp15;
--Epostinc.    Exp16 ::= Exp16 "++";
--Epostdec.    Exp16 ::= Exp16 "--";
Epreop.      Exp16 ::= Unary_operator Exp14;--controllare numeri


Efloat.      Exp17 ::= Preal;
Einteger.    Exp17 ::= Pint;  
Eboolean.	 Exp17 ::= Pbool;
Estring.	 Exp17 ::= Pstring;
Echar.	  	 Exp17 ::= Pchar;
Lexp.		 Exp17 ::= Lexp;
coercions Exp 16;
ActParam.    ActPar::=[Exp];

separator Exp ",";

Evar.        Lexp ::= Pident;
Indirection. Lexp ::= "*"Exp ;
Arraysel.    Lexp ::= Pident [Index] ;
PreInc.      Lexp ::= "++" Lexp ;
PreDecr.     Lexp ::= "--" Lexp ;
PostInc.     Lexp ::= Lexp "++" ;
PostDecr.    Lexp ::= Lexp "--" ;

--Arraysel1.   Lexp::= Pident "@" Pint;
Arraysel.   Index::= "{" Exp "}";

Address.    Unary_operator::= "&";
Logicalneg.  Unary_operator ::= "not" ;
Negnum.      Unary_operator ::= "-" ;



--separator Exp2 "," ;

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=";
AssignMod.    Assignment_op ::= "%=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;
comment "--" ;
 
--token definitions
--position token Ploop ({"break"}|{"continue"});
position token Pident letter (letter | digit | '_' | '\'')* ;
position token Pint digit+;
position token Pbool ({"true"}|{"false"});
--position token Pstring  '"' ((char - ["\"\\"]) | ('\\' ["\"\\nt"]))* '"';
--position token Preal digit+ '.' digit+ ('e' '-'? digit+)? ;
--position token Pchar '\'' ((char - ["'\\"]) | ('\\' ["'\\nt"])) '\'';


