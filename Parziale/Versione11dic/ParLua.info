-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from ParLua.y
-----------------------------------------------------------------------------

state 148 contains 1 shift/reduce conflicts.
state 176 contains 33 reduce/reduce conflicts.

rule 4 is unused
rule 5 is unused
rule 42 is unused

terminal L_Pcontinue is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pDec -> Dec                                 (1)
	%start_pStm -> Stm                                 (2)
	%start_pExp -> Exp                                 (3)
	Pbreak -> L_Pbreak                                 (4)
	Pcontinue -> L_Pcontinue                           (5)
	Pident -> L_Pident                                 (6)
	Pint -> L_Pint                                     (7)
	Pbool -> L_Pbool                                   (8)
	Pstring -> L_Pstring                               (9)
	Preal -> L_Preal                                   (10)
	Pchar -> L_Pchar                                   (11)
	Program -> ListDec                                 (12)
	ListDec ->                                         (13)
	ListDec -> ListDec Dec                             (14)
	Dec -> 'function' Type_specifier Pident '(' ListArgument ')' ListDecStm 'end'   (15)
	Dec -> 'function' Pident '(' ListArgument ')' ListDecStm 'end'   (16)
	Dec -> Type_specifier Pident                       (17)
	Dec -> 'const' Type_specifier Pident               (18)
	Dec -> Type_specifier Pident '=' Exp               (19)
	Dec -> 'const' Type_specifier Pident '=' Exp       (20)
	Type_specifier -> 'boolean'                        (21)
	Type_specifier -> 'character'                      (22)
	Type_specifier -> 'float'                          (23)
	Type_specifier -> 'integer'                        (24)
	Type_specifier -> 'string'                         (25)
	Type_specifier -> 'void'                           (26)
	Type_specifier -> 'pointer' Type_specifier         (27)
	Type_specifier -> '{}' Type_specifier              (28)
	Type_specifier -> '{' Exp '}' Type_specifier       (29)
	Argument -> Modality Type_specifier Pident         (30)
	ListArgument ->                                    (31)
	ListArgument -> Argument                           (32)
	ListArgument -> Argument ',' ListArgument          (33)
	Modality ->                                        (34)
	Modality -> 'val'                                  (35)
	Modality -> 'const'                                (36)
	Modality -> 'ref'                                  (37)
	Stm -> Lexp Assignment_Op Exp                      (38)
	Stm -> 'return' Exp                                (39)
	Stm -> Exp                                         (40)
	Stm -> 'if' Exp 'then' ListDecStm 'end'            (41)
	Stm -> 'if' Exp 'then' ListDecStm 'else' ListDecStm 'end'   (42)
	Stm -> 'while' Exp 'do' ListDecStm 'end'           (43)
	Stm -> 'repeat' ListDecStm 'until' Exp             (44)
	Stm -> 'for' Pident '=' Exp ',' Exp ',' Exp 'do' ListDecStm 'end'   (45)
	Stm -> 'try' ListDecStm 'catch' ListDecStm 'end'   (46)
	DecStm -> Dec                                      (47)
	DecStm -> Stm                                      (48)
	ListDecStm ->                                      (49)
	ListDecStm -> ListDecStm DecStm                    (50)
	Exp -> Pident '(' ListExp ')'                      (51)
	Exp -> '(' Exp ')'                                 (52)
	Exp -> Exp 'or' Exp                                (53)
	Exp -> Exp 'and' Exp                               (54)
	Exp -> Exp '==' Exp                                (55)
	Exp -> Exp '~=' Exp                                (56)
	Exp -> Exp '<' Exp                                 (57)
	Exp -> Exp '>' Exp                                 (58)
	Exp -> Exp '<=' Exp                                (59)
	Exp -> Exp '>=' Exp                                (60)
	Exp -> Exp '+' Exp                                 (61)
	Exp -> Exp '-' Exp                                 (62)
	Exp -> Exp '*' Exp                                 (63)
	Exp -> Exp '/' Exp                                 (64)
	Exp -> Exp '^' Exp                                 (65)
	Exp -> Exp '%' Exp                                 (66)
	Exp -> 'if' Exp 'then' ListDecStm 'else' ListDecStm 'end'   (67)
	Exp -> '&' Exp                                     (68)
	Exp -> '-' Exp                                     (69)
	Exp -> 'not' Exp                                   (70)
	Exp -> '{' ListExp '}'                             (71)
	Exp -> Lexp                                        (72)
	Exp -> Preal                                       (73)
	Exp -> Pint                                        (74)
	Exp -> Pbool                                       (75)
	Exp -> Pstring                                     (76)
	Exp -> Pchar                                       (77)
	ListExp ->                                         (78)
	ListExp -> Exp                                     (79)
	ListExp -> Exp ',' ListExp                         (80)
	Lexp -> Pident                                     (81)
	Lexp -> '(' Lexp ')'                               (82)
	Lexp -> '_' Exp                                    (83)
	Lexp -> Lexp '{' Exp '}'                           (84)
	Assignment_Op -> '='                               (85)
	Assignment_Op -> '*='                              (86)
	Assignment_Op -> '/='                              (87)
	Assignment_Op -> '%='                              (88)
	Assignment_Op -> '+='                              (89)
	Assignment_Op -> '-='                              (90)
	Assignment_Op -> '^='                              (91)
	Assignment_Op -> '&='                              (92)
	Assignment_Op -> '|='                              (93)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'%'            { PT _ (TS _ 1) }
	'%='           { PT _ (TS _ 2) }
	'&'            { PT _ (TS _ 3) }
	'&='           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'*='           { PT _ (TS _ 8) }
	'+'            { PT _ (TS _ 9) }
	'+='           { PT _ (TS _ 10) }
	','            { PT _ (TS _ 11) }
	'-'            { PT _ (TS _ 12) }
	'-='           { PT _ (TS _ 13) }
	'/'            { PT _ (TS _ 14) }
	'/='           { PT _ (TS _ 15) }
	'<'            { PT _ (TS _ 16) }
	'<='           { PT _ (TS _ 17) }
	'='            { PT _ (TS _ 18) }
	'=='           { PT _ (TS _ 19) }
	'>'            { PT _ (TS _ 20) }
	'>='           { PT _ (TS _ 21) }
	'^'            { PT _ (TS _ 22) }
	'^='           { PT _ (TS _ 23) }
	'_'            { PT _ (TS _ 24) }
	'and'          { PT _ (TS _ 25) }
	'boolean'      { PT _ (TS _ 26) }
	'catch'        { PT _ (TS _ 27) }
	'character'    { PT _ (TS _ 28) }
	'const'        { PT _ (TS _ 29) }
	'do'           { PT _ (TS _ 30) }
	'else'         { PT _ (TS _ 31) }
	'end'          { PT _ (TS _ 32) }
	'float'        { PT _ (TS _ 33) }
	'for'          { PT _ (TS _ 34) }
	'function'     { PT _ (TS _ 35) }
	'if'           { PT _ (TS _ 36) }
	'integer'      { PT _ (TS _ 37) }
	'not'          { PT _ (TS _ 38) }
	'or'           { PT _ (TS _ 39) }
	'pointer'      { PT _ (TS _ 40) }
	'ref'          { PT _ (TS _ 41) }
	'repeat'       { PT _ (TS _ 42) }
	'return'       { PT _ (TS _ 43) }
	'string'       { PT _ (TS _ 44) }
	'then'         { PT _ (TS _ 45) }
	'try'          { PT _ (TS _ 46) }
	'until'        { PT _ (TS _ 47) }
	'val'          { PT _ (TS _ 48) }
	'void'         { PT _ (TS _ 49) }
	'while'        { PT _ (TS _ 50) }
	'{'            { PT _ (TS _ 51) }
	'{}'           { PT _ (TS _ 52) }
	'|='           { PT _ (TS _ 53) }
	'}'            { PT _ (TS _ 54) }
	'~='           { PT _ (TS _ 55) }
	L_Pbreak       { PT _ (T_Pbreak _) }
	L_Pcontinue    { PT _ (T_Pcontinue _) }
	L_Pbool        { PT _ (T_Pbool _) }
	L_Pident       { PT _ (T_Pident _) }
	L_Pint         { PT _ (T_Pint _) }
	L_Pstring      { PT _ (T_Pstring _) }
	L_Preal        { PT _ (T_Preal _) }
	L_Pchar        { PT _ (T_Pchar _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pDec     rule  1
	%start_pStm     rule  2
	%start_pExp     rule  3
	Pbreak          rule  4
	Pcontinue       rule  5
	Pident          rule  6
	Pint            rule  7
	Pbool           rule  8
	Pstring         rule  9
	Preal           rule  10
	Pchar           rule  11
	Program         rule  12
	ListDec         rules 13, 14
	Dec             rules 15, 16, 17, 18, 19, 20
	Type_specifier  rules 21, 22, 23, 24, 25, 26, 27, 28, 29
	Argument        rule  30
	ListArgument    rules 31, 32, 33
	Modality        rules 34, 35, 36, 37
	Stm             rules 38, 39, 40, 41, 42, 43, 44, 45, 46
	DecStm          rules 47, 48
	ListDecStm      rules 49, 50
	Exp             rules 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77
	ListExp         rules 78, 79, 80
	Lexp            rules 81, 82, 83, 84
	Assignment_Op   rules 85, 86, 87, 88, 89, 90, 91, 92, 93

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'boolean'      reduce using rule 13
	'character'    reduce using rule 13
	'const'        reduce using rule 13
	'float'        reduce using rule 13
	'function'     reduce using rule 13
	'integer'      reduce using rule 13
	'pointer'      reduce using rule 13
	'string'       reduce using rule 13
	'void'         reduce using rule 13
	'{'            reduce using rule 13
	'{}'           reduce using rule 13
	%eof           reduce using rule 13

	Program        goto state 49
	ListDec        goto state 50

State 1


	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'float'        shift, and enter state 41
	'function'     shift, and enter state 42
	'integer'      shift, and enter state 43
	'pointer'      shift, and enter state 44
	'string'       shift, and enter state 45
	'void'         shift, and enter state 46
	'{'            shift, and enter state 47
	'{}'           shift, and enter state 48

	Dec            goto state 36
	Type_specifier goto state 37

State 2


	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'for'          shift, and enter state 30
	'if'           shift, and enter state 31
	'not'          shift, and enter state 19
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'try'          shift, and enter state 34
	'while'        shift, and enter state 35
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Stm            goto state 27
	Exp            goto state 28
	Lexp           goto state 29

State 3


	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 12
	Lexp           goto state 13

State 4


	L_Pbreak       shift, and enter state 5


State 5

	Pbreak -> L_Pbreak .                                (rule 4)



State 6

	Exp -> Pident . '(' ListExp ')'                     (rule 51)
	Lexp -> Pident .                                    (rule 81)

	'%'            reduce using rule 81
	'%='           reduce using rule 81
	'&'            reduce using rule 81
	'&='           reduce using rule 81
	'('            shift, and enter state 99
	')'            reduce using rule 81
	'*'            reduce using rule 81
	'*='           reduce using rule 81
	'+'            reduce using rule 81
	'+='           reduce using rule 81
	','            reduce using rule 81
	'-'            reduce using rule 81
	'-='           reduce using rule 81
	'/'            reduce using rule 81
	'/='           reduce using rule 81
	'<'            reduce using rule 81
	'<='           reduce using rule 81
	'='            reduce using rule 81
	'=='           reduce using rule 81
	'>'            reduce using rule 81
	'>='           reduce using rule 81
	'^'            reduce using rule 81
	'^='           reduce using rule 81
	'_'            reduce using rule 81
	'and'          reduce using rule 81
	'boolean'      reduce using rule 81
	'catch'        reduce using rule 81
	'character'    reduce using rule 81
	'const'        reduce using rule 81
	'do'           reduce using rule 81
	'else'         reduce using rule 81
	'end'          reduce using rule 81
	'float'        reduce using rule 81
	'for'          reduce using rule 81
	'function'     reduce using rule 81
	'if'           reduce using rule 81
	'integer'      reduce using rule 81
	'not'          reduce using rule 81
	'or'           reduce using rule 81
	'pointer'      reduce using rule 81
	'repeat'       reduce using rule 81
	'return'       reduce using rule 81
	'string'       reduce using rule 81
	'then'         reduce using rule 81
	'try'          reduce using rule 81
	'until'        reduce using rule 81
	'void'         reduce using rule 81
	'while'        reduce using rule 81
	'{'            reduce using rule 81
	'{}'           reduce using rule 81
	'|='           reduce using rule 81
	'}'            reduce using rule 81
	'~='           reduce using rule 81
	L_Pbool        reduce using rule 81
	L_Pident       reduce using rule 81
	L_Pint         reduce using rule 81
	L_Pstring      reduce using rule 81
	L_Preal        reduce using rule 81
	L_Pchar        reduce using rule 81
	%eof           reduce using rule 81


State 7

	Exp -> Pint .                                       (rule 74)

	'%'            reduce using rule 74
	'%='           reduce using rule 74
	'&'            reduce using rule 74
	'&='           reduce using rule 74
	'('            reduce using rule 74
	')'            reduce using rule 74
	'*'            reduce using rule 74
	'*='           reduce using rule 74
	'+'            reduce using rule 74
	'+='           reduce using rule 74
	','            reduce using rule 74
	'-'            reduce using rule 74
	'-='           reduce using rule 74
	'/'            reduce using rule 74
	'/='           reduce using rule 74
	'<'            reduce using rule 74
	'<='           reduce using rule 74
	'='            reduce using rule 74
	'=='           reduce using rule 74
	'>'            reduce using rule 74
	'>='           reduce using rule 74
	'^'            reduce using rule 74
	'^='           reduce using rule 74
	'_'            reduce using rule 74
	'and'          reduce using rule 74
	'boolean'      reduce using rule 74
	'catch'        reduce using rule 74
	'character'    reduce using rule 74
	'const'        reduce using rule 74
	'do'           reduce using rule 74
	'else'         reduce using rule 74
	'end'          reduce using rule 74
	'float'        reduce using rule 74
	'for'          reduce using rule 74
	'function'     reduce using rule 74
	'if'           reduce using rule 74
	'integer'      reduce using rule 74
	'not'          reduce using rule 74
	'or'           reduce using rule 74
	'pointer'      reduce using rule 74
	'repeat'       reduce using rule 74
	'return'       reduce using rule 74
	'string'       reduce using rule 74
	'then'         reduce using rule 74
	'try'          reduce using rule 74
	'until'        reduce using rule 74
	'void'         reduce using rule 74
	'while'        reduce using rule 74
	'{'            reduce using rule 74
	'{}'           reduce using rule 74
	'|='           reduce using rule 74
	'}'            reduce using rule 74
	'~='           reduce using rule 74
	L_Pbool        reduce using rule 74
	L_Pident       reduce using rule 74
	L_Pint         reduce using rule 74
	L_Pstring      reduce using rule 74
	L_Preal        reduce using rule 74
	L_Pchar        reduce using rule 74
	%eof           reduce using rule 74


State 8

	Exp -> Pbool .                                      (rule 75)

	'%'            reduce using rule 75
	'%='           reduce using rule 75
	'&'            reduce using rule 75
	'&='           reduce using rule 75
	'('            reduce using rule 75
	')'            reduce using rule 75
	'*'            reduce using rule 75
	'*='           reduce using rule 75
	'+'            reduce using rule 75
	'+='           reduce using rule 75
	','            reduce using rule 75
	'-'            reduce using rule 75
	'-='           reduce using rule 75
	'/'            reduce using rule 75
	'/='           reduce using rule 75
	'<'            reduce using rule 75
	'<='           reduce using rule 75
	'='            reduce using rule 75
	'=='           reduce using rule 75
	'>'            reduce using rule 75
	'>='           reduce using rule 75
	'^'            reduce using rule 75
	'^='           reduce using rule 75
	'_'            reduce using rule 75
	'and'          reduce using rule 75
	'boolean'      reduce using rule 75
	'catch'        reduce using rule 75
	'character'    reduce using rule 75
	'const'        reduce using rule 75
	'do'           reduce using rule 75
	'else'         reduce using rule 75
	'end'          reduce using rule 75
	'float'        reduce using rule 75
	'for'          reduce using rule 75
	'function'     reduce using rule 75
	'if'           reduce using rule 75
	'integer'      reduce using rule 75
	'not'          reduce using rule 75
	'or'           reduce using rule 75
	'pointer'      reduce using rule 75
	'repeat'       reduce using rule 75
	'return'       reduce using rule 75
	'string'       reduce using rule 75
	'then'         reduce using rule 75
	'try'          reduce using rule 75
	'until'        reduce using rule 75
	'void'         reduce using rule 75
	'while'        reduce using rule 75
	'{'            reduce using rule 75
	'{}'           reduce using rule 75
	'|='           reduce using rule 75
	'}'            reduce using rule 75
	'~='           reduce using rule 75
	L_Pbool        reduce using rule 75
	L_Pident       reduce using rule 75
	L_Pint         reduce using rule 75
	L_Pstring      reduce using rule 75
	L_Preal        reduce using rule 75
	L_Pchar        reduce using rule 75
	%eof           reduce using rule 75


State 9

	Exp -> Pstring .                                    (rule 76)

	'%'            reduce using rule 76
	'%='           reduce using rule 76
	'&'            reduce using rule 76
	'&='           reduce using rule 76
	'('            reduce using rule 76
	')'            reduce using rule 76
	'*'            reduce using rule 76
	'*='           reduce using rule 76
	'+'            reduce using rule 76
	'+='           reduce using rule 76
	','            reduce using rule 76
	'-'            reduce using rule 76
	'-='           reduce using rule 76
	'/'            reduce using rule 76
	'/='           reduce using rule 76
	'<'            reduce using rule 76
	'<='           reduce using rule 76
	'='            reduce using rule 76
	'=='           reduce using rule 76
	'>'            reduce using rule 76
	'>='           reduce using rule 76
	'^'            reduce using rule 76
	'^='           reduce using rule 76
	'_'            reduce using rule 76
	'and'          reduce using rule 76
	'boolean'      reduce using rule 76
	'catch'        reduce using rule 76
	'character'    reduce using rule 76
	'const'        reduce using rule 76
	'do'           reduce using rule 76
	'else'         reduce using rule 76
	'end'          reduce using rule 76
	'float'        reduce using rule 76
	'for'          reduce using rule 76
	'function'     reduce using rule 76
	'if'           reduce using rule 76
	'integer'      reduce using rule 76
	'not'          reduce using rule 76
	'or'           reduce using rule 76
	'pointer'      reduce using rule 76
	'repeat'       reduce using rule 76
	'return'       reduce using rule 76
	'string'       reduce using rule 76
	'then'         reduce using rule 76
	'try'          reduce using rule 76
	'until'        reduce using rule 76
	'void'         reduce using rule 76
	'while'        reduce using rule 76
	'{'            reduce using rule 76
	'{}'           reduce using rule 76
	'|='           reduce using rule 76
	'}'            reduce using rule 76
	'~='           reduce using rule 76
	L_Pbool        reduce using rule 76
	L_Pident       reduce using rule 76
	L_Pint         reduce using rule 76
	L_Pstring      reduce using rule 76
	L_Preal        reduce using rule 76
	L_Pchar        reduce using rule 76
	%eof           reduce using rule 76


State 10

	Exp -> Preal .                                      (rule 73)

	'%'            reduce using rule 73
	'%='           reduce using rule 73
	'&'            reduce using rule 73
	'&='           reduce using rule 73
	'('            reduce using rule 73
	')'            reduce using rule 73
	'*'            reduce using rule 73
	'*='           reduce using rule 73
	'+'            reduce using rule 73
	'+='           reduce using rule 73
	','            reduce using rule 73
	'-'            reduce using rule 73
	'-='           reduce using rule 73
	'/'            reduce using rule 73
	'/='           reduce using rule 73
	'<'            reduce using rule 73
	'<='           reduce using rule 73
	'='            reduce using rule 73
	'=='           reduce using rule 73
	'>'            reduce using rule 73
	'>='           reduce using rule 73
	'^'            reduce using rule 73
	'^='           reduce using rule 73
	'_'            reduce using rule 73
	'and'          reduce using rule 73
	'boolean'      reduce using rule 73
	'catch'        reduce using rule 73
	'character'    reduce using rule 73
	'const'        reduce using rule 73
	'do'           reduce using rule 73
	'else'         reduce using rule 73
	'end'          reduce using rule 73
	'float'        reduce using rule 73
	'for'          reduce using rule 73
	'function'     reduce using rule 73
	'if'           reduce using rule 73
	'integer'      reduce using rule 73
	'not'          reduce using rule 73
	'or'           reduce using rule 73
	'pointer'      reduce using rule 73
	'repeat'       reduce using rule 73
	'return'       reduce using rule 73
	'string'       reduce using rule 73
	'then'         reduce using rule 73
	'try'          reduce using rule 73
	'until'        reduce using rule 73
	'void'         reduce using rule 73
	'while'        reduce using rule 73
	'{'            reduce using rule 73
	'{}'           reduce using rule 73
	'|='           reduce using rule 73
	'}'            reduce using rule 73
	'~='           reduce using rule 73
	L_Pbool        reduce using rule 73
	L_Pident       reduce using rule 73
	L_Pint         reduce using rule 73
	L_Pstring      reduce using rule 73
	L_Preal        reduce using rule 73
	L_Pchar        reduce using rule 73
	%eof           reduce using rule 73


State 11

	Exp -> Pchar .                                      (rule 77)

	'%'            reduce using rule 77
	'%='           reduce using rule 77
	'&'            reduce using rule 77
	'&='           reduce using rule 77
	'('            reduce using rule 77
	')'            reduce using rule 77
	'*'            reduce using rule 77
	'*='           reduce using rule 77
	'+'            reduce using rule 77
	'+='           reduce using rule 77
	','            reduce using rule 77
	'-'            reduce using rule 77
	'-='           reduce using rule 77
	'/'            reduce using rule 77
	'/='           reduce using rule 77
	'<'            reduce using rule 77
	'<='           reduce using rule 77
	'='            reduce using rule 77
	'=='           reduce using rule 77
	'>'            reduce using rule 77
	'>='           reduce using rule 77
	'^'            reduce using rule 77
	'^='           reduce using rule 77
	'_'            reduce using rule 77
	'and'          reduce using rule 77
	'boolean'      reduce using rule 77
	'catch'        reduce using rule 77
	'character'    reduce using rule 77
	'const'        reduce using rule 77
	'do'           reduce using rule 77
	'else'         reduce using rule 77
	'end'          reduce using rule 77
	'float'        reduce using rule 77
	'for'          reduce using rule 77
	'function'     reduce using rule 77
	'if'           reduce using rule 77
	'integer'      reduce using rule 77
	'not'          reduce using rule 77
	'or'           reduce using rule 77
	'pointer'      reduce using rule 77
	'repeat'       reduce using rule 77
	'return'       reduce using rule 77
	'string'       reduce using rule 77
	'then'         reduce using rule 77
	'try'          reduce using rule 77
	'until'        reduce using rule 77
	'void'         reduce using rule 77
	'while'        reduce using rule 77
	'{'            reduce using rule 77
	'{}'           reduce using rule 77
	'|='           reduce using rule 77
	'}'            reduce using rule 77
	'~='           reduce using rule 77
	L_Pbool        reduce using rule 77
	L_Pident       reduce using rule 77
	L_Pint         reduce using rule 77
	L_Pstring      reduce using rule 77
	L_Preal        reduce using rule 77
	L_Pchar        reduce using rule 77
	%eof           reduce using rule 77


State 12

	%start_pExp -> Exp .                                (rule 3)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'~='           shift, and enter state 89
	%eof           accept


State 13

	Exp -> Lexp .                                       (rule 72)
	Lexp -> Lexp . '{' Exp '}'                          (rule 84)

	'%'            reduce using rule 72
	'%='           reduce using rule 72
	'&'            reduce using rule 72
	'&='           reduce using rule 72
	'('            reduce using rule 72
	')'            reduce using rule 72
	'*'            reduce using rule 72
	'*='           reduce using rule 72
	'+'            reduce using rule 72
	'+='           reduce using rule 72
	','            reduce using rule 72
	'-'            reduce using rule 72
	'-='           reduce using rule 72
	'/'            reduce using rule 72
	'/='           reduce using rule 72
	'<'            reduce using rule 72
	'<='           reduce using rule 72
	'='            reduce using rule 72
	'=='           reduce using rule 72
	'>'            reduce using rule 72
	'>='           reduce using rule 72
	'^'            reduce using rule 72
	'^='           reduce using rule 72
	'_'            reduce using rule 72
	'and'          reduce using rule 72
	'boolean'      reduce using rule 72
	'catch'        reduce using rule 72
	'character'    reduce using rule 72
	'const'        reduce using rule 72
	'do'           reduce using rule 72
	'else'         reduce using rule 72
	'end'          reduce using rule 72
	'float'        reduce using rule 72
	'for'          reduce using rule 72
	'function'     reduce using rule 72
	'if'           reduce using rule 72
	'integer'      reduce using rule 72
	'not'          reduce using rule 72
	'or'           reduce using rule 72
	'pointer'      reduce using rule 72
	'repeat'       reduce using rule 72
	'return'       reduce using rule 72
	'string'       reduce using rule 72
	'then'         reduce using rule 72
	'try'          reduce using rule 72
	'until'        reduce using rule 72
	'void'         reduce using rule 72
	'while'        reduce using rule 72
	'{'            shift, and enter state 74
	'{}'           reduce using rule 72
	'|='           reduce using rule 72
	'}'            reduce using rule 72
	'~='           reduce using rule 72
	L_Pbool        reduce using rule 72
	L_Pident       reduce using rule 72
	L_Pint         reduce using rule 72
	L_Pstring      reduce using rule 72
	L_Preal        reduce using rule 72
	L_Pchar        reduce using rule 72
	%eof           reduce using rule 72


State 14

	Exp -> '&' . Exp                                    (rule 68)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 98
	Lexp           goto state 13

State 15

	Exp -> '(' . Exp ')'                                (rule 52)
	Lexp -> '(' . Lexp ')'                              (rule 82)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 96
	Lexp           goto state 97

State 16

	Exp -> '-' . Exp                                    (rule 69)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 95
	Lexp           goto state 13

State 17

	Lexp -> '_' . Exp                                   (rule 83)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 94
	Lexp           goto state 13

State 18

	Exp -> 'if' . Exp 'then' ListDecStm 'else' ListDecStm 'end'    (rule 67)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 93
	Lexp           goto state 13

State 19

	Exp -> 'not' . Exp                                  (rule 70)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 92
	Lexp           goto state 13

State 20

	Exp -> '{' . ListExp '}'                            (rule 71)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	'}'            reduce using rule 78
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 90
	ListExp        goto state 91
	Lexp           goto state 13

State 21

	Pbool -> L_Pbool .                                  (rule 8)

	'%'            reduce using rule 8
	'%='           reduce using rule 8
	'&'            reduce using rule 8
	'&='           reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'*'            reduce using rule 8
	'*='           reduce using rule 8
	'+'            reduce using rule 8
	'+='           reduce using rule 8
	','            reduce using rule 8
	'-'            reduce using rule 8
	'-='           reduce using rule 8
	'/'            reduce using rule 8
	'/='           reduce using rule 8
	'<'            reduce using rule 8
	'<='           reduce using rule 8
	'='            reduce using rule 8
	'=='           reduce using rule 8
	'>'            reduce using rule 8
	'>='           reduce using rule 8
	'^'            reduce using rule 8
	'^='           reduce using rule 8
	'_'            reduce using rule 8
	'and'          reduce using rule 8
	'boolean'      reduce using rule 8
	'catch'        reduce using rule 8
	'character'    reduce using rule 8
	'const'        reduce using rule 8
	'do'           reduce using rule 8
	'else'         reduce using rule 8
	'end'          reduce using rule 8
	'float'        reduce using rule 8
	'for'          reduce using rule 8
	'function'     reduce using rule 8
	'if'           reduce using rule 8
	'integer'      reduce using rule 8
	'not'          reduce using rule 8
	'or'           reduce using rule 8
	'pointer'      reduce using rule 8
	'repeat'       reduce using rule 8
	'return'       reduce using rule 8
	'string'       reduce using rule 8
	'then'         reduce using rule 8
	'try'          reduce using rule 8
	'until'        reduce using rule 8
	'void'         reduce using rule 8
	'while'        reduce using rule 8
	'{'            reduce using rule 8
	'{}'           reduce using rule 8
	'|='           reduce using rule 8
	'}'            reduce using rule 8
	'~='           reduce using rule 8
	L_Pbool        reduce using rule 8
	L_Pident       reduce using rule 8
	L_Pint         reduce using rule 8
	L_Pstring      reduce using rule 8
	L_Preal        reduce using rule 8
	L_Pchar        reduce using rule 8
	%eof           reduce using rule 8


State 22

	Pident -> L_Pident .                                (rule 6)

	'%'            reduce using rule 6
	'%='           reduce using rule 6
	'&'            reduce using rule 6
	'&='           reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'*'            reduce using rule 6
	'*='           reduce using rule 6
	'+'            reduce using rule 6
	'+='           reduce using rule 6
	','            reduce using rule 6
	'-'            reduce using rule 6
	'-='           reduce using rule 6
	'/'            reduce using rule 6
	'/='           reduce using rule 6
	'<'            reduce using rule 6
	'<='           reduce using rule 6
	'='            reduce using rule 6
	'=='           reduce using rule 6
	'>'            reduce using rule 6
	'>='           reduce using rule 6
	'^'            reduce using rule 6
	'^='           reduce using rule 6
	'_'            reduce using rule 6
	'and'          reduce using rule 6
	'boolean'      reduce using rule 6
	'catch'        reduce using rule 6
	'character'    reduce using rule 6
	'const'        reduce using rule 6
	'do'           reduce using rule 6
	'else'         reduce using rule 6
	'end'          reduce using rule 6
	'float'        reduce using rule 6
	'for'          reduce using rule 6
	'function'     reduce using rule 6
	'if'           reduce using rule 6
	'integer'      reduce using rule 6
	'not'          reduce using rule 6
	'or'           reduce using rule 6
	'pointer'      reduce using rule 6
	'repeat'       reduce using rule 6
	'return'       reduce using rule 6
	'string'       reduce using rule 6
	'then'         reduce using rule 6
	'try'          reduce using rule 6
	'until'        reduce using rule 6
	'void'         reduce using rule 6
	'while'        reduce using rule 6
	'{'            reduce using rule 6
	'{}'           reduce using rule 6
	'|='           reduce using rule 6
	'}'            reduce using rule 6
	'~='           reduce using rule 6
	L_Pbool        reduce using rule 6
	L_Pident       reduce using rule 6
	L_Pint         reduce using rule 6
	L_Pstring      reduce using rule 6
	L_Preal        reduce using rule 6
	L_Pchar        reduce using rule 6
	%eof           reduce using rule 6


State 23

	Pint -> L_Pint .                                    (rule 7)

	'%'            reduce using rule 7
	'%='           reduce using rule 7
	'&'            reduce using rule 7
	'&='           reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'*'            reduce using rule 7
	'*='           reduce using rule 7
	'+'            reduce using rule 7
	'+='           reduce using rule 7
	','            reduce using rule 7
	'-'            reduce using rule 7
	'-='           reduce using rule 7
	'/'            reduce using rule 7
	'/='           reduce using rule 7
	'<'            reduce using rule 7
	'<='           reduce using rule 7
	'='            reduce using rule 7
	'=='           reduce using rule 7
	'>'            reduce using rule 7
	'>='           reduce using rule 7
	'^'            reduce using rule 7
	'^='           reduce using rule 7
	'_'            reduce using rule 7
	'and'          reduce using rule 7
	'boolean'      reduce using rule 7
	'catch'        reduce using rule 7
	'character'    reduce using rule 7
	'const'        reduce using rule 7
	'do'           reduce using rule 7
	'else'         reduce using rule 7
	'end'          reduce using rule 7
	'float'        reduce using rule 7
	'for'          reduce using rule 7
	'function'     reduce using rule 7
	'if'           reduce using rule 7
	'integer'      reduce using rule 7
	'not'          reduce using rule 7
	'or'           reduce using rule 7
	'pointer'      reduce using rule 7
	'repeat'       reduce using rule 7
	'return'       reduce using rule 7
	'string'       reduce using rule 7
	'then'         reduce using rule 7
	'try'          reduce using rule 7
	'until'        reduce using rule 7
	'void'         reduce using rule 7
	'while'        reduce using rule 7
	'{'            reduce using rule 7
	'{}'           reduce using rule 7
	'|='           reduce using rule 7
	'}'            reduce using rule 7
	'~='           reduce using rule 7
	L_Pbool        reduce using rule 7
	L_Pident       reduce using rule 7
	L_Pint         reduce using rule 7
	L_Pstring      reduce using rule 7
	L_Preal        reduce using rule 7
	L_Pchar        reduce using rule 7
	%eof           reduce using rule 7


State 24

	Pstring -> L_Pstring .                              (rule 9)

	'%'            reduce using rule 9
	'%='           reduce using rule 9
	'&'            reduce using rule 9
	'&='           reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'*'            reduce using rule 9
	'*='           reduce using rule 9
	'+'            reduce using rule 9
	'+='           reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	'-='           reduce using rule 9
	'/'            reduce using rule 9
	'/='           reduce using rule 9
	'<'            reduce using rule 9
	'<='           reduce using rule 9
	'='            reduce using rule 9
	'=='           reduce using rule 9
	'>'            reduce using rule 9
	'>='           reduce using rule 9
	'^'            reduce using rule 9
	'^='           reduce using rule 9
	'_'            reduce using rule 9
	'and'          reduce using rule 9
	'boolean'      reduce using rule 9
	'catch'        reduce using rule 9
	'character'    reduce using rule 9
	'const'        reduce using rule 9
	'do'           reduce using rule 9
	'else'         reduce using rule 9
	'end'          reduce using rule 9
	'float'        reduce using rule 9
	'for'          reduce using rule 9
	'function'     reduce using rule 9
	'if'           reduce using rule 9
	'integer'      reduce using rule 9
	'not'          reduce using rule 9
	'or'           reduce using rule 9
	'pointer'      reduce using rule 9
	'repeat'       reduce using rule 9
	'return'       reduce using rule 9
	'string'       reduce using rule 9
	'then'         reduce using rule 9
	'try'          reduce using rule 9
	'until'        reduce using rule 9
	'void'         reduce using rule 9
	'while'        reduce using rule 9
	'{'            reduce using rule 9
	'{}'           reduce using rule 9
	'|='           reduce using rule 9
	'}'            reduce using rule 9
	'~='           reduce using rule 9
	L_Pbool        reduce using rule 9
	L_Pident       reduce using rule 9
	L_Pint         reduce using rule 9
	L_Pstring      reduce using rule 9
	L_Preal        reduce using rule 9
	L_Pchar        reduce using rule 9
	%eof           reduce using rule 9


State 25

	Preal -> L_Preal .                                  (rule 10)

	'%'            reduce using rule 10
	'%='           reduce using rule 10
	'&'            reduce using rule 10
	'&='           reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'*='           reduce using rule 10
	'+'            reduce using rule 10
	'+='           reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'-='           reduce using rule 10
	'/'            reduce using rule 10
	'/='           reduce using rule 10
	'<'            reduce using rule 10
	'<='           reduce using rule 10
	'='            reduce using rule 10
	'=='           reduce using rule 10
	'>'            reduce using rule 10
	'>='           reduce using rule 10
	'^'            reduce using rule 10
	'^='           reduce using rule 10
	'_'            reduce using rule 10
	'and'          reduce using rule 10
	'boolean'      reduce using rule 10
	'catch'        reduce using rule 10
	'character'    reduce using rule 10
	'const'        reduce using rule 10
	'do'           reduce using rule 10
	'else'         reduce using rule 10
	'end'          reduce using rule 10
	'float'        reduce using rule 10
	'for'          reduce using rule 10
	'function'     reduce using rule 10
	'if'           reduce using rule 10
	'integer'      reduce using rule 10
	'not'          reduce using rule 10
	'or'           reduce using rule 10
	'pointer'      reduce using rule 10
	'repeat'       reduce using rule 10
	'return'       reduce using rule 10
	'string'       reduce using rule 10
	'then'         reduce using rule 10
	'try'          reduce using rule 10
	'until'        reduce using rule 10
	'void'         reduce using rule 10
	'while'        reduce using rule 10
	'{'            reduce using rule 10
	'{}'           reduce using rule 10
	'|='           reduce using rule 10
	'}'            reduce using rule 10
	'~='           reduce using rule 10
	L_Pbool        reduce using rule 10
	L_Pident       reduce using rule 10
	L_Pint         reduce using rule 10
	L_Pstring      reduce using rule 10
	L_Preal        reduce using rule 10
	L_Pchar        reduce using rule 10
	%eof           reduce using rule 10


State 26

	Pchar -> L_Pchar .                                  (rule 11)

	'%'            reduce using rule 11
	'%='           reduce using rule 11
	'&'            reduce using rule 11
	'&='           reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'*'            reduce using rule 11
	'*='           reduce using rule 11
	'+'            reduce using rule 11
	'+='           reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	'-='           reduce using rule 11
	'/'            reduce using rule 11
	'/='           reduce using rule 11
	'<'            reduce using rule 11
	'<='           reduce using rule 11
	'='            reduce using rule 11
	'=='           reduce using rule 11
	'>'            reduce using rule 11
	'>='           reduce using rule 11
	'^'            reduce using rule 11
	'^='           reduce using rule 11
	'_'            reduce using rule 11
	'and'          reduce using rule 11
	'boolean'      reduce using rule 11
	'catch'        reduce using rule 11
	'character'    reduce using rule 11
	'const'        reduce using rule 11
	'do'           reduce using rule 11
	'else'         reduce using rule 11
	'end'          reduce using rule 11
	'float'        reduce using rule 11
	'for'          reduce using rule 11
	'function'     reduce using rule 11
	'if'           reduce using rule 11
	'integer'      reduce using rule 11
	'not'          reduce using rule 11
	'or'           reduce using rule 11
	'pointer'      reduce using rule 11
	'repeat'       reduce using rule 11
	'return'       reduce using rule 11
	'string'       reduce using rule 11
	'then'         reduce using rule 11
	'try'          reduce using rule 11
	'until'        reduce using rule 11
	'void'         reduce using rule 11
	'while'        reduce using rule 11
	'{'            reduce using rule 11
	'{}'           reduce using rule 11
	'|='           reduce using rule 11
	'}'            reduce using rule 11
	'~='           reduce using rule 11
	L_Pbool        reduce using rule 11
	L_Pident       reduce using rule 11
	L_Pint         reduce using rule 11
	L_Pstring      reduce using rule 11
	L_Preal        reduce using rule 11
	L_Pchar        reduce using rule 11
	%eof           reduce using rule 11


State 27

	%start_pStm -> Stm .                                (rule 2)

	%eof           accept


State 28

	Stm -> Exp .                                        (rule 40)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'&'            reduce using rule 40
	'('            reduce using rule 40
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'_'            reduce using rule 40
	'and'          shift, and enter state 87
	'boolean'      reduce using rule 40
	'catch'        reduce using rule 40
	'character'    reduce using rule 40
	'const'        reduce using rule 40
	'else'         reduce using rule 40
	'end'          reduce using rule 40
	'float'        reduce using rule 40
	'for'          reduce using rule 40
	'function'     reduce using rule 40
	'if'           reduce using rule 40
	'integer'      reduce using rule 40
	'not'          reduce using rule 40
	'or'           shift, and enter state 88
	'pointer'      reduce using rule 40
	'repeat'       reduce using rule 40
	'return'       reduce using rule 40
	'string'       reduce using rule 40
	'try'          reduce using rule 40
	'until'        reduce using rule 40
	'void'         reduce using rule 40
	'while'        reduce using rule 40
	'{'            reduce using rule 40
	'{}'           reduce using rule 40
	'~='           shift, and enter state 89
	L_Pbool        reduce using rule 40
	L_Pident       reduce using rule 40
	L_Pint         reduce using rule 40
	L_Pstring      reduce using rule 40
	L_Preal        reduce using rule 40
	L_Pchar        reduce using rule 40
	%eof           reduce using rule 40


State 29

	Stm -> Lexp . Assignment_Op Exp                     (rule 38)
	Exp -> Lexp .                                       (rule 72)
	Lexp -> Lexp . '{' Exp '}'                          (rule 84)

	'%'            reduce using rule 72
	'%='           shift, and enter state 66
	'&'            reduce using rule 72
	'&='           shift, and enter state 67
	'('            reduce using rule 72
	'*'            reduce using rule 72
	'*='           shift, and enter state 68
	'+'            reduce using rule 72
	'+='           shift, and enter state 69
	'-'            reduce using rule 72
	'-='           shift, and enter state 70
	'/'            reduce using rule 72
	'/='           shift, and enter state 71
	'<'            reduce using rule 72
	'<='           reduce using rule 72
	'='            shift, and enter state 72
	'=='           reduce using rule 72
	'>'            reduce using rule 72
	'>='           reduce using rule 72
	'^'            reduce using rule 72
	'^='           shift, and enter state 73
	'_'            reduce using rule 72
	'and'          reduce using rule 72
	'boolean'      reduce using rule 72
	'catch'        reduce using rule 72
	'character'    reduce using rule 72
	'const'        reduce using rule 72
	'else'         reduce using rule 72
	'end'          reduce using rule 72
	'float'        reduce using rule 72
	'for'          reduce using rule 72
	'function'     reduce using rule 72
	'if'           reduce using rule 72
	'integer'      reduce using rule 72
	'not'          reduce using rule 72
	'or'           reduce using rule 72
	'pointer'      reduce using rule 72
	'repeat'       reduce using rule 72
	'return'       reduce using rule 72
	'string'       reduce using rule 72
	'try'          reduce using rule 72
	'until'        reduce using rule 72
	'void'         reduce using rule 72
	'while'        reduce using rule 72
	'{'            shift, and enter state 74
	'{}'           reduce using rule 72
	'|='           shift, and enter state 75
	'~='           reduce using rule 72
	L_Pbool        reduce using rule 72
	L_Pident       reduce using rule 72
	L_Pint         reduce using rule 72
	L_Pstring      reduce using rule 72
	L_Preal        reduce using rule 72
	L_Pchar        reduce using rule 72
	%eof           reduce using rule 72

	Assignment_Op  goto state 65

State 30

	Stm -> 'for' . Pident '=' Exp ',' Exp ',' Exp 'do' ListDecStm 'end'    (rule 45)

	L_Pident       shift, and enter state 22

	Pident         goto state 64

State 31

	Stm -> 'if' . Exp 'then' ListDecStm 'end'           (rule 41)
	Stm -> 'if' . Exp 'then' ListDecStm 'else' ListDecStm 'end'    (rule 42)
	Exp -> 'if' . Exp 'then' ListDecStm 'else' ListDecStm 'end'    (rule 67)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 63
	Lexp           goto state 13

State 32

	Stm -> 'repeat' . ListDecStm 'until' Exp            (rule 44)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'until'        reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 62

State 33

	Stm -> 'return' . Exp                               (rule 39)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 61
	Lexp           goto state 13

State 34

	Stm -> 'try' . ListDecStm 'catch' ListDecStm 'end'    (rule 46)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'catch'        reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 60

State 35

	Stm -> 'while' . Exp 'do' ListDecStm 'end'          (rule 43)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 59
	Lexp           goto state 13

State 36

	%start_pDec -> Dec .                                (rule 1)

	%eof           accept


State 37

	Dec -> Type_specifier . Pident                      (rule 17)
	Dec -> Type_specifier . Pident '=' Exp              (rule 19)

	L_Pident       shift, and enter state 22

	Pident         goto state 58

State 38

	Type_specifier -> 'boolean' .                       (rule 21)

	L_Pident       reduce using rule 21


State 39

	Type_specifier -> 'character' .                     (rule 22)

	L_Pident       reduce using rule 22


State 40

	Dec -> 'const' . Type_specifier Pident              (rule 18)
	Dec -> 'const' . Type_specifier Pident '=' Exp      (rule 20)

	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'float'        shift, and enter state 41
	'integer'      shift, and enter state 43
	'pointer'      shift, and enter state 44
	'string'       shift, and enter state 45
	'void'         shift, and enter state 46
	'{'            shift, and enter state 47
	'{}'           shift, and enter state 48

	Type_specifier goto state 57

State 41

	Type_specifier -> 'float' .                         (rule 23)

	L_Pident       reduce using rule 23


State 42

	Dec -> 'function' . Type_specifier Pident '(' ListArgument ')' ListDecStm 'end'    (rule 15)
	Dec -> 'function' . Pident '(' ListArgument ')' ListDecStm 'end'    (rule 16)

	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'float'        shift, and enter state 41
	'integer'      shift, and enter state 43
	'pointer'      shift, and enter state 44
	'string'       shift, and enter state 45
	'void'         shift, and enter state 46
	'{'            shift, and enter state 47
	'{}'           shift, and enter state 48
	L_Pident       shift, and enter state 22

	Pident         goto state 55
	Type_specifier goto state 56

State 43

	Type_specifier -> 'integer' .                       (rule 24)

	L_Pident       reduce using rule 24


State 44

	Type_specifier -> 'pointer' . Type_specifier        (rule 27)

	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'float'        shift, and enter state 41
	'integer'      shift, and enter state 43
	'pointer'      shift, and enter state 44
	'string'       shift, and enter state 45
	'void'         shift, and enter state 46
	'{'            shift, and enter state 47
	'{}'           shift, and enter state 48

	Type_specifier goto state 54

State 45

	Type_specifier -> 'string' .                        (rule 25)

	L_Pident       reduce using rule 25


State 46

	Type_specifier -> 'void' .                          (rule 26)

	L_Pident       reduce using rule 26


State 47

	Type_specifier -> '{' . Exp '}' Type_specifier      (rule 29)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 53
	Lexp           goto state 13

State 48

	Type_specifier -> '{}' . Type_specifier             (rule 28)

	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'float'        shift, and enter state 41
	'integer'      shift, and enter state 43
	'pointer'      shift, and enter state 44
	'string'       shift, and enter state 45
	'void'         shift, and enter state 46
	'{'            shift, and enter state 47
	'{}'           shift, and enter state 48

	Type_specifier goto state 52

State 49

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 50

	Program -> ListDec .                                (rule 12)
	ListDec -> ListDec . Dec                            (rule 14)

	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'float'        shift, and enter state 41
	'function'     shift, and enter state 42
	'integer'      shift, and enter state 43
	'pointer'      shift, and enter state 44
	'string'       shift, and enter state 45
	'void'         shift, and enter state 46
	'{'            shift, and enter state 47
	'{}'           shift, and enter state 48
	%eof           reduce using rule 12

	Dec            goto state 51
	Type_specifier goto state 37

State 51

	ListDec -> ListDec Dec .                            (rule 14)

	'boolean'      reduce using rule 14
	'character'    reduce using rule 14
	'const'        reduce using rule 14
	'float'        reduce using rule 14
	'function'     reduce using rule 14
	'integer'      reduce using rule 14
	'pointer'      reduce using rule 14
	'string'       reduce using rule 14
	'void'         reduce using rule 14
	'{'            reduce using rule 14
	'{}'           reduce using rule 14
	%eof           reduce using rule 14


State 52

	Type_specifier -> '{}' Type_specifier .             (rule 28)

	L_Pident       reduce using rule 28


State 53

	Type_specifier -> '{' Exp . '}' Type_specifier      (rule 29)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'}'            shift, and enter state 135
	'~='           shift, and enter state 89


State 54

	Type_specifier -> 'pointer' Type_specifier .        (rule 27)

	L_Pident       reduce using rule 27


State 55

	Dec -> 'function' Pident . '(' ListArgument ')' ListDecStm 'end'    (rule 16)

	'('            shift, and enter state 134


State 56

	Dec -> 'function' Type_specifier . Pident '(' ListArgument ')' ListDecStm 'end'    (rule 15)

	L_Pident       shift, and enter state 22

	Pident         goto state 133

State 57

	Dec -> 'const' Type_specifier . Pident              (rule 18)
	Dec -> 'const' Type_specifier . Pident '=' Exp      (rule 20)

	L_Pident       shift, and enter state 22

	Pident         goto state 132

State 58

	Dec -> Type_specifier Pident .                      (rule 17)
	Dec -> Type_specifier Pident . '=' Exp              (rule 19)

	'&'            reduce using rule 17
	'('            reduce using rule 17
	'-'            reduce using rule 17
	'='            shift, and enter state 131
	'_'            reduce using rule 17
	'boolean'      reduce using rule 17
	'catch'        reduce using rule 17
	'character'    reduce using rule 17
	'const'        reduce using rule 17
	'else'         reduce using rule 17
	'end'          reduce using rule 17
	'float'        reduce using rule 17
	'for'          reduce using rule 17
	'function'     reduce using rule 17
	'if'           reduce using rule 17
	'integer'      reduce using rule 17
	'not'          reduce using rule 17
	'pointer'      reduce using rule 17
	'repeat'       reduce using rule 17
	'return'       reduce using rule 17
	'string'       reduce using rule 17
	'try'          reduce using rule 17
	'until'        reduce using rule 17
	'void'         reduce using rule 17
	'while'        reduce using rule 17
	'{'            reduce using rule 17
	'{}'           reduce using rule 17
	L_Pbool        reduce using rule 17
	L_Pident       reduce using rule 17
	L_Pint         reduce using rule 17
	L_Pstring      reduce using rule 17
	L_Preal        reduce using rule 17
	L_Pchar        reduce using rule 17
	%eof           reduce using rule 17


State 59

	Stm -> 'while' Exp . 'do' ListDecStm 'end'          (rule 43)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'do'           shift, and enter state 130
	'or'           shift, and enter state 88
	'~='           shift, and enter state 89


State 60

	Stm -> 'try' ListDecStm . 'catch' ListDecStm 'end'    (rule 46)
	ListDecStm -> ListDecStm . DecStm                   (rule 50)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'catch'        shift, and enter state 129
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 61

	Stm -> 'return' Exp .                               (rule 39)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'&'            reduce using rule 39
	'('            reduce using rule 39
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            reduce using rule 39
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'_'            reduce using rule 39
	'and'          shift, and enter state 87
	'boolean'      reduce using rule 39
	'catch'        reduce using rule 39
	'character'    reduce using rule 39
	'const'        reduce using rule 39
	'else'         reduce using rule 39
	'end'          reduce using rule 39
	'float'        reduce using rule 39
	'for'          reduce using rule 39
	'function'     reduce using rule 39
	'if'           reduce using rule 39
	'integer'      reduce using rule 39
	'not'          reduce using rule 39
	'or'           shift, and enter state 88
	'pointer'      reduce using rule 39
	'repeat'       reduce using rule 39
	'return'       reduce using rule 39
	'string'       reduce using rule 39
	'try'          reduce using rule 39
	'until'        reduce using rule 39
	'void'         reduce using rule 39
	'while'        reduce using rule 39
	'{'            reduce using rule 39
	'{}'           reduce using rule 39
	'~='           shift, and enter state 89
	L_Pbool        reduce using rule 39
	L_Pident       reduce using rule 39
	L_Pint         reduce using rule 39
	L_Pstring      reduce using rule 39
	L_Preal        reduce using rule 39
	L_Pchar        reduce using rule 39
	%eof           reduce using rule 39


State 62

	Stm -> 'repeat' ListDecStm . 'until' Exp            (rule 44)
	ListDecStm -> ListDecStm . DecStm                   (rule 50)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'until'        shift, and enter state 127
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 63

	Stm -> 'if' Exp . 'then' ListDecStm 'end'           (rule 41)
	Stm -> 'if' Exp . 'then' ListDecStm 'else' ListDecStm 'end'    (rule 42)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	Exp -> 'if' Exp . 'then' ListDecStm 'else' ListDecStm 'end'    (rule 67)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'then'         shift, and enter state 123
	'~='           shift, and enter state 89


State 64

	Stm -> 'for' Pident . '=' Exp ',' Exp ',' Exp 'do' ListDecStm 'end'    (rule 45)

	'='            shift, and enter state 122


State 65

	Stm -> Lexp Assignment_Op . Exp                     (rule 38)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 121
	Lexp           goto state 13

State 66

	Assignment_Op -> '%=' .                             (rule 88)

	'&'            reduce using rule 88
	'('            reduce using rule 88
	'-'            reduce using rule 88
	'_'            reduce using rule 88
	'if'           reduce using rule 88
	'not'          reduce using rule 88
	'{'            reduce using rule 88
	L_Pbool        reduce using rule 88
	L_Pident       reduce using rule 88
	L_Pint         reduce using rule 88
	L_Pstring      reduce using rule 88
	L_Preal        reduce using rule 88
	L_Pchar        reduce using rule 88


State 67

	Assignment_Op -> '&=' .                             (rule 92)

	'&'            reduce using rule 92
	'('            reduce using rule 92
	'-'            reduce using rule 92
	'_'            reduce using rule 92
	'if'           reduce using rule 92
	'not'          reduce using rule 92
	'{'            reduce using rule 92
	L_Pbool        reduce using rule 92
	L_Pident       reduce using rule 92
	L_Pint         reduce using rule 92
	L_Pstring      reduce using rule 92
	L_Preal        reduce using rule 92
	L_Pchar        reduce using rule 92


State 68

	Assignment_Op -> '*=' .                             (rule 86)

	'&'            reduce using rule 86
	'('            reduce using rule 86
	'-'            reduce using rule 86
	'_'            reduce using rule 86
	'if'           reduce using rule 86
	'not'          reduce using rule 86
	'{'            reduce using rule 86
	L_Pbool        reduce using rule 86
	L_Pident       reduce using rule 86
	L_Pint         reduce using rule 86
	L_Pstring      reduce using rule 86
	L_Preal        reduce using rule 86
	L_Pchar        reduce using rule 86


State 69

	Assignment_Op -> '+=' .                             (rule 89)

	'&'            reduce using rule 89
	'('            reduce using rule 89
	'-'            reduce using rule 89
	'_'            reduce using rule 89
	'if'           reduce using rule 89
	'not'          reduce using rule 89
	'{'            reduce using rule 89
	L_Pbool        reduce using rule 89
	L_Pident       reduce using rule 89
	L_Pint         reduce using rule 89
	L_Pstring      reduce using rule 89
	L_Preal        reduce using rule 89
	L_Pchar        reduce using rule 89


State 70

	Assignment_Op -> '-=' .                             (rule 90)

	'&'            reduce using rule 90
	'('            reduce using rule 90
	'-'            reduce using rule 90
	'_'            reduce using rule 90
	'if'           reduce using rule 90
	'not'          reduce using rule 90
	'{'            reduce using rule 90
	L_Pbool        reduce using rule 90
	L_Pident       reduce using rule 90
	L_Pint         reduce using rule 90
	L_Pstring      reduce using rule 90
	L_Preal        reduce using rule 90
	L_Pchar        reduce using rule 90


State 71

	Assignment_Op -> '/=' .                             (rule 87)

	'&'            reduce using rule 87
	'('            reduce using rule 87
	'-'            reduce using rule 87
	'_'            reduce using rule 87
	'if'           reduce using rule 87
	'not'          reduce using rule 87
	'{'            reduce using rule 87
	L_Pbool        reduce using rule 87
	L_Pident       reduce using rule 87
	L_Pint         reduce using rule 87
	L_Pstring      reduce using rule 87
	L_Preal        reduce using rule 87
	L_Pchar        reduce using rule 87


State 72

	Assignment_Op -> '=' .                              (rule 85)

	'&'            reduce using rule 85
	'('            reduce using rule 85
	'-'            reduce using rule 85
	'_'            reduce using rule 85
	'if'           reduce using rule 85
	'not'          reduce using rule 85
	'{'            reduce using rule 85
	L_Pbool        reduce using rule 85
	L_Pident       reduce using rule 85
	L_Pint         reduce using rule 85
	L_Pstring      reduce using rule 85
	L_Preal        reduce using rule 85
	L_Pchar        reduce using rule 85


State 73

	Assignment_Op -> '^=' .                             (rule 91)

	'&'            reduce using rule 91
	'('            reduce using rule 91
	'-'            reduce using rule 91
	'_'            reduce using rule 91
	'if'           reduce using rule 91
	'not'          reduce using rule 91
	'{'            reduce using rule 91
	L_Pbool        reduce using rule 91
	L_Pident       reduce using rule 91
	L_Pint         reduce using rule 91
	L_Pstring      reduce using rule 91
	L_Preal        reduce using rule 91
	L_Pchar        reduce using rule 91


State 74

	Lexp -> Lexp '{' . Exp '}'                          (rule 84)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 120
	Lexp           goto state 13

State 75

	Assignment_Op -> '|=' .                             (rule 93)

	'&'            reduce using rule 93
	'('            reduce using rule 93
	'-'            reduce using rule 93
	'_'            reduce using rule 93
	'if'           reduce using rule 93
	'not'          reduce using rule 93
	'{'            reduce using rule 93
	L_Pbool        reduce using rule 93
	L_Pident       reduce using rule 93
	L_Pint         reduce using rule 93
	L_Pstring      reduce using rule 93
	L_Preal        reduce using rule 93
	L_Pchar        reduce using rule 93


State 76

	Exp -> Exp '%' . Exp                                (rule 66)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 119
	Lexp           goto state 13

State 77

	Exp -> Exp '*' . Exp                                (rule 63)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 118
	Lexp           goto state 13

State 78

	Exp -> Exp '+' . Exp                                (rule 61)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 117
	Lexp           goto state 13

State 79

	Exp -> Exp '-' . Exp                                (rule 62)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 116
	Lexp           goto state 13

State 80

	Exp -> Exp '/' . Exp                                (rule 64)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 115
	Lexp           goto state 13

State 81

	Exp -> Exp '<' . Exp                                (rule 57)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 114
	Lexp           goto state 13

State 82

	Exp -> Exp '<=' . Exp                               (rule 59)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 113
	Lexp           goto state 13

State 83

	Exp -> Exp '==' . Exp                               (rule 55)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 112
	Lexp           goto state 13

State 84

	Exp -> Exp '>' . Exp                                (rule 58)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 111
	Lexp           goto state 13

State 85

	Exp -> Exp '>=' . Exp                               (rule 60)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 110
	Lexp           goto state 13

State 86

	Exp -> Exp '^' . Exp                                (rule 65)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 109
	Lexp           goto state 13

State 87

	Exp -> Exp 'and' . Exp                              (rule 54)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 108
	Lexp           goto state 13

State 88

	Exp -> Exp 'or' . Exp                               (rule 53)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 107
	Lexp           goto state 13

State 89

	Exp -> Exp '~=' . Exp                               (rule 56)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 106
	Lexp           goto state 13

State 90

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	ListExp -> Exp .                                    (rule 79)
	ListExp -> Exp . ',' ListExp                        (rule 80)

	'%'            shift, and enter state 76
	')'            reduce using rule 79
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	','            shift, and enter state 105
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'}'            reduce using rule 79
	'~='           shift, and enter state 89


State 91

	Exp -> '{' ListExp . '}'                            (rule 71)

	'}'            shift, and enter state 104


State 92

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	Exp -> 'not' Exp .                                  (rule 70)

	'%'            shift, and enter state 76
	'%='           reduce using rule 70
	'&'            reduce using rule 70
	'&='           reduce using rule 70
	'('            reduce using rule 70
	')'            reduce using rule 70
	'*'            shift, and enter state 77
	'*='           reduce using rule 70
	'+'            shift, and enter state 78
	'+='           reduce using rule 70
	','            reduce using rule 70
	'-'            shift, and enter state 79
	'-='           reduce using rule 70
	'/'            shift, and enter state 80
	'/='           reduce using rule 70
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'='            reduce using rule 70
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'^='           reduce using rule 70
	'_'            reduce using rule 70
	'and'          shift, and enter state 87
	'boolean'      reduce using rule 70
	'catch'        reduce using rule 70
	'character'    reduce using rule 70
	'const'        reduce using rule 70
	'do'           reduce using rule 70
	'else'         reduce using rule 70
	'end'          reduce using rule 70
	'float'        reduce using rule 70
	'for'          reduce using rule 70
	'function'     reduce using rule 70
	'if'           reduce using rule 70
	'integer'      reduce using rule 70
	'not'          reduce using rule 70
	'or'           shift, and enter state 88
	'pointer'      reduce using rule 70
	'repeat'       reduce using rule 70
	'return'       reduce using rule 70
	'string'       reduce using rule 70
	'then'         reduce using rule 70
	'try'          reduce using rule 70
	'until'        reduce using rule 70
	'void'         reduce using rule 70
	'while'        reduce using rule 70
	'{'            reduce using rule 70
	'{}'           reduce using rule 70
	'|='           reduce using rule 70
	'}'            reduce using rule 70
	'~='           shift, and enter state 89
	L_Pbool        reduce using rule 70
	L_Pident       reduce using rule 70
	L_Pint         reduce using rule 70
	L_Pstring      reduce using rule 70
	L_Preal        reduce using rule 70
	L_Pchar        reduce using rule 70
	%eof           reduce using rule 70


State 93

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	Exp -> 'if' Exp . 'then' ListDecStm 'else' ListDecStm 'end'    (rule 67)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'then'         shift, and enter state 103
	'~='           shift, and enter state 89


State 94

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	Lexp -> '_' Exp .                                   (rule 83)

	'%'            reduce using rule 83
	'%='           reduce using rule 83
	'&'            reduce using rule 83
	'&='           reduce using rule 83
	'('            reduce using rule 83
	')'            reduce using rule 83
	'*'            reduce using rule 83
	'*='           reduce using rule 83
	'+'            reduce using rule 83
	'+='           reduce using rule 83
	','            reduce using rule 83
	'-'            reduce using rule 83
	'-='           reduce using rule 83
	'/'            reduce using rule 83
	'/='           reduce using rule 83
	'<'            reduce using rule 83
	'<='           reduce using rule 83
	'='            reduce using rule 83
	'=='           reduce using rule 83
	'>'            reduce using rule 83
	'>='           reduce using rule 83
	'^'            reduce using rule 83
	'^='           reduce using rule 83
	'_'            reduce using rule 83
	'and'          reduce using rule 83
	'boolean'      reduce using rule 83
	'catch'        reduce using rule 83
	'character'    reduce using rule 83
	'const'        reduce using rule 83
	'do'           reduce using rule 83
	'else'         reduce using rule 83
	'end'          reduce using rule 83
	'float'        reduce using rule 83
	'for'          reduce using rule 83
	'function'     reduce using rule 83
	'if'           reduce using rule 83
	'integer'      reduce using rule 83
	'not'          reduce using rule 83
	'or'           reduce using rule 83
	'pointer'      reduce using rule 83
	'repeat'       reduce using rule 83
	'return'       reduce using rule 83
	'string'       reduce using rule 83
	'then'         reduce using rule 83
	'try'          reduce using rule 83
	'until'        reduce using rule 83
	'void'         reduce using rule 83
	'while'        reduce using rule 83
	'{'            reduce using rule 83
	'{}'           reduce using rule 83
	'|='           reduce using rule 83
	'}'            reduce using rule 83
	'~='           reduce using rule 83
	L_Pbool        reduce using rule 83
	L_Pident       reduce using rule 83
	L_Pint         reduce using rule 83
	L_Pstring      reduce using rule 83
	L_Preal        reduce using rule 83
	L_Pchar        reduce using rule 83
	%eof           reduce using rule 83


State 95

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	Exp -> '-' Exp .                                    (rule 69)

	'%'            reduce using rule 69
	'%='           reduce using rule 69
	'&'            reduce using rule 69
	'&='           reduce using rule 69
	'('            reduce using rule 69
	')'            reduce using rule 69
	'*'            reduce using rule 69
	'*='           reduce using rule 69
	'+'            reduce using rule 69
	'+='           reduce using rule 69
	','            reduce using rule 69
	'-'            reduce using rule 69
	'-='           reduce using rule 69
	'/'            reduce using rule 69
	'/='           reduce using rule 69
	'<'            reduce using rule 69
	'<='           reduce using rule 69
	'='            reduce using rule 69
	'=='           reduce using rule 69
	'>'            reduce using rule 69
	'>='           reduce using rule 69
	'^'            reduce using rule 69
	'^='           reduce using rule 69
	'_'            reduce using rule 69
	'and'          reduce using rule 69
	'boolean'      reduce using rule 69
	'catch'        reduce using rule 69
	'character'    reduce using rule 69
	'const'        reduce using rule 69
	'do'           reduce using rule 69
	'else'         reduce using rule 69
	'end'          reduce using rule 69
	'float'        reduce using rule 69
	'for'          reduce using rule 69
	'function'     reduce using rule 69
	'if'           reduce using rule 69
	'integer'      reduce using rule 69
	'not'          reduce using rule 69
	'or'           reduce using rule 69
	'pointer'      reduce using rule 69
	'repeat'       reduce using rule 69
	'return'       reduce using rule 69
	'string'       reduce using rule 69
	'then'         reduce using rule 69
	'try'          reduce using rule 69
	'until'        reduce using rule 69
	'void'         reduce using rule 69
	'while'        reduce using rule 69
	'{'            reduce using rule 69
	'{}'           reduce using rule 69
	'|='           reduce using rule 69
	'}'            reduce using rule 69
	'~='           reduce using rule 69
	L_Pbool        reduce using rule 69
	L_Pident       reduce using rule 69
	L_Pint         reduce using rule 69
	L_Pstring      reduce using rule 69
	L_Preal        reduce using rule 69
	L_Pchar        reduce using rule 69
	%eof           reduce using rule 69


State 96

	Exp -> '(' Exp . ')'                                (rule 52)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	')'            shift, and enter state 102
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'~='           shift, and enter state 89


State 97

	Exp -> Lexp .                                       (rule 72)
	Lexp -> '(' Lexp . ')'                              (rule 82)
	Lexp -> Lexp . '{' Exp '}'                          (rule 84)

	'%'            reduce using rule 72
	')'            shift, and enter state 101
	'*'            reduce using rule 72
	'+'            reduce using rule 72
	'-'            reduce using rule 72
	'/'            reduce using rule 72
	'<'            reduce using rule 72
	'<='           reduce using rule 72
	'=='           reduce using rule 72
	'>'            reduce using rule 72
	'>='           reduce using rule 72
	'^'            reduce using rule 72
	'and'          reduce using rule 72
	'or'           reduce using rule 72
	'{'            shift, and enter state 74
	'~='           reduce using rule 72


State 98

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	Exp -> '&' Exp .                                    (rule 68)

	'%'            reduce using rule 68
	'%='           reduce using rule 68
	'&'            reduce using rule 68
	'&='           reduce using rule 68
	'('            reduce using rule 68
	')'            reduce using rule 68
	'*'            reduce using rule 68
	'*='           reduce using rule 68
	'+'            reduce using rule 68
	'+='           reduce using rule 68
	','            reduce using rule 68
	'-'            reduce using rule 68
	'-='           reduce using rule 68
	'/'            reduce using rule 68
	'/='           reduce using rule 68
	'<'            reduce using rule 68
	'<='           reduce using rule 68
	'='            reduce using rule 68
	'=='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'^'            reduce using rule 68
	'^='           reduce using rule 68
	'_'            reduce using rule 68
	'and'          reduce using rule 68
	'boolean'      reduce using rule 68
	'catch'        reduce using rule 68
	'character'    reduce using rule 68
	'const'        reduce using rule 68
	'do'           reduce using rule 68
	'else'         reduce using rule 68
	'end'          reduce using rule 68
	'float'        reduce using rule 68
	'for'          reduce using rule 68
	'function'     reduce using rule 68
	'if'           reduce using rule 68
	'integer'      reduce using rule 68
	'not'          reduce using rule 68
	'or'           reduce using rule 68
	'pointer'      reduce using rule 68
	'repeat'       reduce using rule 68
	'return'       reduce using rule 68
	'string'       reduce using rule 68
	'then'         reduce using rule 68
	'try'          reduce using rule 68
	'until'        reduce using rule 68
	'void'         reduce using rule 68
	'while'        reduce using rule 68
	'{'            reduce using rule 68
	'{}'           reduce using rule 68
	'|='           reduce using rule 68
	'}'            reduce using rule 68
	'~='           reduce using rule 68
	L_Pbool        reduce using rule 68
	L_Pident       reduce using rule 68
	L_Pint         reduce using rule 68
	L_Pstring      reduce using rule 68
	L_Preal        reduce using rule 68
	L_Pchar        reduce using rule 68
	%eof           reduce using rule 68


State 99

	Exp -> Pident '(' . ListExp ')'                     (rule 51)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	')'            reduce using rule 78
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 90
	ListExp        goto state 100
	Lexp           goto state 13

State 100

	Exp -> Pident '(' ListExp . ')'                     (rule 51)

	')'            shift, and enter state 155


State 101

	Lexp -> '(' Lexp ')' .                              (rule 82)

	'%'            reduce using rule 82
	'%='           reduce using rule 82
	'&'            reduce using rule 82
	'&='           reduce using rule 82
	'('            reduce using rule 82
	')'            reduce using rule 82
	'*'            reduce using rule 82
	'*='           reduce using rule 82
	'+'            reduce using rule 82
	'+='           reduce using rule 82
	','            reduce using rule 82
	'-'            reduce using rule 82
	'-='           reduce using rule 82
	'/'            reduce using rule 82
	'/='           reduce using rule 82
	'<'            reduce using rule 82
	'<='           reduce using rule 82
	'='            reduce using rule 82
	'=='           reduce using rule 82
	'>'            reduce using rule 82
	'>='           reduce using rule 82
	'^'            reduce using rule 82
	'^='           reduce using rule 82
	'_'            reduce using rule 82
	'and'          reduce using rule 82
	'boolean'      reduce using rule 82
	'catch'        reduce using rule 82
	'character'    reduce using rule 82
	'const'        reduce using rule 82
	'do'           reduce using rule 82
	'else'         reduce using rule 82
	'end'          reduce using rule 82
	'float'        reduce using rule 82
	'for'          reduce using rule 82
	'function'     reduce using rule 82
	'if'           reduce using rule 82
	'integer'      reduce using rule 82
	'not'          reduce using rule 82
	'or'           reduce using rule 82
	'pointer'      reduce using rule 82
	'repeat'       reduce using rule 82
	'return'       reduce using rule 82
	'string'       reduce using rule 82
	'then'         reduce using rule 82
	'try'          reduce using rule 82
	'until'        reduce using rule 82
	'void'         reduce using rule 82
	'while'        reduce using rule 82
	'{'            reduce using rule 82
	'{}'           reduce using rule 82
	'|='           reduce using rule 82
	'}'            reduce using rule 82
	'~='           reduce using rule 82
	L_Pbool        reduce using rule 82
	L_Pident       reduce using rule 82
	L_Pint         reduce using rule 82
	L_Pstring      reduce using rule 82
	L_Preal        reduce using rule 82
	L_Pchar        reduce using rule 82
	%eof           reduce using rule 82


State 102

	Exp -> '(' Exp ')' .                                (rule 52)

	'%'            reduce using rule 52
	'%='           reduce using rule 52
	'&'            reduce using rule 52
	'&='           reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52
	'*'            reduce using rule 52
	'*='           reduce using rule 52
	'+'            reduce using rule 52
	'+='           reduce using rule 52
	','            reduce using rule 52
	'-'            reduce using rule 52
	'-='           reduce using rule 52
	'/'            reduce using rule 52
	'/='           reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'='            reduce using rule 52
	'=='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	'^'            reduce using rule 52
	'^='           reduce using rule 52
	'_'            reduce using rule 52
	'and'          reduce using rule 52
	'boolean'      reduce using rule 52
	'catch'        reduce using rule 52
	'character'    reduce using rule 52
	'const'        reduce using rule 52
	'do'           reduce using rule 52
	'else'         reduce using rule 52
	'end'          reduce using rule 52
	'float'        reduce using rule 52
	'for'          reduce using rule 52
	'function'     reduce using rule 52
	'if'           reduce using rule 52
	'integer'      reduce using rule 52
	'not'          reduce using rule 52
	'or'           reduce using rule 52
	'pointer'      reduce using rule 52
	'repeat'       reduce using rule 52
	'return'       reduce using rule 52
	'string'       reduce using rule 52
	'then'         reduce using rule 52
	'try'          reduce using rule 52
	'until'        reduce using rule 52
	'void'         reduce using rule 52
	'while'        reduce using rule 52
	'{'            reduce using rule 52
	'{}'           reduce using rule 52
	'|='           reduce using rule 52
	'}'            reduce using rule 52
	'~='           reduce using rule 52
	L_Pbool        reduce using rule 52
	L_Pident       reduce using rule 52
	L_Pint         reduce using rule 52
	L_Pstring      reduce using rule 52
	L_Preal        reduce using rule 52
	L_Pchar        reduce using rule 52
	%eof           reduce using rule 52


State 103

	Exp -> 'if' Exp 'then' . ListDecStm 'else' ListDecStm 'end'    (rule 67)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'else'         reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 154

State 104

	Exp -> '{' ListExp '}' .                            (rule 71)

	'%'            reduce using rule 71
	'%='           reduce using rule 71
	'&'            reduce using rule 71
	'&='           reduce using rule 71
	'('            reduce using rule 71
	')'            reduce using rule 71
	'*'            reduce using rule 71
	'*='           reduce using rule 71
	'+'            reduce using rule 71
	'+='           reduce using rule 71
	','            reduce using rule 71
	'-'            reduce using rule 71
	'-='           reduce using rule 71
	'/'            reduce using rule 71
	'/='           reduce using rule 71
	'<'            reduce using rule 71
	'<='           reduce using rule 71
	'='            reduce using rule 71
	'=='           reduce using rule 71
	'>'            reduce using rule 71
	'>='           reduce using rule 71
	'^'            reduce using rule 71
	'^='           reduce using rule 71
	'_'            reduce using rule 71
	'and'          reduce using rule 71
	'boolean'      reduce using rule 71
	'catch'        reduce using rule 71
	'character'    reduce using rule 71
	'const'        reduce using rule 71
	'do'           reduce using rule 71
	'else'         reduce using rule 71
	'end'          reduce using rule 71
	'float'        reduce using rule 71
	'for'          reduce using rule 71
	'function'     reduce using rule 71
	'if'           reduce using rule 71
	'integer'      reduce using rule 71
	'not'          reduce using rule 71
	'or'           reduce using rule 71
	'pointer'      reduce using rule 71
	'repeat'       reduce using rule 71
	'return'       reduce using rule 71
	'string'       reduce using rule 71
	'then'         reduce using rule 71
	'try'          reduce using rule 71
	'until'        reduce using rule 71
	'void'         reduce using rule 71
	'while'        reduce using rule 71
	'{'            reduce using rule 71
	'{}'           reduce using rule 71
	'|='           reduce using rule 71
	'}'            reduce using rule 71
	'~='           reduce using rule 71
	L_Pbool        reduce using rule 71
	L_Pident       reduce using rule 71
	L_Pint         reduce using rule 71
	L_Pstring      reduce using rule 71
	L_Preal        reduce using rule 71
	L_Pchar        reduce using rule 71
	%eof           reduce using rule 71


State 105

	ListExp -> Exp ',' . ListExp                        (rule 80)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	')'            reduce using rule 78
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	'}'            reduce using rule 78
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 90
	ListExp        goto state 153
	Lexp           goto state 13

State 106

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp '~=' Exp .                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 56
	'&'            reduce using rule 56
	'&='           reduce using rule 56
	'('            reduce using rule 56
	')'            reduce using rule 56
	'*'            shift, and enter state 77
	'*='           reduce using rule 56
	'+'            shift, and enter state 78
	'+='           reduce using rule 56
	','            reduce using rule 56
	'-'            shift, and enter state 79
	'-='           reduce using rule 56
	'/'            shift, and enter state 80
	'/='           reduce using rule 56
	'<'            fail
	'<='           fail
	'='            reduce using rule 56
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 86
	'^='           reduce using rule 56
	'_'            reduce using rule 56
	'and'          reduce using rule 56
	'boolean'      reduce using rule 56
	'catch'        reduce using rule 56
	'character'    reduce using rule 56
	'const'        reduce using rule 56
	'do'           reduce using rule 56
	'else'         reduce using rule 56
	'end'          reduce using rule 56
	'float'        reduce using rule 56
	'for'          reduce using rule 56
	'function'     reduce using rule 56
	'if'           reduce using rule 56
	'integer'      reduce using rule 56
	'not'          reduce using rule 56
	'or'           reduce using rule 56
	'pointer'      reduce using rule 56
	'repeat'       reduce using rule 56
	'return'       reduce using rule 56
	'string'       reduce using rule 56
	'then'         reduce using rule 56
	'try'          reduce using rule 56
	'until'        reduce using rule 56
	'void'         reduce using rule 56
	'while'        reduce using rule 56
	'{'            reduce using rule 56
	'{}'           reduce using rule 56
	'|='           reduce using rule 56
	'}'            reduce using rule 56
	'~='           fail
	L_Pbool        reduce using rule 56
	L_Pident       reduce using rule 56
	L_Pint         reduce using rule 56
	L_Pstring      reduce using rule 56
	L_Preal        reduce using rule 56
	L_Pchar        reduce using rule 56
	%eof           reduce using rule 56


State 107

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp 'or' Exp .                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 53
	'&'            reduce using rule 53
	'&='           reduce using rule 53
	'('            reduce using rule 53
	')'            reduce using rule 53
	'*'            shift, and enter state 77
	'*='           reduce using rule 53
	'+'            shift, and enter state 78
	'+='           reduce using rule 53
	','            reduce using rule 53
	'-'            shift, and enter state 79
	'-='           reduce using rule 53
	'/'            shift, and enter state 80
	'/='           reduce using rule 53
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'='            reduce using rule 53
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'^='           reduce using rule 53
	'_'            reduce using rule 53
	'and'          reduce using rule 53
	'boolean'      reduce using rule 53
	'catch'        reduce using rule 53
	'character'    reduce using rule 53
	'const'        reduce using rule 53
	'do'           reduce using rule 53
	'else'         reduce using rule 53
	'end'          reduce using rule 53
	'float'        reduce using rule 53
	'for'          reduce using rule 53
	'function'     reduce using rule 53
	'if'           reduce using rule 53
	'integer'      reduce using rule 53
	'not'          reduce using rule 53
	'or'           reduce using rule 53
	'pointer'      reduce using rule 53
	'repeat'       reduce using rule 53
	'return'       reduce using rule 53
	'string'       reduce using rule 53
	'then'         reduce using rule 53
	'try'          reduce using rule 53
	'until'        reduce using rule 53
	'void'         reduce using rule 53
	'while'        reduce using rule 53
	'{'            reduce using rule 53
	'{}'           reduce using rule 53
	'|='           reduce using rule 53
	'}'            reduce using rule 53
	'~='           shift, and enter state 89
	L_Pbool        reduce using rule 53
	L_Pident       reduce using rule 53
	L_Pint         reduce using rule 53
	L_Pstring      reduce using rule 53
	L_Preal        reduce using rule 53
	L_Pchar        reduce using rule 53
	%eof           reduce using rule 53


State 108

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp 'and' Exp .                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 54
	'&'            reduce using rule 54
	'&='           reduce using rule 54
	'('            reduce using rule 54
	')'            reduce using rule 54
	'*'            shift, and enter state 77
	'*='           reduce using rule 54
	'+'            shift, and enter state 78
	'+='           reduce using rule 54
	','            reduce using rule 54
	'-'            shift, and enter state 79
	'-='           reduce using rule 54
	'/'            shift, and enter state 80
	'/='           reduce using rule 54
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'='            reduce using rule 54
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'^='           reduce using rule 54
	'_'            reduce using rule 54
	'and'          reduce using rule 54
	'boolean'      reduce using rule 54
	'catch'        reduce using rule 54
	'character'    reduce using rule 54
	'const'        reduce using rule 54
	'do'           reduce using rule 54
	'else'         reduce using rule 54
	'end'          reduce using rule 54
	'float'        reduce using rule 54
	'for'          reduce using rule 54
	'function'     reduce using rule 54
	'if'           reduce using rule 54
	'integer'      reduce using rule 54
	'not'          reduce using rule 54
	'or'           reduce using rule 54
	'pointer'      reduce using rule 54
	'repeat'       reduce using rule 54
	'return'       reduce using rule 54
	'string'       reduce using rule 54
	'then'         reduce using rule 54
	'try'          reduce using rule 54
	'until'        reduce using rule 54
	'void'         reduce using rule 54
	'while'        reduce using rule 54
	'{'            reduce using rule 54
	'{}'           reduce using rule 54
	'|='           reduce using rule 54
	'}'            reduce using rule 54
	'~='           shift, and enter state 89
	L_Pbool        reduce using rule 54
	L_Pident       reduce using rule 54
	L_Pint         reduce using rule 54
	L_Pstring      reduce using rule 54
	L_Preal        reduce using rule 54
	L_Pchar        reduce using rule 54
	%eof           reduce using rule 54


State 109

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp '^' Exp .                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            reduce using rule 65
	'%='           reduce using rule 65
	'&'            reduce using rule 65
	'&='           reduce using rule 65
	'('            reduce using rule 65
	')'            reduce using rule 65
	'*'            reduce using rule 65
	'*='           reduce using rule 65
	'+'            reduce using rule 65
	'+='           reduce using rule 65
	','            reduce using rule 65
	'-'            reduce using rule 65
	'-='           reduce using rule 65
	'/'            reduce using rule 65
	'/='           reduce using rule 65
	'<'            reduce using rule 65
	'<='           reduce using rule 65
	'='            reduce using rule 65
	'=='           reduce using rule 65
	'>'            reduce using rule 65
	'>='           reduce using rule 65
	'^'            reduce using rule 65
	'^='           reduce using rule 65
	'_'            reduce using rule 65
	'and'          reduce using rule 65
	'boolean'      reduce using rule 65
	'catch'        reduce using rule 65
	'character'    reduce using rule 65
	'const'        reduce using rule 65
	'do'           reduce using rule 65
	'else'         reduce using rule 65
	'end'          reduce using rule 65
	'float'        reduce using rule 65
	'for'          reduce using rule 65
	'function'     reduce using rule 65
	'if'           reduce using rule 65
	'integer'      reduce using rule 65
	'not'          reduce using rule 65
	'or'           reduce using rule 65
	'pointer'      reduce using rule 65
	'repeat'       reduce using rule 65
	'return'       reduce using rule 65
	'string'       reduce using rule 65
	'then'         reduce using rule 65
	'try'          reduce using rule 65
	'until'        reduce using rule 65
	'void'         reduce using rule 65
	'while'        reduce using rule 65
	'{'            reduce using rule 65
	'{}'           reduce using rule 65
	'|='           reduce using rule 65
	'}'            reduce using rule 65
	'~='           reduce using rule 65
	L_Pbool        reduce using rule 65
	L_Pident       reduce using rule 65
	L_Pint         reduce using rule 65
	L_Pstring      reduce using rule 65
	L_Preal        reduce using rule 65
	L_Pchar        reduce using rule 65
	%eof           reduce using rule 65


State 110

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp '>=' Exp .                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 60
	'&'            reduce using rule 60
	'&='           reduce using rule 60
	'('            reduce using rule 60
	')'            reduce using rule 60
	'*'            shift, and enter state 77
	'*='           reduce using rule 60
	'+'            shift, and enter state 78
	'+='           reduce using rule 60
	','            reduce using rule 60
	'-'            shift, and enter state 79
	'-='           reduce using rule 60
	'/'            shift, and enter state 80
	'/='           reduce using rule 60
	'<'            fail
	'<='           fail
	'='            reduce using rule 60
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 86
	'^='           reduce using rule 60
	'_'            reduce using rule 60
	'and'          reduce using rule 60
	'boolean'      reduce using rule 60
	'catch'        reduce using rule 60
	'character'    reduce using rule 60
	'const'        reduce using rule 60
	'do'           reduce using rule 60
	'else'         reduce using rule 60
	'end'          reduce using rule 60
	'float'        reduce using rule 60
	'for'          reduce using rule 60
	'function'     reduce using rule 60
	'if'           reduce using rule 60
	'integer'      reduce using rule 60
	'not'          reduce using rule 60
	'or'           reduce using rule 60
	'pointer'      reduce using rule 60
	'repeat'       reduce using rule 60
	'return'       reduce using rule 60
	'string'       reduce using rule 60
	'then'         reduce using rule 60
	'try'          reduce using rule 60
	'until'        reduce using rule 60
	'void'         reduce using rule 60
	'while'        reduce using rule 60
	'{'            reduce using rule 60
	'{}'           reduce using rule 60
	'|='           reduce using rule 60
	'}'            reduce using rule 60
	'~='           fail
	L_Pbool        reduce using rule 60
	L_Pident       reduce using rule 60
	L_Pint         reduce using rule 60
	L_Pstring      reduce using rule 60
	L_Preal        reduce using rule 60
	L_Pchar        reduce using rule 60
	%eof           reduce using rule 60


State 111

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp '>' Exp .                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 58
	'&'            reduce using rule 58
	'&='           reduce using rule 58
	'('            reduce using rule 58
	')'            reduce using rule 58
	'*'            shift, and enter state 77
	'*='           reduce using rule 58
	'+'            shift, and enter state 78
	'+='           reduce using rule 58
	','            reduce using rule 58
	'-'            shift, and enter state 79
	'-='           reduce using rule 58
	'/'            shift, and enter state 80
	'/='           reduce using rule 58
	'<'            fail
	'<='           fail
	'='            reduce using rule 58
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 86
	'^='           reduce using rule 58
	'_'            reduce using rule 58
	'and'          reduce using rule 58
	'boolean'      reduce using rule 58
	'catch'        reduce using rule 58
	'character'    reduce using rule 58
	'const'        reduce using rule 58
	'do'           reduce using rule 58
	'else'         reduce using rule 58
	'end'          reduce using rule 58
	'float'        reduce using rule 58
	'for'          reduce using rule 58
	'function'     reduce using rule 58
	'if'           reduce using rule 58
	'integer'      reduce using rule 58
	'not'          reduce using rule 58
	'or'           reduce using rule 58
	'pointer'      reduce using rule 58
	'repeat'       reduce using rule 58
	'return'       reduce using rule 58
	'string'       reduce using rule 58
	'then'         reduce using rule 58
	'try'          reduce using rule 58
	'until'        reduce using rule 58
	'void'         reduce using rule 58
	'while'        reduce using rule 58
	'{'            reduce using rule 58
	'{}'           reduce using rule 58
	'|='           reduce using rule 58
	'}'            reduce using rule 58
	'~='           fail
	L_Pbool        reduce using rule 58
	L_Pident       reduce using rule 58
	L_Pint         reduce using rule 58
	L_Pstring      reduce using rule 58
	L_Preal        reduce using rule 58
	L_Pchar        reduce using rule 58
	%eof           reduce using rule 58


State 112

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp '==' Exp .                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 55
	'&'            reduce using rule 55
	'&='           reduce using rule 55
	'('            reduce using rule 55
	')'            reduce using rule 55
	'*'            shift, and enter state 77
	'*='           reduce using rule 55
	'+'            shift, and enter state 78
	'+='           reduce using rule 55
	','            reduce using rule 55
	'-'            shift, and enter state 79
	'-='           reduce using rule 55
	'/'            shift, and enter state 80
	'/='           reduce using rule 55
	'<'            fail
	'<='           fail
	'='            reduce using rule 55
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 86
	'^='           reduce using rule 55
	'_'            reduce using rule 55
	'and'          reduce using rule 55
	'boolean'      reduce using rule 55
	'catch'        reduce using rule 55
	'character'    reduce using rule 55
	'const'        reduce using rule 55
	'do'           reduce using rule 55
	'else'         reduce using rule 55
	'end'          reduce using rule 55
	'float'        reduce using rule 55
	'for'          reduce using rule 55
	'function'     reduce using rule 55
	'if'           reduce using rule 55
	'integer'      reduce using rule 55
	'not'          reduce using rule 55
	'or'           reduce using rule 55
	'pointer'      reduce using rule 55
	'repeat'       reduce using rule 55
	'return'       reduce using rule 55
	'string'       reduce using rule 55
	'then'         reduce using rule 55
	'try'          reduce using rule 55
	'until'        reduce using rule 55
	'void'         reduce using rule 55
	'while'        reduce using rule 55
	'{'            reduce using rule 55
	'{}'           reduce using rule 55
	'|='           reduce using rule 55
	'}'            reduce using rule 55
	'~='           fail
	L_Pbool        reduce using rule 55
	L_Pident       reduce using rule 55
	L_Pint         reduce using rule 55
	L_Pstring      reduce using rule 55
	L_Preal        reduce using rule 55
	L_Pchar        reduce using rule 55
	%eof           reduce using rule 55


State 113

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp '<=' Exp .                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 59
	'&'            reduce using rule 59
	'&='           reduce using rule 59
	'('            reduce using rule 59
	')'            reduce using rule 59
	'*'            shift, and enter state 77
	'*='           reduce using rule 59
	'+'            shift, and enter state 78
	'+='           reduce using rule 59
	','            reduce using rule 59
	'-'            shift, and enter state 79
	'-='           reduce using rule 59
	'/'            shift, and enter state 80
	'/='           reduce using rule 59
	'<'            fail
	'<='           fail
	'='            reduce using rule 59
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 86
	'^='           reduce using rule 59
	'_'            reduce using rule 59
	'and'          reduce using rule 59
	'boolean'      reduce using rule 59
	'catch'        reduce using rule 59
	'character'    reduce using rule 59
	'const'        reduce using rule 59
	'do'           reduce using rule 59
	'else'         reduce using rule 59
	'end'          reduce using rule 59
	'float'        reduce using rule 59
	'for'          reduce using rule 59
	'function'     reduce using rule 59
	'if'           reduce using rule 59
	'integer'      reduce using rule 59
	'not'          reduce using rule 59
	'or'           reduce using rule 59
	'pointer'      reduce using rule 59
	'repeat'       reduce using rule 59
	'return'       reduce using rule 59
	'string'       reduce using rule 59
	'then'         reduce using rule 59
	'try'          reduce using rule 59
	'until'        reduce using rule 59
	'void'         reduce using rule 59
	'while'        reduce using rule 59
	'{'            reduce using rule 59
	'{}'           reduce using rule 59
	'|='           reduce using rule 59
	'}'            reduce using rule 59
	'~='           fail
	L_Pbool        reduce using rule 59
	L_Pident       reduce using rule 59
	L_Pint         reduce using rule 59
	L_Pstring      reduce using rule 59
	L_Preal        reduce using rule 59
	L_Pchar        reduce using rule 59
	%eof           reduce using rule 59


State 114

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp '<' Exp .                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 57
	'&'            reduce using rule 57
	'&='           reduce using rule 57
	'('            reduce using rule 57
	')'            reduce using rule 57
	'*'            shift, and enter state 77
	'*='           reduce using rule 57
	'+'            shift, and enter state 78
	'+='           reduce using rule 57
	','            reduce using rule 57
	'-'            shift, and enter state 79
	'-='           reduce using rule 57
	'/'            shift, and enter state 80
	'/='           reduce using rule 57
	'<'            fail
	'<='           fail
	'='            reduce using rule 57
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 86
	'^='           reduce using rule 57
	'_'            reduce using rule 57
	'and'          reduce using rule 57
	'boolean'      reduce using rule 57
	'catch'        reduce using rule 57
	'character'    reduce using rule 57
	'const'        reduce using rule 57
	'do'           reduce using rule 57
	'else'         reduce using rule 57
	'end'          reduce using rule 57
	'float'        reduce using rule 57
	'for'          reduce using rule 57
	'function'     reduce using rule 57
	'if'           reduce using rule 57
	'integer'      reduce using rule 57
	'not'          reduce using rule 57
	'or'           reduce using rule 57
	'pointer'      reduce using rule 57
	'repeat'       reduce using rule 57
	'return'       reduce using rule 57
	'string'       reduce using rule 57
	'then'         reduce using rule 57
	'try'          reduce using rule 57
	'until'        reduce using rule 57
	'void'         reduce using rule 57
	'while'        reduce using rule 57
	'{'            reduce using rule 57
	'{}'           reduce using rule 57
	'|='           reduce using rule 57
	'}'            reduce using rule 57
	'~='           fail
	L_Pbool        reduce using rule 57
	L_Pident       reduce using rule 57
	L_Pint         reduce using rule 57
	L_Pstring      reduce using rule 57
	L_Preal        reduce using rule 57
	L_Pchar        reduce using rule 57
	%eof           reduce using rule 57


State 115

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp '/' Exp .                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            reduce using rule 64
	'%='           reduce using rule 64
	'&'            reduce using rule 64
	'&='           reduce using rule 64
	'('            reduce using rule 64
	')'            reduce using rule 64
	'*'            reduce using rule 64
	'*='           reduce using rule 64
	'+'            reduce using rule 64
	'+='           reduce using rule 64
	','            reduce using rule 64
	'-'            reduce using rule 64
	'-='           reduce using rule 64
	'/'            reduce using rule 64
	'/='           reduce using rule 64
	'<'            reduce using rule 64
	'<='           reduce using rule 64
	'='            reduce using rule 64
	'=='           reduce using rule 64
	'>'            reduce using rule 64
	'>='           reduce using rule 64
	'^'            shift, and enter state 86
	'^='           reduce using rule 64
	'_'            reduce using rule 64
	'and'          reduce using rule 64
	'boolean'      reduce using rule 64
	'catch'        reduce using rule 64
	'character'    reduce using rule 64
	'const'        reduce using rule 64
	'do'           reduce using rule 64
	'else'         reduce using rule 64
	'end'          reduce using rule 64
	'float'        reduce using rule 64
	'for'          reduce using rule 64
	'function'     reduce using rule 64
	'if'           reduce using rule 64
	'integer'      reduce using rule 64
	'not'          reduce using rule 64
	'or'           reduce using rule 64
	'pointer'      reduce using rule 64
	'repeat'       reduce using rule 64
	'return'       reduce using rule 64
	'string'       reduce using rule 64
	'then'         reduce using rule 64
	'try'          reduce using rule 64
	'until'        reduce using rule 64
	'void'         reduce using rule 64
	'while'        reduce using rule 64
	'{'            reduce using rule 64
	'{}'           reduce using rule 64
	'|='           reduce using rule 64
	'}'            reduce using rule 64
	'~='           reduce using rule 64
	L_Pbool        reduce using rule 64
	L_Pident       reduce using rule 64
	L_Pint         reduce using rule 64
	L_Pstring      reduce using rule 64
	L_Preal        reduce using rule 64
	L_Pchar        reduce using rule 64
	%eof           reduce using rule 64


State 116

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp '-' Exp .                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 62
	'&'            reduce using rule 62
	'&='           reduce using rule 62
	'('            reduce using rule 62
	')'            reduce using rule 62
	'*'            shift, and enter state 77
	'*='           reduce using rule 62
	'+'            reduce using rule 62
	'+='           reduce using rule 62
	','            reduce using rule 62
	'-'            reduce using rule 62
	'-='           reduce using rule 62
	'/'            shift, and enter state 80
	'/='           reduce using rule 62
	'<'            reduce using rule 62
	'<='           reduce using rule 62
	'='            reduce using rule 62
	'=='           reduce using rule 62
	'>'            reduce using rule 62
	'>='           reduce using rule 62
	'^'            shift, and enter state 86
	'^='           reduce using rule 62
	'_'            reduce using rule 62
	'and'          reduce using rule 62
	'boolean'      reduce using rule 62
	'catch'        reduce using rule 62
	'character'    reduce using rule 62
	'const'        reduce using rule 62
	'do'           reduce using rule 62
	'else'         reduce using rule 62
	'end'          reduce using rule 62
	'float'        reduce using rule 62
	'for'          reduce using rule 62
	'function'     reduce using rule 62
	'if'           reduce using rule 62
	'integer'      reduce using rule 62
	'not'          reduce using rule 62
	'or'           reduce using rule 62
	'pointer'      reduce using rule 62
	'repeat'       reduce using rule 62
	'return'       reduce using rule 62
	'string'       reduce using rule 62
	'then'         reduce using rule 62
	'try'          reduce using rule 62
	'until'        reduce using rule 62
	'void'         reduce using rule 62
	'while'        reduce using rule 62
	'{'            reduce using rule 62
	'{}'           reduce using rule 62
	'|='           reduce using rule 62
	'}'            reduce using rule 62
	'~='           reduce using rule 62
	L_Pbool        reduce using rule 62
	L_Pident       reduce using rule 62
	L_Pint         reduce using rule 62
	L_Pstring      reduce using rule 62
	L_Preal        reduce using rule 62
	L_Pchar        reduce using rule 62
	%eof           reduce using rule 62


State 117

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp '+' Exp .                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'%='           reduce using rule 61
	'&'            reduce using rule 61
	'&='           reduce using rule 61
	'('            reduce using rule 61
	')'            reduce using rule 61
	'*'            shift, and enter state 77
	'*='           reduce using rule 61
	'+'            reduce using rule 61
	'+='           reduce using rule 61
	','            reduce using rule 61
	'-'            reduce using rule 61
	'-='           reduce using rule 61
	'/'            shift, and enter state 80
	'/='           reduce using rule 61
	'<'            reduce using rule 61
	'<='           reduce using rule 61
	'='            reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	'^'            shift, and enter state 86
	'^='           reduce using rule 61
	'_'            reduce using rule 61
	'and'          reduce using rule 61
	'boolean'      reduce using rule 61
	'catch'        reduce using rule 61
	'character'    reduce using rule 61
	'const'        reduce using rule 61
	'do'           reduce using rule 61
	'else'         reduce using rule 61
	'end'          reduce using rule 61
	'float'        reduce using rule 61
	'for'          reduce using rule 61
	'function'     reduce using rule 61
	'if'           reduce using rule 61
	'integer'      reduce using rule 61
	'not'          reduce using rule 61
	'or'           reduce using rule 61
	'pointer'      reduce using rule 61
	'repeat'       reduce using rule 61
	'return'       reduce using rule 61
	'string'       reduce using rule 61
	'then'         reduce using rule 61
	'try'          reduce using rule 61
	'until'        reduce using rule 61
	'void'         reduce using rule 61
	'while'        reduce using rule 61
	'{'            reduce using rule 61
	'{}'           reduce using rule 61
	'|='           reduce using rule 61
	'}'            reduce using rule 61
	'~='           reduce using rule 61
	L_Pbool        reduce using rule 61
	L_Pident       reduce using rule 61
	L_Pint         reduce using rule 61
	L_Pstring      reduce using rule 61
	L_Preal        reduce using rule 61
	L_Pchar        reduce using rule 61
	%eof           reduce using rule 61


State 118

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp '*' Exp .                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            reduce using rule 63
	'%='           reduce using rule 63
	'&'            reduce using rule 63
	'&='           reduce using rule 63
	'('            reduce using rule 63
	')'            reduce using rule 63
	'*'            reduce using rule 63
	'*='           reduce using rule 63
	'+'            reduce using rule 63
	'+='           reduce using rule 63
	','            reduce using rule 63
	'-'            reduce using rule 63
	'-='           reduce using rule 63
	'/'            reduce using rule 63
	'/='           reduce using rule 63
	'<'            reduce using rule 63
	'<='           reduce using rule 63
	'='            reduce using rule 63
	'=='           reduce using rule 63
	'>'            reduce using rule 63
	'>='           reduce using rule 63
	'^'            shift, and enter state 86
	'^='           reduce using rule 63
	'_'            reduce using rule 63
	'and'          reduce using rule 63
	'boolean'      reduce using rule 63
	'catch'        reduce using rule 63
	'character'    reduce using rule 63
	'const'        reduce using rule 63
	'do'           reduce using rule 63
	'else'         reduce using rule 63
	'end'          reduce using rule 63
	'float'        reduce using rule 63
	'for'          reduce using rule 63
	'function'     reduce using rule 63
	'if'           reduce using rule 63
	'integer'      reduce using rule 63
	'not'          reduce using rule 63
	'or'           reduce using rule 63
	'pointer'      reduce using rule 63
	'repeat'       reduce using rule 63
	'return'       reduce using rule 63
	'string'       reduce using rule 63
	'then'         reduce using rule 63
	'try'          reduce using rule 63
	'until'        reduce using rule 63
	'void'         reduce using rule 63
	'while'        reduce using rule 63
	'{'            reduce using rule 63
	'{}'           reduce using rule 63
	'|='           reduce using rule 63
	'}'            reduce using rule 63
	'~='           reduce using rule 63
	L_Pbool        reduce using rule 63
	L_Pident       reduce using rule 63
	L_Pint         reduce using rule 63
	L_Pstring      reduce using rule 63
	L_Preal        reduce using rule 63
	L_Pchar        reduce using rule 63
	%eof           reduce using rule 63


State 119

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	Exp -> Exp '%' Exp .                                (rule 66)

	'%'            reduce using rule 66
	'%='           reduce using rule 66
	'&'            reduce using rule 66
	'&='           reduce using rule 66
	'('            reduce using rule 66
	')'            reduce using rule 66
	'*'            reduce using rule 66
	'*='           reduce using rule 66
	'+'            reduce using rule 66
	'+='           reduce using rule 66
	','            reduce using rule 66
	'-'            reduce using rule 66
	'-='           reduce using rule 66
	'/'            reduce using rule 66
	'/='           reduce using rule 66
	'<'            reduce using rule 66
	'<='           reduce using rule 66
	'='            reduce using rule 66
	'=='           reduce using rule 66
	'>'            reduce using rule 66
	'>='           reduce using rule 66
	'^'            shift, and enter state 86
	'^='           reduce using rule 66
	'_'            reduce using rule 66
	'and'          reduce using rule 66
	'boolean'      reduce using rule 66
	'catch'        reduce using rule 66
	'character'    reduce using rule 66
	'const'        reduce using rule 66
	'do'           reduce using rule 66
	'else'         reduce using rule 66
	'end'          reduce using rule 66
	'float'        reduce using rule 66
	'for'          reduce using rule 66
	'function'     reduce using rule 66
	'if'           reduce using rule 66
	'integer'      reduce using rule 66
	'not'          reduce using rule 66
	'or'           reduce using rule 66
	'pointer'      reduce using rule 66
	'repeat'       reduce using rule 66
	'return'       reduce using rule 66
	'string'       reduce using rule 66
	'then'         reduce using rule 66
	'try'          reduce using rule 66
	'until'        reduce using rule 66
	'void'         reduce using rule 66
	'while'        reduce using rule 66
	'{'            reduce using rule 66
	'{}'           reduce using rule 66
	'|='           reduce using rule 66
	'}'            reduce using rule 66
	'~='           reduce using rule 66
	L_Pbool        reduce using rule 66
	L_Pident       reduce using rule 66
	L_Pint         reduce using rule 66
	L_Pstring      reduce using rule 66
	L_Preal        reduce using rule 66
	L_Pchar        reduce using rule 66
	%eof           reduce using rule 66


State 120

	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	Lexp -> Lexp '{' Exp . '}'                          (rule 84)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'}'            shift, and enter state 152
	'~='           shift, and enter state 89


State 121

	Stm -> Lexp Assignment_Op Exp .                     (rule 38)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'&'            reduce using rule 38
	'('            reduce using rule 38
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'_'            reduce using rule 38
	'and'          shift, and enter state 87
	'boolean'      reduce using rule 38
	'catch'        reduce using rule 38
	'character'    reduce using rule 38
	'const'        reduce using rule 38
	'else'         reduce using rule 38
	'end'          reduce using rule 38
	'float'        reduce using rule 38
	'for'          reduce using rule 38
	'function'     reduce using rule 38
	'if'           reduce using rule 38
	'integer'      reduce using rule 38
	'not'          reduce using rule 38
	'or'           shift, and enter state 88
	'pointer'      reduce using rule 38
	'repeat'       reduce using rule 38
	'return'       reduce using rule 38
	'string'       reduce using rule 38
	'try'          reduce using rule 38
	'until'        reduce using rule 38
	'void'         reduce using rule 38
	'while'        reduce using rule 38
	'{'            reduce using rule 38
	'{}'           reduce using rule 38
	'~='           shift, and enter state 89
	L_Pbool        reduce using rule 38
	L_Pident       reduce using rule 38
	L_Pint         reduce using rule 38
	L_Pstring      reduce using rule 38
	L_Preal        reduce using rule 38
	L_Pchar        reduce using rule 38
	%eof           reduce using rule 38


State 122

	Stm -> 'for' Pident '=' . Exp ',' Exp ',' Exp 'do' ListDecStm 'end'    (rule 45)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 151
	Lexp           goto state 13

State 123

	Stm -> 'if' Exp 'then' . ListDecStm 'end'           (rule 41)
	Stm -> 'if' Exp 'then' . ListDecStm 'else' ListDecStm 'end'    (rule 42)
	Exp -> 'if' Exp 'then' . ListDecStm 'else' ListDecStm 'end'    (rule 67)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'else'         reduce using rule 49
	'end'          reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 150

State 124

	DecStm -> Dec .                                     (rule 47)

	'&'            reduce using rule 47
	'('            reduce using rule 47
	'-'            reduce using rule 47
	'_'            reduce using rule 47
	'boolean'      reduce using rule 47
	'catch'        reduce using rule 47
	'character'    reduce using rule 47
	'const'        reduce using rule 47
	'else'         reduce using rule 47
	'end'          reduce using rule 47
	'float'        reduce using rule 47
	'for'          reduce using rule 47
	'function'     reduce using rule 47
	'if'           reduce using rule 47
	'integer'      reduce using rule 47
	'not'          reduce using rule 47
	'pointer'      reduce using rule 47
	'repeat'       reduce using rule 47
	'return'       reduce using rule 47
	'string'       reduce using rule 47
	'try'          reduce using rule 47
	'until'        reduce using rule 47
	'void'         reduce using rule 47
	'while'        reduce using rule 47
	'{'            reduce using rule 47
	'{}'           reduce using rule 47
	L_Pbool        reduce using rule 47
	L_Pident       reduce using rule 47
	L_Pint         reduce using rule 47
	L_Pstring      reduce using rule 47
	L_Preal        reduce using rule 47
	L_Pchar        reduce using rule 47


State 125

	DecStm -> Stm .                                     (rule 48)

	'&'            reduce using rule 48
	'('            reduce using rule 48
	'-'            reduce using rule 48
	'_'            reduce using rule 48
	'boolean'      reduce using rule 48
	'catch'        reduce using rule 48
	'character'    reduce using rule 48
	'const'        reduce using rule 48
	'else'         reduce using rule 48
	'end'          reduce using rule 48
	'float'        reduce using rule 48
	'for'          reduce using rule 48
	'function'     reduce using rule 48
	'if'           reduce using rule 48
	'integer'      reduce using rule 48
	'not'          reduce using rule 48
	'pointer'      reduce using rule 48
	'repeat'       reduce using rule 48
	'return'       reduce using rule 48
	'string'       reduce using rule 48
	'try'          reduce using rule 48
	'until'        reduce using rule 48
	'void'         reduce using rule 48
	'while'        reduce using rule 48
	'{'            reduce using rule 48
	'{}'           reduce using rule 48
	L_Pbool        reduce using rule 48
	L_Pident       reduce using rule 48
	L_Pint         reduce using rule 48
	L_Pstring      reduce using rule 48
	L_Preal        reduce using rule 48
	L_Pchar        reduce using rule 48


State 126

	ListDecStm -> ListDecStm DecStm .                   (rule 50)

	'&'            reduce using rule 50
	'('            reduce using rule 50
	'-'            reduce using rule 50
	'_'            reduce using rule 50
	'boolean'      reduce using rule 50
	'catch'        reduce using rule 50
	'character'    reduce using rule 50
	'const'        reduce using rule 50
	'else'         reduce using rule 50
	'end'          reduce using rule 50
	'float'        reduce using rule 50
	'for'          reduce using rule 50
	'function'     reduce using rule 50
	'if'           reduce using rule 50
	'integer'      reduce using rule 50
	'not'          reduce using rule 50
	'pointer'      reduce using rule 50
	'repeat'       reduce using rule 50
	'return'       reduce using rule 50
	'string'       reduce using rule 50
	'try'          reduce using rule 50
	'until'        reduce using rule 50
	'void'         reduce using rule 50
	'while'        reduce using rule 50
	'{'            reduce using rule 50
	'{}'           reduce using rule 50
	L_Pbool        reduce using rule 50
	L_Pident       reduce using rule 50
	L_Pint         reduce using rule 50
	L_Pstring      reduce using rule 50
	L_Preal        reduce using rule 50
	L_Pchar        reduce using rule 50


State 127

	Stm -> 'repeat' ListDecStm 'until' . Exp            (rule 44)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 149
	Lexp           goto state 13

State 128

	Type_specifier -> '{' . Exp '}' Type_specifier      (rule 29)
	Exp -> '{' . ListExp '}'                            (rule 71)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	'}'            reduce using rule 78
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 148
	ListExp        goto state 91
	Lexp           goto state 13

State 129

	Stm -> 'try' ListDecStm 'catch' . ListDecStm 'end'    (rule 46)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'end'          reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 147

State 130

	Stm -> 'while' Exp 'do' . ListDecStm 'end'          (rule 43)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'end'          reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 146

State 131

	Dec -> Type_specifier Pident '=' . Exp              (rule 19)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 145
	Lexp           goto state 13

State 132

	Dec -> 'const' Type_specifier Pident .              (rule 18)
	Dec -> 'const' Type_specifier Pident . '=' Exp      (rule 20)

	'&'            reduce using rule 18
	'('            reduce using rule 18
	'-'            reduce using rule 18
	'='            shift, and enter state 144
	'_'            reduce using rule 18
	'boolean'      reduce using rule 18
	'catch'        reduce using rule 18
	'character'    reduce using rule 18
	'const'        reduce using rule 18
	'else'         reduce using rule 18
	'end'          reduce using rule 18
	'float'        reduce using rule 18
	'for'          reduce using rule 18
	'function'     reduce using rule 18
	'if'           reduce using rule 18
	'integer'      reduce using rule 18
	'not'          reduce using rule 18
	'pointer'      reduce using rule 18
	'repeat'       reduce using rule 18
	'return'       reduce using rule 18
	'string'       reduce using rule 18
	'try'          reduce using rule 18
	'until'        reduce using rule 18
	'void'         reduce using rule 18
	'while'        reduce using rule 18
	'{'            reduce using rule 18
	'{}'           reduce using rule 18
	L_Pbool        reduce using rule 18
	L_Pident       reduce using rule 18
	L_Pint         reduce using rule 18
	L_Pstring      reduce using rule 18
	L_Preal        reduce using rule 18
	L_Pchar        reduce using rule 18
	%eof           reduce using rule 18


State 133

	Dec -> 'function' Type_specifier Pident . '(' ListArgument ')' ListDecStm 'end'    (rule 15)

	'('            shift, and enter state 143


State 134

	Dec -> 'function' Pident '(' . ListArgument ')' ListDecStm 'end'    (rule 16)

	')'            reduce using rule 31
	'boolean'      reduce using rule 34
	'character'    reduce using rule 34
	'const'        shift, and enter state 140
	'float'        reduce using rule 34
	'integer'      reduce using rule 34
	'pointer'      reduce using rule 34
	'ref'          shift, and enter state 141
	'string'       reduce using rule 34
	'val'          shift, and enter state 142
	'void'         reduce using rule 34
	'{'            reduce using rule 34
	'{}'           reduce using rule 34

	Argument       goto state 137
	ListArgument   goto state 138
	Modality       goto state 139

State 135

	Type_specifier -> '{' Exp '}' . Type_specifier      (rule 29)

	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'float'        shift, and enter state 41
	'integer'      shift, and enter state 43
	'pointer'      shift, and enter state 44
	'string'       shift, and enter state 45
	'void'         shift, and enter state 46
	'{'            shift, and enter state 47
	'{}'           shift, and enter state 48

	Type_specifier goto state 136

State 136

	Type_specifier -> '{' Exp '}' Type_specifier .      (rule 29)

	L_Pident       reduce using rule 29


State 137

	ListArgument -> Argument .                          (rule 32)
	ListArgument -> Argument . ',' ListArgument         (rule 33)

	')'            reduce using rule 32
	','            shift, and enter state 166


State 138

	Dec -> 'function' Pident '(' ListArgument . ')' ListDecStm 'end'    (rule 16)

	')'            shift, and enter state 165


State 139

	Argument -> Modality . Type_specifier Pident        (rule 30)

	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'float'        shift, and enter state 41
	'integer'      shift, and enter state 43
	'pointer'      shift, and enter state 44
	'string'       shift, and enter state 45
	'void'         shift, and enter state 46
	'{'            shift, and enter state 47
	'{}'           shift, and enter state 48

	Type_specifier goto state 164

State 140

	Modality -> 'const' .                               (rule 36)

	'boolean'      reduce using rule 36
	'character'    reduce using rule 36
	'float'        reduce using rule 36
	'integer'      reduce using rule 36
	'pointer'      reduce using rule 36
	'string'       reduce using rule 36
	'void'         reduce using rule 36
	'{'            reduce using rule 36
	'{}'           reduce using rule 36


State 141

	Modality -> 'ref' .                                 (rule 37)

	'boolean'      reduce using rule 37
	'character'    reduce using rule 37
	'float'        reduce using rule 37
	'integer'      reduce using rule 37
	'pointer'      reduce using rule 37
	'string'       reduce using rule 37
	'void'         reduce using rule 37
	'{'            reduce using rule 37
	'{}'           reduce using rule 37


State 142

	Modality -> 'val' .                                 (rule 35)

	'boolean'      reduce using rule 35
	'character'    reduce using rule 35
	'float'        reduce using rule 35
	'integer'      reduce using rule 35
	'pointer'      reduce using rule 35
	'string'       reduce using rule 35
	'void'         reduce using rule 35
	'{'            reduce using rule 35
	'{}'           reduce using rule 35


State 143

	Dec -> 'function' Type_specifier Pident '(' . ListArgument ')' ListDecStm 'end'    (rule 15)

	')'            reduce using rule 31
	'boolean'      reduce using rule 34
	'character'    reduce using rule 34
	'const'        shift, and enter state 140
	'float'        reduce using rule 34
	'integer'      reduce using rule 34
	'pointer'      reduce using rule 34
	'ref'          shift, and enter state 141
	'string'       reduce using rule 34
	'val'          shift, and enter state 142
	'void'         reduce using rule 34
	'{'            reduce using rule 34
	'{}'           reduce using rule 34

	Argument       goto state 137
	ListArgument   goto state 163
	Modality       goto state 139

State 144

	Dec -> 'const' Type_specifier Pident '=' . Exp      (rule 20)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 162
	Lexp           goto state 13

State 145

	Dec -> Type_specifier Pident '=' Exp .              (rule 19)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'&'            reduce using rule 19
	'('            reduce using rule 19
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'_'            reduce using rule 19
	'and'          shift, and enter state 87
	'boolean'      reduce using rule 19
	'catch'        reduce using rule 19
	'character'    reduce using rule 19
	'const'        reduce using rule 19
	'else'         reduce using rule 19
	'end'          reduce using rule 19
	'float'        reduce using rule 19
	'for'          reduce using rule 19
	'function'     reduce using rule 19
	'if'           reduce using rule 19
	'integer'      reduce using rule 19
	'not'          reduce using rule 19
	'or'           shift, and enter state 88
	'pointer'      reduce using rule 19
	'repeat'       reduce using rule 19
	'return'       reduce using rule 19
	'string'       reduce using rule 19
	'try'          reduce using rule 19
	'until'        reduce using rule 19
	'void'         reduce using rule 19
	'while'        reduce using rule 19
	'{'            reduce using rule 19
	'{}'           reduce using rule 19
	'~='           shift, and enter state 89
	L_Pbool        reduce using rule 19
	L_Pident       reduce using rule 19
	L_Pint         reduce using rule 19
	L_Pstring      reduce using rule 19
	L_Preal        reduce using rule 19
	L_Pchar        reduce using rule 19
	%eof           reduce using rule 19


State 146

	Stm -> 'while' Exp 'do' ListDecStm . 'end'          (rule 43)
	ListDecStm -> ListDecStm . DecStm                   (rule 50)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'end'          shift, and enter state 161
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 147

	Stm -> 'try' ListDecStm 'catch' ListDecStm . 'end'    (rule 46)
	ListDecStm -> ListDecStm . DecStm                   (rule 50)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'end'          shift, and enter state 160
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 148

	Type_specifier -> '{' Exp . '}' Type_specifier      (rule 29)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)
	ListExp -> Exp .                                    (rule 79)
	ListExp -> Exp . ',' ListExp                        (rule 80)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	','            shift, and enter state 105
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'}'            shift, and enter state 135
			(reduce using rule 79)

	'~='           shift, and enter state 89


State 149

	Stm -> 'repeat' ListDecStm 'until' Exp .            (rule 44)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'&'            reduce using rule 44
	'('            reduce using rule 44
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            reduce using rule 44
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'_'            reduce using rule 44
	'and'          shift, and enter state 87
	'boolean'      reduce using rule 44
	'catch'        reduce using rule 44
	'character'    reduce using rule 44
	'const'        reduce using rule 44
	'else'         reduce using rule 44
	'end'          reduce using rule 44
	'float'        reduce using rule 44
	'for'          reduce using rule 44
	'function'     reduce using rule 44
	'if'           reduce using rule 44
	'integer'      reduce using rule 44
	'not'          reduce using rule 44
	'or'           shift, and enter state 88
	'pointer'      reduce using rule 44
	'repeat'       reduce using rule 44
	'return'       reduce using rule 44
	'string'       reduce using rule 44
	'try'          reduce using rule 44
	'until'        reduce using rule 44
	'void'         reduce using rule 44
	'while'        reduce using rule 44
	'{'            reduce using rule 44
	'{}'           reduce using rule 44
	'~='           shift, and enter state 89
	L_Pbool        reduce using rule 44
	L_Pident       reduce using rule 44
	L_Pint         reduce using rule 44
	L_Pstring      reduce using rule 44
	L_Preal        reduce using rule 44
	L_Pchar        reduce using rule 44
	%eof           reduce using rule 44


State 150

	Stm -> 'if' Exp 'then' ListDecStm . 'end'           (rule 41)
	Stm -> 'if' Exp 'then' ListDecStm . 'else' ListDecStm 'end'    (rule 42)
	ListDecStm -> ListDecStm . DecStm                   (rule 50)
	Exp -> 'if' Exp 'then' ListDecStm . 'else' ListDecStm 'end'    (rule 67)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'else'         shift, and enter state 158
	'end'          shift, and enter state 159
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 151

	Stm -> 'for' Pident '=' Exp . ',' Exp ',' Exp 'do' ListDecStm 'end'    (rule 45)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	','            shift, and enter state 157
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'~='           shift, and enter state 89


State 152

	Lexp -> Lexp '{' Exp '}' .                          (rule 84)

	'%'            reduce using rule 84
	'%='           reduce using rule 84
	'&'            reduce using rule 84
	'&='           reduce using rule 84
	'('            reduce using rule 84
	')'            reduce using rule 84
	'*'            reduce using rule 84
	'*='           reduce using rule 84
	'+'            reduce using rule 84
	'+='           reduce using rule 84
	','            reduce using rule 84
	'-'            reduce using rule 84
	'-='           reduce using rule 84
	'/'            reduce using rule 84
	'/='           reduce using rule 84
	'<'            reduce using rule 84
	'<='           reduce using rule 84
	'='            reduce using rule 84
	'=='           reduce using rule 84
	'>'            reduce using rule 84
	'>='           reduce using rule 84
	'^'            reduce using rule 84
	'^='           reduce using rule 84
	'_'            reduce using rule 84
	'and'          reduce using rule 84
	'boolean'      reduce using rule 84
	'catch'        reduce using rule 84
	'character'    reduce using rule 84
	'const'        reduce using rule 84
	'do'           reduce using rule 84
	'else'         reduce using rule 84
	'end'          reduce using rule 84
	'float'        reduce using rule 84
	'for'          reduce using rule 84
	'function'     reduce using rule 84
	'if'           reduce using rule 84
	'integer'      reduce using rule 84
	'not'          reduce using rule 84
	'or'           reduce using rule 84
	'pointer'      reduce using rule 84
	'repeat'       reduce using rule 84
	'return'       reduce using rule 84
	'string'       reduce using rule 84
	'then'         reduce using rule 84
	'try'          reduce using rule 84
	'until'        reduce using rule 84
	'void'         reduce using rule 84
	'while'        reduce using rule 84
	'{'            reduce using rule 84
	'{}'           reduce using rule 84
	'|='           reduce using rule 84
	'}'            reduce using rule 84
	'~='           reduce using rule 84
	L_Pbool        reduce using rule 84
	L_Pident       reduce using rule 84
	L_Pint         reduce using rule 84
	L_Pstring      reduce using rule 84
	L_Preal        reduce using rule 84
	L_Pchar        reduce using rule 84
	%eof           reduce using rule 84


State 153

	ListExp -> Exp ',' ListExp .                        (rule 80)

	')'            reduce using rule 80
	'}'            reduce using rule 80


State 154

	ListDecStm -> ListDecStm . DecStm                   (rule 50)
	Exp -> 'if' Exp 'then' ListDecStm . 'else' ListDecStm 'end'    (rule 67)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'else'         shift, and enter state 156
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 155

	Exp -> Pident '(' ListExp ')' .                     (rule 51)

	'%'            reduce using rule 51
	'%='           reduce using rule 51
	'&'            reduce using rule 51
	'&='           reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'*'            reduce using rule 51
	'*='           reduce using rule 51
	'+'            reduce using rule 51
	'+='           reduce using rule 51
	','            reduce using rule 51
	'-'            reduce using rule 51
	'-='           reduce using rule 51
	'/'            reduce using rule 51
	'/='           reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'='            reduce using rule 51
	'=='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	'^'            reduce using rule 51
	'^='           reduce using rule 51
	'_'            reduce using rule 51
	'and'          reduce using rule 51
	'boolean'      reduce using rule 51
	'catch'        reduce using rule 51
	'character'    reduce using rule 51
	'const'        reduce using rule 51
	'do'           reduce using rule 51
	'else'         reduce using rule 51
	'end'          reduce using rule 51
	'float'        reduce using rule 51
	'for'          reduce using rule 51
	'function'     reduce using rule 51
	'if'           reduce using rule 51
	'integer'      reduce using rule 51
	'not'          reduce using rule 51
	'or'           reduce using rule 51
	'pointer'      reduce using rule 51
	'repeat'       reduce using rule 51
	'return'       reduce using rule 51
	'string'       reduce using rule 51
	'then'         reduce using rule 51
	'try'          reduce using rule 51
	'until'        reduce using rule 51
	'void'         reduce using rule 51
	'while'        reduce using rule 51
	'{'            reduce using rule 51
	'{}'           reduce using rule 51
	'|='           reduce using rule 51
	'}'            reduce using rule 51
	'~='           reduce using rule 51
	L_Pbool        reduce using rule 51
	L_Pident       reduce using rule 51
	L_Pint         reduce using rule 51
	L_Pstring      reduce using rule 51
	L_Preal        reduce using rule 51
	L_Pchar        reduce using rule 51
	%eof           reduce using rule 51


State 156

	Exp -> 'if' Exp 'then' ListDecStm 'else' . ListDecStm 'end'    (rule 67)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'end'          reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 173

State 157

	Stm -> 'for' Pident '=' Exp ',' . Exp ',' Exp 'do' ListDecStm 'end'    (rule 45)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 172
	Lexp           goto state 13

State 158

	Stm -> 'if' Exp 'then' ListDecStm 'else' . ListDecStm 'end'    (rule 42)
	Exp -> 'if' Exp 'then' ListDecStm 'else' . ListDecStm 'end'    (rule 67)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'end'          reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 171

State 159

	Stm -> 'if' Exp 'then' ListDecStm 'end' .           (rule 41)

	'&'            reduce using rule 41
	'('            reduce using rule 41
	'-'            reduce using rule 41
	'_'            reduce using rule 41
	'boolean'      reduce using rule 41
	'catch'        reduce using rule 41
	'character'    reduce using rule 41
	'const'        reduce using rule 41
	'else'         reduce using rule 41
	'end'          reduce using rule 41
	'float'        reduce using rule 41
	'for'          reduce using rule 41
	'function'     reduce using rule 41
	'if'           reduce using rule 41
	'integer'      reduce using rule 41
	'not'          reduce using rule 41
	'pointer'      reduce using rule 41
	'repeat'       reduce using rule 41
	'return'       reduce using rule 41
	'string'       reduce using rule 41
	'try'          reduce using rule 41
	'until'        reduce using rule 41
	'void'         reduce using rule 41
	'while'        reduce using rule 41
	'{'            reduce using rule 41
	'{}'           reduce using rule 41
	L_Pbool        reduce using rule 41
	L_Pident       reduce using rule 41
	L_Pint         reduce using rule 41
	L_Pstring      reduce using rule 41
	L_Preal        reduce using rule 41
	L_Pchar        reduce using rule 41
	%eof           reduce using rule 41


State 160

	Stm -> 'try' ListDecStm 'catch' ListDecStm 'end' .    (rule 46)

	'&'            reduce using rule 46
	'('            reduce using rule 46
	'-'            reduce using rule 46
	'_'            reduce using rule 46
	'boolean'      reduce using rule 46
	'catch'        reduce using rule 46
	'character'    reduce using rule 46
	'const'        reduce using rule 46
	'else'         reduce using rule 46
	'end'          reduce using rule 46
	'float'        reduce using rule 46
	'for'          reduce using rule 46
	'function'     reduce using rule 46
	'if'           reduce using rule 46
	'integer'      reduce using rule 46
	'not'          reduce using rule 46
	'pointer'      reduce using rule 46
	'repeat'       reduce using rule 46
	'return'       reduce using rule 46
	'string'       reduce using rule 46
	'try'          reduce using rule 46
	'until'        reduce using rule 46
	'void'         reduce using rule 46
	'while'        reduce using rule 46
	'{'            reduce using rule 46
	'{}'           reduce using rule 46
	L_Pbool        reduce using rule 46
	L_Pident       reduce using rule 46
	L_Pint         reduce using rule 46
	L_Pstring      reduce using rule 46
	L_Preal        reduce using rule 46
	L_Pchar        reduce using rule 46
	%eof           reduce using rule 46


State 161

	Stm -> 'while' Exp 'do' ListDecStm 'end' .          (rule 43)

	'&'            reduce using rule 43
	'('            reduce using rule 43
	'-'            reduce using rule 43
	'_'            reduce using rule 43
	'boolean'      reduce using rule 43
	'catch'        reduce using rule 43
	'character'    reduce using rule 43
	'const'        reduce using rule 43
	'else'         reduce using rule 43
	'end'          reduce using rule 43
	'float'        reduce using rule 43
	'for'          reduce using rule 43
	'function'     reduce using rule 43
	'if'           reduce using rule 43
	'integer'      reduce using rule 43
	'not'          reduce using rule 43
	'pointer'      reduce using rule 43
	'repeat'       reduce using rule 43
	'return'       reduce using rule 43
	'string'       reduce using rule 43
	'try'          reduce using rule 43
	'until'        reduce using rule 43
	'void'         reduce using rule 43
	'while'        reduce using rule 43
	'{'            reduce using rule 43
	'{}'           reduce using rule 43
	L_Pbool        reduce using rule 43
	L_Pident       reduce using rule 43
	L_Pint         reduce using rule 43
	L_Pstring      reduce using rule 43
	L_Preal        reduce using rule 43
	L_Pchar        reduce using rule 43
	%eof           reduce using rule 43


State 162

	Dec -> 'const' Type_specifier Pident '=' Exp .      (rule 20)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'&'            reduce using rule 20
	'('            reduce using rule 20
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'_'            reduce using rule 20
	'and'          shift, and enter state 87
	'boolean'      reduce using rule 20
	'catch'        reduce using rule 20
	'character'    reduce using rule 20
	'const'        reduce using rule 20
	'else'         reduce using rule 20
	'end'          reduce using rule 20
	'float'        reduce using rule 20
	'for'          reduce using rule 20
	'function'     reduce using rule 20
	'if'           reduce using rule 20
	'integer'      reduce using rule 20
	'not'          reduce using rule 20
	'or'           shift, and enter state 88
	'pointer'      reduce using rule 20
	'repeat'       reduce using rule 20
	'return'       reduce using rule 20
	'string'       reduce using rule 20
	'try'          reduce using rule 20
	'until'        reduce using rule 20
	'void'         reduce using rule 20
	'while'        reduce using rule 20
	'{'            reduce using rule 20
	'{}'           reduce using rule 20
	'~='           shift, and enter state 89
	L_Pbool        reduce using rule 20
	L_Pident       reduce using rule 20
	L_Pint         reduce using rule 20
	L_Pstring      reduce using rule 20
	L_Preal        reduce using rule 20
	L_Pchar        reduce using rule 20
	%eof           reduce using rule 20


State 163

	Dec -> 'function' Type_specifier Pident '(' ListArgument . ')' ListDecStm 'end'    (rule 15)

	')'            shift, and enter state 170


State 164

	Argument -> Modality Type_specifier . Pident        (rule 30)

	L_Pident       shift, and enter state 22

	Pident         goto state 169

State 165

	Dec -> 'function' Pident '(' ListArgument ')' . ListDecStm 'end'    (rule 16)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'end'          reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 168

State 166

	ListArgument -> Argument ',' . ListArgument         (rule 33)

	')'            reduce using rule 31
	'boolean'      reduce using rule 34
	'character'    reduce using rule 34
	'const'        shift, and enter state 140
	'float'        reduce using rule 34
	'integer'      reduce using rule 34
	'pointer'      reduce using rule 34
	'ref'          shift, and enter state 141
	'string'       reduce using rule 34
	'val'          shift, and enter state 142
	'void'         reduce using rule 34
	'{'            reduce using rule 34
	'{}'           reduce using rule 34

	Argument       goto state 137
	ListArgument   goto state 167
	Modality       goto state 139

State 167

	ListArgument -> Argument ',' ListArgument .         (rule 33)

	')'            reduce using rule 33


State 168

	Dec -> 'function' Pident '(' ListArgument ')' ListDecStm . 'end'    (rule 16)
	ListDecStm -> ListDecStm . DecStm                   (rule 50)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'end'          shift, and enter state 178
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 169

	Argument -> Modality Type_specifier Pident .        (rule 30)

	')'            reduce using rule 30
	','            reduce using rule 30


State 170

	Dec -> 'function' Type_specifier Pident '(' ListArgument ')' . ListDecStm 'end'    (rule 15)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'end'          reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 177

State 171

	Stm -> 'if' Exp 'then' ListDecStm 'else' ListDecStm . 'end'    (rule 42)
	ListDecStm -> ListDecStm . DecStm                   (rule 50)
	Exp -> 'if' Exp 'then' ListDecStm 'else' ListDecStm . 'end'    (rule 67)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'end'          shift, and enter state 176
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 172

	Stm -> 'for' Pident '=' Exp ',' Exp . ',' Exp 'do' ListDecStm 'end'    (rule 45)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	','            shift, and enter state 175
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'or'           shift, and enter state 88
	'~='           shift, and enter state 89


State 173

	ListDecStm -> ListDecStm . DecStm                   (rule 50)
	Exp -> 'if' Exp 'then' ListDecStm 'else' ListDecStm . 'end'    (rule 67)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'end'          shift, and enter state 174
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 174

	Exp -> 'if' Exp 'then' ListDecStm 'else' ListDecStm 'end' .    (rule 67)

	'%'            reduce using rule 67
	'%='           reduce using rule 67
	'&'            reduce using rule 67
	'&='           reduce using rule 67
	'('            reduce using rule 67
	')'            reduce using rule 67
	'*'            reduce using rule 67
	'*='           reduce using rule 67
	'+'            reduce using rule 67
	'+='           reduce using rule 67
	','            reduce using rule 67
	'-'            reduce using rule 67
	'-='           reduce using rule 67
	'/'            reduce using rule 67
	'/='           reduce using rule 67
	'<'            reduce using rule 67
	'<='           reduce using rule 67
	'='            reduce using rule 67
	'=='           reduce using rule 67
	'>'            reduce using rule 67
	'>='           reduce using rule 67
	'^'            reduce using rule 67
	'^='           reduce using rule 67
	'_'            reduce using rule 67
	'and'          reduce using rule 67
	'boolean'      reduce using rule 67
	'catch'        reduce using rule 67
	'character'    reduce using rule 67
	'const'        reduce using rule 67
	'do'           reduce using rule 67
	'else'         reduce using rule 67
	'end'          reduce using rule 67
	'float'        reduce using rule 67
	'for'          reduce using rule 67
	'function'     reduce using rule 67
	'if'           reduce using rule 67
	'integer'      reduce using rule 67
	'not'          reduce using rule 67
	'or'           reduce using rule 67
	'pointer'      reduce using rule 67
	'repeat'       reduce using rule 67
	'return'       reduce using rule 67
	'string'       reduce using rule 67
	'then'         reduce using rule 67
	'try'          reduce using rule 67
	'until'        reduce using rule 67
	'void'         reduce using rule 67
	'while'        reduce using rule 67
	'{'            reduce using rule 67
	'{}'           reduce using rule 67
	'|='           reduce using rule 67
	'}'            reduce using rule 67
	'~='           reduce using rule 67
	L_Pbool        reduce using rule 67
	L_Pident       reduce using rule 67
	L_Pint         reduce using rule 67
	L_Pstring      reduce using rule 67
	L_Preal        reduce using rule 67
	L_Pchar        reduce using rule 67
	%eof           reduce using rule 67


State 175

	Stm -> 'for' Pident '=' Exp ',' Exp ',' . Exp 'do' ListDecStm 'end'    (rule 45)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'if'           shift, and enter state 18
	'not'          shift, and enter state 19
	'{'            shift, and enter state 20
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 180
	Lexp           goto state 13

State 176

	Stm -> 'if' Exp 'then' ListDecStm 'else' ListDecStm 'end' .    (rule 42)
	Exp -> 'if' Exp 'then' ListDecStm 'else' ListDecStm 'end' .    (rule 67)

	'%'            reduce using rule 67
	'&'            reduce using rule 67
			(reduce using rule 42)

	'('            reduce using rule 67
			(reduce using rule 42)

	'*'            reduce using rule 67
	'+'            reduce using rule 67
	'-'            reduce using rule 67
			(reduce using rule 42)

	'/'            reduce using rule 67
	'<'            reduce using rule 67
	'<='           reduce using rule 67
	'=='           reduce using rule 67
	'>'            reduce using rule 67
	'>='           reduce using rule 67
	'^'            reduce using rule 67
	'_'            reduce using rule 67
			(reduce using rule 42)

	'and'          reduce using rule 67
	'boolean'      reduce using rule 67
			(reduce using rule 42)

	'catch'        reduce using rule 67
			(reduce using rule 42)

	'character'    reduce using rule 67
			(reduce using rule 42)

	'const'        reduce using rule 67
			(reduce using rule 42)

	'else'         reduce using rule 67
			(reduce using rule 42)

	'end'          reduce using rule 67
			(reduce using rule 42)

	'float'        reduce using rule 67
			(reduce using rule 42)

	'for'          reduce using rule 67
			(reduce using rule 42)

	'function'     reduce using rule 67
			(reduce using rule 42)

	'if'           reduce using rule 67
			(reduce using rule 42)

	'integer'      reduce using rule 67
			(reduce using rule 42)

	'not'          reduce using rule 67
			(reduce using rule 42)

	'or'           reduce using rule 67
	'pointer'      reduce using rule 67
			(reduce using rule 42)

	'repeat'       reduce using rule 67
			(reduce using rule 42)

	'return'       reduce using rule 67
			(reduce using rule 42)

	'string'       reduce using rule 67
			(reduce using rule 42)

	'try'          reduce using rule 67
			(reduce using rule 42)

	'until'        reduce using rule 67
			(reduce using rule 42)

	'void'         reduce using rule 67
			(reduce using rule 42)

	'while'        reduce using rule 67
			(reduce using rule 42)

	'{'            reduce using rule 67
			(reduce using rule 42)

	'{}'           reduce using rule 67
			(reduce using rule 42)

	'~='           reduce using rule 67
	L_Pbool        reduce using rule 67
			(reduce using rule 42)

	L_Pident       reduce using rule 67
			(reduce using rule 42)

	L_Pint         reduce using rule 67
			(reduce using rule 42)

	L_Pstring      reduce using rule 67
			(reduce using rule 42)

	L_Preal        reduce using rule 67
			(reduce using rule 42)

	L_Pchar        reduce using rule 67
			(reduce using rule 42)

	%eof           reduce using rule 67
			(reduce using rule 42)



State 177

	Dec -> 'function' Type_specifier Pident '(' ListArgument ')' ListDecStm . 'end'    (rule 15)
	ListDecStm -> ListDecStm . DecStm                   (rule 50)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'end'          shift, and enter state 179
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 178

	Dec -> 'function' Pident '(' ListArgument ')' ListDecStm 'end' .    (rule 16)

	'&'            reduce using rule 16
	'('            reduce using rule 16
	'-'            reduce using rule 16
	'_'            reduce using rule 16
	'boolean'      reduce using rule 16
	'catch'        reduce using rule 16
	'character'    reduce using rule 16
	'const'        reduce using rule 16
	'else'         reduce using rule 16
	'end'          reduce using rule 16
	'float'        reduce using rule 16
	'for'          reduce using rule 16
	'function'     reduce using rule 16
	'if'           reduce using rule 16
	'integer'      reduce using rule 16
	'not'          reduce using rule 16
	'pointer'      reduce using rule 16
	'repeat'       reduce using rule 16
	'return'       reduce using rule 16
	'string'       reduce using rule 16
	'try'          reduce using rule 16
	'until'        reduce using rule 16
	'void'         reduce using rule 16
	'while'        reduce using rule 16
	'{'            reduce using rule 16
	'{}'           reduce using rule 16
	L_Pbool        reduce using rule 16
	L_Pident       reduce using rule 16
	L_Pint         reduce using rule 16
	L_Pstring      reduce using rule 16
	L_Preal        reduce using rule 16
	L_Pchar        reduce using rule 16
	%eof           reduce using rule 16


State 179

	Dec -> 'function' Type_specifier Pident '(' ListArgument ')' ListDecStm 'end' .    (rule 15)

	'&'            reduce using rule 15
	'('            reduce using rule 15
	'-'            reduce using rule 15
	'_'            reduce using rule 15
	'boolean'      reduce using rule 15
	'catch'        reduce using rule 15
	'character'    reduce using rule 15
	'const'        reduce using rule 15
	'else'         reduce using rule 15
	'end'          reduce using rule 15
	'float'        reduce using rule 15
	'for'          reduce using rule 15
	'function'     reduce using rule 15
	'if'           reduce using rule 15
	'integer'      reduce using rule 15
	'not'          reduce using rule 15
	'pointer'      reduce using rule 15
	'repeat'       reduce using rule 15
	'return'       reduce using rule 15
	'string'       reduce using rule 15
	'try'          reduce using rule 15
	'until'        reduce using rule 15
	'void'         reduce using rule 15
	'while'        reduce using rule 15
	'{'            reduce using rule 15
	'{}'           reduce using rule 15
	L_Pbool        reduce using rule 15
	L_Pident       reduce using rule 15
	L_Pint         reduce using rule 15
	L_Pstring      reduce using rule 15
	L_Preal        reduce using rule 15
	L_Pchar        reduce using rule 15
	%eof           reduce using rule 15


State 180

	Stm -> 'for' Pident '=' Exp ',' Exp ',' Exp . 'do' ListDecStm 'end'    (rule 45)
	Exp -> Exp . 'or' Exp                               (rule 53)
	Exp -> Exp . 'and' Exp                              (rule 54)
	Exp -> Exp . '==' Exp                               (rule 55)
	Exp -> Exp . '~=' Exp                               (rule 56)
	Exp -> Exp . '<' Exp                                (rule 57)
	Exp -> Exp . '>' Exp                                (rule 58)
	Exp -> Exp . '<=' Exp                               (rule 59)
	Exp -> Exp . '>=' Exp                               (rule 60)
	Exp -> Exp . '+' Exp                                (rule 61)
	Exp -> Exp . '-' Exp                                (rule 62)
	Exp -> Exp . '*' Exp                                (rule 63)
	Exp -> Exp . '/' Exp                                (rule 64)
	Exp -> Exp . '^' Exp                                (rule 65)
	Exp -> Exp . '%' Exp                                (rule 66)

	'%'            shift, and enter state 76
	'*'            shift, and enter state 77
	'+'            shift, and enter state 78
	'-'            shift, and enter state 79
	'/'            shift, and enter state 80
	'<'            shift, and enter state 81
	'<='           shift, and enter state 82
	'=='           shift, and enter state 83
	'>'            shift, and enter state 84
	'>='           shift, and enter state 85
	'^'            shift, and enter state 86
	'and'          shift, and enter state 87
	'do'           shift, and enter state 181
	'or'           shift, and enter state 88
	'~='           shift, and enter state 89


State 181

	Stm -> 'for' Pident '=' Exp ',' Exp ',' Exp 'do' . ListDecStm 'end'    (rule 45)

	'&'            reduce using rule 49
	'('            reduce using rule 49
	'-'            reduce using rule 49
	'_'            reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'const'        reduce using rule 49
	'end'          reduce using rule 49
	'float'        reduce using rule 49
	'for'          reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'try'          reduce using rule 49
	'void'         reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49

	ListDecStm     goto state 182

State 182

	Stm -> 'for' Pident '=' Exp ',' Exp ',' Exp 'do' ListDecStm . 'end'    (rule 45)
	ListDecStm -> ListDecStm . DecStm                   (rule 50)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'-'            shift, and enter state 16
	'_'            shift, and enter state 17
	'boolean'      shift, and enter state 38
	'character'    shift, and enter state 39
	'const'        shift, and enter state 40
	'end'          shift, and enter state 183
	'float'        shift, and enter state 41
	'for'          shift, and enter state 30
	'function'     shift, and enter state 42
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 43
	'not'          shift, and enter state 19
	'pointer'      shift, and enter state 44
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 45
	'try'          shift, and enter state 34
	'void'         shift, and enter state 46
	'while'        shift, and enter state 35
	'{'            shift, and enter state 128
	'{}'           shift, and enter state 48
	L_Pbool        shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pstring      shift, and enter state 24
	L_Preal        shift, and enter state 25
	L_Pchar        shift, and enter state 26

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 124
	Type_specifier goto state 37
	Stm            goto state 125
	DecStm         goto state 126
	Exp            goto state 28
	Lexp           goto state 29

State 183

	Stm -> 'for' Pident '=' Exp ',' Exp ',' Exp 'do' ListDecStm 'end' .    (rule 45)

	'&'            reduce using rule 45
	'('            reduce using rule 45
	'-'            reduce using rule 45
	'_'            reduce using rule 45
	'boolean'      reduce using rule 45
	'catch'        reduce using rule 45
	'character'    reduce using rule 45
	'const'        reduce using rule 45
	'else'         reduce using rule 45
	'end'          reduce using rule 45
	'float'        reduce using rule 45
	'for'          reduce using rule 45
	'function'     reduce using rule 45
	'if'           reduce using rule 45
	'integer'      reduce using rule 45
	'not'          reduce using rule 45
	'pointer'      reduce using rule 45
	'repeat'       reduce using rule 45
	'return'       reduce using rule 45
	'string'       reduce using rule 45
	'try'          reduce using rule 45
	'until'        reduce using rule 45
	'void'         reduce using rule 45
	'while'        reduce using rule 45
	'{'            reduce using rule 45
	'{}'           reduce using rule 45
	L_Pbool        reduce using rule 45
	L_Pident       reduce using rule 45
	L_Pint         reduce using rule 45
	L_Pstring      reduce using rule 45
	L_Preal        reduce using rule 45
	L_Pchar        reduce using rule 45
	%eof           reduce using rule 45


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 94
Number of terminals: 63
Number of non-terminals: 26
Number of states: 184
