-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from ParLua.y
-----------------------------------------------------------------------------

state 6 contains 2 shift/reduce conflicts.
state 29 contains 3 shift/reduce conflicts.
state 56 contains 3 shift/reduce conflicts.
state 93 contains 1 shift/reduce conflicts.
state 117 contains 3 shift/reduce conflicts.
state 142 contains 3 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pDec -> Dec                                 (1)
	%start_pStm -> Stm                                 (2)
	%start_pExp -> Exp                                 (3)
	Integer -> L_integ                                 (4)
	Pident -> L_Pident                                 (5)
	Pint -> L_Pint                                     (6)
	Pbool -> L_Pbool                                   (7)
	Pstring -> L_Pstring                               (8)
	Preal -> L_Preal                                   (9)
	Pchar -> L_Pchar                                   (10)
	Program -> ListDec                                 (11)
	ListDec ->                                         (12)
	ListDec -> ListDec Dec                             (13)
	Dec -> 'function' Type_specifier Pident '(' ListArgument ')' ListDecStm 'end'   (14)
	Dec -> 'function' Pident '(' ListArgument ')' ListDecStm 'end'   (15)
	Dec -> Type_specifier Pident                       (16)
	Dec -> Type_specifier Pident '=' Exp               (17)
	Type_specifier -> 'boolean'                        (18)
	Type_specifier -> 'character'                      (19)
	Type_specifier -> 'float'                          (20)
	Type_specifier -> 'integer'                        (21)
	Type_specifier -> 'string'                         (22)
	Type_specifier -> 'pointer' Type_specifier         (23)
	Type_specifier -> '{}' Type_specifier              (24)
	Type_specifier -> '{' Integer '}' Type_specifier   (25)
	Argument -> Modality Type_specifier Pident         (26)
	ListArgument ->                                    (27)
	ListArgument -> Argument                           (28)
	ListArgument -> Argument ',' ListArgument          (29)
	Modality ->                                        (30)
	Modality -> 'val'                                  (31)
	Modality -> 'res'                                  (32)
	Modality -> 'valres'                               (33)
	Modality -> 'name'                                 (34)
	Modality -> 'const'                                (35)
	Modality -> 'ref'                                  (36)
	Stm -> Lexp Assignment_Op Exp                      (37)
	Stm -> 'return' Exp                                (38)
	Stm -> Exp                                         (39)
	Stm -> 'if' Exp 'then' ListDecStm 'end'            (40)
	Stm -> 'if' Exp 'then' ListDecStm 'else' ListDecStm 'end'   (41)
	Stm -> 'while' Exp 'do' ListDecStm 'end'           (42)
	Stm -> 'repeat' ListDecStm 'until' Exp             (43)
	DecStm -> Dec                                      (44)
	DecStm -> Stm                                      (45)
	ListDecStm ->                                      (46)
	ListDecStm -> ListDecStm DecStm                    (47)
	Exp -> '(' Exp ')'                                 (48)
	Exp -> Pident '(' ListExp ')'                      (49)
	Exp -> Exp 'or' Exp                                (50)
	Exp -> Exp 'and' Exp                               (51)
	Exp -> Exp '==' Exp                                (52)
	Exp -> Exp '~=' Exp                                (53)
	Exp -> Exp '<' Exp                                 (54)
	Exp -> Exp '>' Exp                                 (55)
	Exp -> Exp '<=' Exp                                (56)
	Exp -> Exp '>=' Exp                                (57)
	Exp -> Exp '+' Exp                                 (58)
	Exp -> Exp '-' Exp                                 (59)
	Exp -> Exp '*' Exp                                 (60)
	Exp -> Exp '/' Exp                                 (61)
	Exp -> Exp '^' Exp                                 (62)
	Exp -> Exp '%' Exp                                 (63)
	Exp -> '&' Exp                                     (64)
	Exp -> '-' Exp                                     (65)
	Exp -> 'not' Exp                                   (66)
	Exp -> '{' ListExp '}'                             (67)
	Exp -> Lexp                                        (68)
	Exp -> Preal                                       (69)
	Exp -> Pint                                        (70)
	Exp -> Pbool                                       (71)
	Exp -> Pstring                                     (72)
	Exp -> Pchar                                       (73)
	ListExp ->                                         (74)
	ListExp -> Exp                                     (75)
	ListExp -> Exp ',' ListExp                         (76)
	Lexp -> Pident                                     (77)
	Lexp -> '(' Lexp ')'                               (78)
	Lexp -> '_' Exp                                    (79)
	Lexp -> Pident '{' Exp '}'                         (80)
	Lexp -> '++' Exp                                   (81)
	Lexp -> '--' Exp                                   (82)
	Lexp -> Exp '++'                                   (83)
	Lexp -> Exp '--'                                   (84)
	Assignment_Op -> '='                               (85)
	Assignment_Op -> '*='                              (86)
	Assignment_Op -> '/='                              (87)
	Assignment_Op -> '%='                              (88)
	Assignment_Op -> '+='                              (89)
	Assignment_Op -> '-='                              (90)
	Assignment_Op -> '^='                              (91)
	Assignment_Op -> '&='                              (92)
	Assignment_Op -> '|='                              (93)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'%'            { PT _ (TS _ 1) }
	'%='           { PT _ (TS _ 2) }
	'&'            { PT _ (TS _ 3) }
	'&='           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'*='           { PT _ (TS _ 8) }
	'+'            { PT _ (TS _ 9) }
	'++'           { PT _ (TS _ 10) }
	'+='           { PT _ (TS _ 11) }
	','            { PT _ (TS _ 12) }
	'-'            { PT _ (TS _ 13) }
	'--'           { PT _ (TS _ 14) }
	'-='           { PT _ (TS _ 15) }
	'/'            { PT _ (TS _ 16) }
	'/='           { PT _ (TS _ 17) }
	'<'            { PT _ (TS _ 18) }
	'<='           { PT _ (TS _ 19) }
	'='            { PT _ (TS _ 20) }
	'=='           { PT _ (TS _ 21) }
	'>'            { PT _ (TS _ 22) }
	'>='           { PT _ (TS _ 23) }
	'^'            { PT _ (TS _ 24) }
	'^='           { PT _ (TS _ 25) }
	'_'            { PT _ (TS _ 26) }
	'and'          { PT _ (TS _ 27) }
	'boolean'      { PT _ (TS _ 28) }
	'character'    { PT _ (TS _ 29) }
	'const'        { PT _ (TS _ 30) }
	'do'           { PT _ (TS _ 31) }
	'else'         { PT _ (TS _ 32) }
	'end'          { PT _ (TS _ 33) }
	'float'        { PT _ (TS _ 34) }
	'function'     { PT _ (TS _ 35) }
	'if'           { PT _ (TS _ 36) }
	'integer'      { PT _ (TS _ 37) }
	'name'         { PT _ (TS _ 38) }
	'not'          { PT _ (TS _ 39) }
	'or'           { PT _ (TS _ 40) }
	'pointer'      { PT _ (TS _ 41) }
	'ref'          { PT _ (TS _ 42) }
	'repeat'       { PT _ (TS _ 43) }
	'res'          { PT _ (TS _ 44) }
	'return'       { PT _ (TS _ 45) }
	'string'       { PT _ (TS _ 46) }
	'then'         { PT _ (TS _ 47) }
	'until'        { PT _ (TS _ 48) }
	'val'          { PT _ (TS _ 49) }
	'valres'       { PT _ (TS _ 50) }
	'while'        { PT _ (TS _ 52) }
	'{'            { PT _ (TS _ 53) }
	'{}'           { PT _ (TS _ 54) }
	'|='           { PT _ (TS _ 55) }
	'}'            { PT _ (TS _ 56) }
	'~='           { PT _ (TS _ 57) }
	L_integ        { PT _ (TI $$) }
	L_Pident       { PT _ (T_Pident _) }
	L_Pint         { PT _ (T_Pint _) }
	L_Pbool        { PT _ (T_Pbool _) }
	L_Pstring      { PT _ (T_Pstring _) }
	L_Preal        { PT _ (T_Preal _) }
	L_Pchar        { PT _ (T_Pchar _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pDec     rule  1
	%start_pStm     rule  2
	%start_pExp     rule  3
	Integer         rule  4
	Pident          rule  5
	Pint            rule  6
	Pbool           rule  7
	Pstring         rule  8
	Preal           rule  9
	Pchar           rule  10
	Program         rule  11
	ListDec         rules 12, 13
	Dec             rules 14, 15, 16, 17
	Type_specifier  rules 18, 19, 20, 21, 22, 23, 24, 25
	Argument        rule  26
	ListArgument    rules 27, 28, 29
	Modality        rules 30, 31, 32, 33, 34, 35, 36
	Stm             rules 37, 38, 39, 40, 41, 42, 43
	DecStm          rules 44, 45
	ListDecStm      rules 46, 47
	Exp             rules 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73
	ListExp         rules 74, 75, 76
	Lexp            rules 77, 78, 79, 80, 81, 82, 83, 84
	Assignment_Op   rules 85, 86, 87, 88, 89, 90, 91, 92, 93

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'boolean'      reduce using rule 12
	'character'    reduce using rule 12
	'float'        reduce using rule 12
	'function'     reduce using rule 12
	'integer'      reduce using rule 12
	'pointer'      reduce using rule 12
	'string'       reduce using rule 12
	'{'            reduce using rule 12
	'{}'           reduce using rule 12
	%eof           reduce using rule 12

	Program        goto state 46
	ListDec        goto state 47

State 1


	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'float'        shift, and enter state 39
	'function'     shift, and enter state 40
	'integer'      shift, and enter state 41
	'pointer'      shift, and enter state 42
	'string'       shift, and enter state 43
	'{'            shift, and enter state 44
	'{}'           shift, and enter state 45

	Dec            goto state 35
	Type_specifier goto state 36

State 2


	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'if'           shift, and enter state 31
	'not'          shift, and enter state 20
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'while'        shift, and enter state 34
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Stm            goto state 28
	Exp            goto state 29
	Lexp           goto state 30

State 3


	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 12
	Lexp           goto state 13

State 4


	L_integ        shift, and enter state 5


State 5

	Integer -> L_integ .                                (rule 4)

	'}'            reduce using rule 4


State 6

	Exp -> Pident . '(' ListExp ')'                     (rule 49)
	Lexp -> Pident .                                    (rule 77)
	Lexp -> Pident . '{' Exp '}'                        (rule 80)

	'%'            reduce using rule 77
	'%='           reduce using rule 77
	'&'            reduce using rule 77
	'&='           reduce using rule 77
	'('            shift, and enter state 95
			(reduce using rule 77)

	')'            reduce using rule 77
	'*'            reduce using rule 77
	'*='           reduce using rule 77
	'+'            reduce using rule 77
	'++'           reduce using rule 77
	'+='           reduce using rule 77
	','            reduce using rule 77
	'-'            reduce using rule 77
	'--'           reduce using rule 77
	'-='           reduce using rule 77
	'/'            reduce using rule 77
	'/='           reduce using rule 77
	'<'            reduce using rule 77
	'<='           reduce using rule 77
	'='            reduce using rule 77
	'=='           reduce using rule 77
	'>'            reduce using rule 77
	'>='           reduce using rule 77
	'^'            reduce using rule 77
	'^='           reduce using rule 77
	'_'            reduce using rule 77
	'and'          reduce using rule 77
	'boolean'      reduce using rule 77
	'character'    reduce using rule 77
	'do'           reduce using rule 77
	'else'         reduce using rule 77
	'end'          reduce using rule 77
	'float'        reduce using rule 77
	'function'     reduce using rule 77
	'if'           reduce using rule 77
	'integer'      reduce using rule 77
	'not'          reduce using rule 77
	'or'           reduce using rule 77
	'pointer'      reduce using rule 77
	'repeat'       reduce using rule 77
	'return'       reduce using rule 77
	'string'       reduce using rule 77
	'then'         reduce using rule 77
	'until'        reduce using rule 77
	'while'        reduce using rule 77
	'{'            shift, and enter state 96
			(reduce using rule 77)

	'{}'           reduce using rule 77
	'|='           reduce using rule 77
	'}'            reduce using rule 77
	'~='           reduce using rule 77
	L_Pident       reduce using rule 77
	L_Pint         reduce using rule 77
	L_Pbool        reduce using rule 77
	L_Pstring      reduce using rule 77
	L_Preal        reduce using rule 77
	L_Pchar        reduce using rule 77
	%eof           reduce using rule 77


State 7

	Exp -> Pint .                                       (rule 70)

	'%'            reduce using rule 70
	'%='           reduce using rule 70
	'&'            reduce using rule 70
	'&='           reduce using rule 70
	'('            reduce using rule 70
	')'            reduce using rule 70
	'*'            reduce using rule 70
	'*='           reduce using rule 70
	'+'            reduce using rule 70
	'++'           reduce using rule 70
	'+='           reduce using rule 70
	','            reduce using rule 70
	'-'            reduce using rule 70
	'--'           reduce using rule 70
	'-='           reduce using rule 70
	'/'            reduce using rule 70
	'/='           reduce using rule 70
	'<'            reduce using rule 70
	'<='           reduce using rule 70
	'='            reduce using rule 70
	'=='           reduce using rule 70
	'>'            reduce using rule 70
	'>='           reduce using rule 70
	'^'            reduce using rule 70
	'^='           reduce using rule 70
	'_'            reduce using rule 70
	'and'          reduce using rule 70
	'boolean'      reduce using rule 70
	'character'    reduce using rule 70
	'do'           reduce using rule 70
	'else'         reduce using rule 70
	'end'          reduce using rule 70
	'float'        reduce using rule 70
	'function'     reduce using rule 70
	'if'           reduce using rule 70
	'integer'      reduce using rule 70
	'not'          reduce using rule 70
	'or'           reduce using rule 70
	'pointer'      reduce using rule 70
	'repeat'       reduce using rule 70
	'return'       reduce using rule 70
	'string'       reduce using rule 70
	'then'         reduce using rule 70
	'until'        reduce using rule 70
	'while'        reduce using rule 70
	'{'            reduce using rule 70
	'{}'           reduce using rule 70
	'|='           reduce using rule 70
	'}'            reduce using rule 70
	'~='           reduce using rule 70
	L_Pident       reduce using rule 70
	L_Pint         reduce using rule 70
	L_Pbool        reduce using rule 70
	L_Pstring      reduce using rule 70
	L_Preal        reduce using rule 70
	L_Pchar        reduce using rule 70
	%eof           reduce using rule 70


State 8

	Exp -> Pbool .                                      (rule 71)

	'%'            reduce using rule 71
	'%='           reduce using rule 71
	'&'            reduce using rule 71
	'&='           reduce using rule 71
	'('            reduce using rule 71
	')'            reduce using rule 71
	'*'            reduce using rule 71
	'*='           reduce using rule 71
	'+'            reduce using rule 71
	'++'           reduce using rule 71
	'+='           reduce using rule 71
	','            reduce using rule 71
	'-'            reduce using rule 71
	'--'           reduce using rule 71
	'-='           reduce using rule 71
	'/'            reduce using rule 71
	'/='           reduce using rule 71
	'<'            reduce using rule 71
	'<='           reduce using rule 71
	'='            reduce using rule 71
	'=='           reduce using rule 71
	'>'            reduce using rule 71
	'>='           reduce using rule 71
	'^'            reduce using rule 71
	'^='           reduce using rule 71
	'_'            reduce using rule 71
	'and'          reduce using rule 71
	'boolean'      reduce using rule 71
	'character'    reduce using rule 71
	'do'           reduce using rule 71
	'else'         reduce using rule 71
	'end'          reduce using rule 71
	'float'        reduce using rule 71
	'function'     reduce using rule 71
	'if'           reduce using rule 71
	'integer'      reduce using rule 71
	'not'          reduce using rule 71
	'or'           reduce using rule 71
	'pointer'      reduce using rule 71
	'repeat'       reduce using rule 71
	'return'       reduce using rule 71
	'string'       reduce using rule 71
	'then'         reduce using rule 71
	'until'        reduce using rule 71
	'while'        reduce using rule 71
	'{'            reduce using rule 71
	'{}'           reduce using rule 71
	'|='           reduce using rule 71
	'}'            reduce using rule 71
	'~='           reduce using rule 71
	L_Pident       reduce using rule 71
	L_Pint         reduce using rule 71
	L_Pbool        reduce using rule 71
	L_Pstring      reduce using rule 71
	L_Preal        reduce using rule 71
	L_Pchar        reduce using rule 71
	%eof           reduce using rule 71


State 9

	Exp -> Pstring .                                    (rule 72)

	'%'            reduce using rule 72
	'%='           reduce using rule 72
	'&'            reduce using rule 72
	'&='           reduce using rule 72
	'('            reduce using rule 72
	')'            reduce using rule 72
	'*'            reduce using rule 72
	'*='           reduce using rule 72
	'+'            reduce using rule 72
	'++'           reduce using rule 72
	'+='           reduce using rule 72
	','            reduce using rule 72
	'-'            reduce using rule 72
	'--'           reduce using rule 72
	'-='           reduce using rule 72
	'/'            reduce using rule 72
	'/='           reduce using rule 72
	'<'            reduce using rule 72
	'<='           reduce using rule 72
	'='            reduce using rule 72
	'=='           reduce using rule 72
	'>'            reduce using rule 72
	'>='           reduce using rule 72
	'^'            reduce using rule 72
	'^='           reduce using rule 72
	'_'            reduce using rule 72
	'and'          reduce using rule 72
	'boolean'      reduce using rule 72
	'character'    reduce using rule 72
	'do'           reduce using rule 72
	'else'         reduce using rule 72
	'end'          reduce using rule 72
	'float'        reduce using rule 72
	'function'     reduce using rule 72
	'if'           reduce using rule 72
	'integer'      reduce using rule 72
	'not'          reduce using rule 72
	'or'           reduce using rule 72
	'pointer'      reduce using rule 72
	'repeat'       reduce using rule 72
	'return'       reduce using rule 72
	'string'       reduce using rule 72
	'then'         reduce using rule 72
	'until'        reduce using rule 72
	'while'        reduce using rule 72
	'{'            reduce using rule 72
	'{}'           reduce using rule 72
	'|='           reduce using rule 72
	'}'            reduce using rule 72
	'~='           reduce using rule 72
	L_Pident       reduce using rule 72
	L_Pint         reduce using rule 72
	L_Pbool        reduce using rule 72
	L_Pstring      reduce using rule 72
	L_Preal        reduce using rule 72
	L_Pchar        reduce using rule 72
	%eof           reduce using rule 72


State 10

	Exp -> Preal .                                      (rule 69)

	'%'            reduce using rule 69
	'%='           reduce using rule 69
	'&'            reduce using rule 69
	'&='           reduce using rule 69
	'('            reduce using rule 69
	')'            reduce using rule 69
	'*'            reduce using rule 69
	'*='           reduce using rule 69
	'+'            reduce using rule 69
	'++'           reduce using rule 69
	'+='           reduce using rule 69
	','            reduce using rule 69
	'-'            reduce using rule 69
	'--'           reduce using rule 69
	'-='           reduce using rule 69
	'/'            reduce using rule 69
	'/='           reduce using rule 69
	'<'            reduce using rule 69
	'<='           reduce using rule 69
	'='            reduce using rule 69
	'=='           reduce using rule 69
	'>'            reduce using rule 69
	'>='           reduce using rule 69
	'^'            reduce using rule 69
	'^='           reduce using rule 69
	'_'            reduce using rule 69
	'and'          reduce using rule 69
	'boolean'      reduce using rule 69
	'character'    reduce using rule 69
	'do'           reduce using rule 69
	'else'         reduce using rule 69
	'end'          reduce using rule 69
	'float'        reduce using rule 69
	'function'     reduce using rule 69
	'if'           reduce using rule 69
	'integer'      reduce using rule 69
	'not'          reduce using rule 69
	'or'           reduce using rule 69
	'pointer'      reduce using rule 69
	'repeat'       reduce using rule 69
	'return'       reduce using rule 69
	'string'       reduce using rule 69
	'then'         reduce using rule 69
	'until'        reduce using rule 69
	'while'        reduce using rule 69
	'{'            reduce using rule 69
	'{}'           reduce using rule 69
	'|='           reduce using rule 69
	'}'            reduce using rule 69
	'~='           reduce using rule 69
	L_Pident       reduce using rule 69
	L_Pint         reduce using rule 69
	L_Pbool        reduce using rule 69
	L_Pstring      reduce using rule 69
	L_Preal        reduce using rule 69
	L_Pchar        reduce using rule 69
	%eof           reduce using rule 69


State 11

	Exp -> Pchar .                                      (rule 73)

	'%'            reduce using rule 73
	'%='           reduce using rule 73
	'&'            reduce using rule 73
	'&='           reduce using rule 73
	'('            reduce using rule 73
	')'            reduce using rule 73
	'*'            reduce using rule 73
	'*='           reduce using rule 73
	'+'            reduce using rule 73
	'++'           reduce using rule 73
	'+='           reduce using rule 73
	','            reduce using rule 73
	'-'            reduce using rule 73
	'--'           reduce using rule 73
	'-='           reduce using rule 73
	'/'            reduce using rule 73
	'/='           reduce using rule 73
	'<'            reduce using rule 73
	'<='           reduce using rule 73
	'='            reduce using rule 73
	'=='           reduce using rule 73
	'>'            reduce using rule 73
	'>='           reduce using rule 73
	'^'            reduce using rule 73
	'^='           reduce using rule 73
	'_'            reduce using rule 73
	'and'          reduce using rule 73
	'boolean'      reduce using rule 73
	'character'    reduce using rule 73
	'do'           reduce using rule 73
	'else'         reduce using rule 73
	'end'          reduce using rule 73
	'float'        reduce using rule 73
	'function'     reduce using rule 73
	'if'           reduce using rule 73
	'integer'      reduce using rule 73
	'not'          reduce using rule 73
	'or'           reduce using rule 73
	'pointer'      reduce using rule 73
	'repeat'       reduce using rule 73
	'return'       reduce using rule 73
	'string'       reduce using rule 73
	'then'         reduce using rule 73
	'until'        reduce using rule 73
	'while'        reduce using rule 73
	'{'            reduce using rule 73
	'{}'           reduce using rule 73
	'|='           reduce using rule 73
	'}'            reduce using rule 73
	'~='           reduce using rule 73
	L_Pident       reduce using rule 73
	L_Pint         reduce using rule 73
	L_Pbool        reduce using rule 73
	L_Pstring      reduce using rule 73
	L_Preal        reduce using rule 73
	L_Pchar        reduce using rule 73
	%eof           reduce using rule 73


State 12

	%start_pExp -> Exp .                                (rule 3)
	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'and'          shift, and enter state 82
	'or'           shift, and enter state 83
	'~='           shift, and enter state 84
	%eof           accept


State 13

	Exp -> Lexp .                                       (rule 68)

	'%'            reduce using rule 68
	'%='           reduce using rule 68
	'&'            reduce using rule 68
	'&='           reduce using rule 68
	'('            reduce using rule 68
	')'            reduce using rule 68
	'*'            reduce using rule 68
	'*='           reduce using rule 68
	'+'            reduce using rule 68
	'++'           reduce using rule 68
	'+='           reduce using rule 68
	','            reduce using rule 68
	'-'            reduce using rule 68
	'--'           reduce using rule 68
	'-='           reduce using rule 68
	'/'            reduce using rule 68
	'/='           reduce using rule 68
	'<'            reduce using rule 68
	'<='           reduce using rule 68
	'='            reduce using rule 68
	'=='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'^'            reduce using rule 68
	'^='           reduce using rule 68
	'_'            reduce using rule 68
	'and'          reduce using rule 68
	'boolean'      reduce using rule 68
	'character'    reduce using rule 68
	'do'           reduce using rule 68
	'else'         reduce using rule 68
	'end'          reduce using rule 68
	'float'        reduce using rule 68
	'function'     reduce using rule 68
	'if'           reduce using rule 68
	'integer'      reduce using rule 68
	'not'          reduce using rule 68
	'or'           reduce using rule 68
	'pointer'      reduce using rule 68
	'repeat'       reduce using rule 68
	'return'       reduce using rule 68
	'string'       reduce using rule 68
	'then'         reduce using rule 68
	'until'        reduce using rule 68
	'while'        reduce using rule 68
	'{'            reduce using rule 68
	'{}'           reduce using rule 68
	'|='           reduce using rule 68
	'}'            reduce using rule 68
	'~='           reduce using rule 68
	L_Pident       reduce using rule 68
	L_Pint         reduce using rule 68
	L_Pbool        reduce using rule 68
	L_Pstring      reduce using rule 68
	L_Preal        reduce using rule 68
	L_Pchar        reduce using rule 68
	%eof           reduce using rule 68


State 14

	Exp -> '&' . Exp                                    (rule 64)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 94
	Lexp           goto state 13

State 15

	Exp -> '(' . Exp ')'                                (rule 48)
	Lexp -> '(' . Lexp ')'                              (rule 78)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 92
	Lexp           goto state 93

State 16

	Lexp -> '++' . Exp                                  (rule 81)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 91
	Lexp           goto state 13

State 17

	Exp -> '-' . Exp                                    (rule 65)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 90
	Lexp           goto state 13

State 18

	Lexp -> '--' . Exp                                  (rule 82)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 89
	Lexp           goto state 13

State 19

	Lexp -> '_' . Exp                                   (rule 79)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 88
	Lexp           goto state 13

State 20

	Exp -> 'not' . Exp                                  (rule 66)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 87
	Lexp           goto state 13

State 21

	Exp -> '{' . ListExp '}'                            (rule 67)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	'}'            reduce using rule 74
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 85
	ListExp        goto state 86
	Lexp           goto state 13

State 22

	Pident -> L_Pident .                                (rule 5)

	'%'            reduce using rule 5
	'%='           reduce using rule 5
	'&'            reduce using rule 5
	'&='           reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'*'            reduce using rule 5
	'*='           reduce using rule 5
	'+'            reduce using rule 5
	'++'           reduce using rule 5
	'+='           reduce using rule 5
	','            reduce using rule 5
	'-'            reduce using rule 5
	'--'           reduce using rule 5
	'-='           reduce using rule 5
	'/'            reduce using rule 5
	'/='           reduce using rule 5
	'<'            reduce using rule 5
	'<='           reduce using rule 5
	'='            reduce using rule 5
	'=='           reduce using rule 5
	'>'            reduce using rule 5
	'>='           reduce using rule 5
	'^'            reduce using rule 5
	'^='           reduce using rule 5
	'_'            reduce using rule 5
	'and'          reduce using rule 5
	'boolean'      reduce using rule 5
	'character'    reduce using rule 5
	'do'           reduce using rule 5
	'else'         reduce using rule 5
	'end'          reduce using rule 5
	'float'        reduce using rule 5
	'function'     reduce using rule 5
	'if'           reduce using rule 5
	'integer'      reduce using rule 5
	'not'          reduce using rule 5
	'or'           reduce using rule 5
	'pointer'      reduce using rule 5
	'repeat'       reduce using rule 5
	'return'       reduce using rule 5
	'string'       reduce using rule 5
	'then'         reduce using rule 5
	'until'        reduce using rule 5
	'while'        reduce using rule 5
	'{'            reduce using rule 5
	'{}'           reduce using rule 5
	'|='           reduce using rule 5
	'}'            reduce using rule 5
	'~='           reduce using rule 5
	L_Pident       reduce using rule 5
	L_Pint         reduce using rule 5
	L_Pbool        reduce using rule 5
	L_Pstring      reduce using rule 5
	L_Preal        reduce using rule 5
	L_Pchar        reduce using rule 5
	%eof           reduce using rule 5


State 23

	Pint -> L_Pint .                                    (rule 6)

	'%'            reduce using rule 6
	'%='           reduce using rule 6
	'&'            reduce using rule 6
	'&='           reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'*'            reduce using rule 6
	'*='           reduce using rule 6
	'+'            reduce using rule 6
	'++'           reduce using rule 6
	'+='           reduce using rule 6
	','            reduce using rule 6
	'-'            reduce using rule 6
	'--'           reduce using rule 6
	'-='           reduce using rule 6
	'/'            reduce using rule 6
	'/='           reduce using rule 6
	'<'            reduce using rule 6
	'<='           reduce using rule 6
	'='            reduce using rule 6
	'=='           reduce using rule 6
	'>'            reduce using rule 6
	'>='           reduce using rule 6
	'^'            reduce using rule 6
	'^='           reduce using rule 6
	'_'            reduce using rule 6
	'and'          reduce using rule 6
	'boolean'      reduce using rule 6
	'character'    reduce using rule 6
	'do'           reduce using rule 6
	'else'         reduce using rule 6
	'end'          reduce using rule 6
	'float'        reduce using rule 6
	'function'     reduce using rule 6
	'if'           reduce using rule 6
	'integer'      reduce using rule 6
	'not'          reduce using rule 6
	'or'           reduce using rule 6
	'pointer'      reduce using rule 6
	'repeat'       reduce using rule 6
	'return'       reduce using rule 6
	'string'       reduce using rule 6
	'then'         reduce using rule 6
	'until'        reduce using rule 6
	'while'        reduce using rule 6
	'{'            reduce using rule 6
	'{}'           reduce using rule 6
	'|='           reduce using rule 6
	'}'            reduce using rule 6
	'~='           reduce using rule 6
	L_Pident       reduce using rule 6
	L_Pint         reduce using rule 6
	L_Pbool        reduce using rule 6
	L_Pstring      reduce using rule 6
	L_Preal        reduce using rule 6
	L_Pchar        reduce using rule 6
	%eof           reduce using rule 6


State 24

	Pbool -> L_Pbool .                                  (rule 7)

	'%'            reduce using rule 7
	'%='           reduce using rule 7
	'&'            reduce using rule 7
	'&='           reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'*'            reduce using rule 7
	'*='           reduce using rule 7
	'+'            reduce using rule 7
	'++'           reduce using rule 7
	'+='           reduce using rule 7
	','            reduce using rule 7
	'-'            reduce using rule 7
	'--'           reduce using rule 7
	'-='           reduce using rule 7
	'/'            reduce using rule 7
	'/='           reduce using rule 7
	'<'            reduce using rule 7
	'<='           reduce using rule 7
	'='            reduce using rule 7
	'=='           reduce using rule 7
	'>'            reduce using rule 7
	'>='           reduce using rule 7
	'^'            reduce using rule 7
	'^='           reduce using rule 7
	'_'            reduce using rule 7
	'and'          reduce using rule 7
	'boolean'      reduce using rule 7
	'character'    reduce using rule 7
	'do'           reduce using rule 7
	'else'         reduce using rule 7
	'end'          reduce using rule 7
	'float'        reduce using rule 7
	'function'     reduce using rule 7
	'if'           reduce using rule 7
	'integer'      reduce using rule 7
	'not'          reduce using rule 7
	'or'           reduce using rule 7
	'pointer'      reduce using rule 7
	'repeat'       reduce using rule 7
	'return'       reduce using rule 7
	'string'       reduce using rule 7
	'then'         reduce using rule 7
	'until'        reduce using rule 7
	'while'        reduce using rule 7
	'{'            reduce using rule 7
	'{}'           reduce using rule 7
	'|='           reduce using rule 7
	'}'            reduce using rule 7
	'~='           reduce using rule 7
	L_Pident       reduce using rule 7
	L_Pint         reduce using rule 7
	L_Pbool        reduce using rule 7
	L_Pstring      reduce using rule 7
	L_Preal        reduce using rule 7
	L_Pchar        reduce using rule 7
	%eof           reduce using rule 7


State 25

	Pstring -> L_Pstring .                              (rule 8)

	'%'            reduce using rule 8
	'%='           reduce using rule 8
	'&'            reduce using rule 8
	'&='           reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'*'            reduce using rule 8
	'*='           reduce using rule 8
	'+'            reduce using rule 8
	'++'           reduce using rule 8
	'+='           reduce using rule 8
	','            reduce using rule 8
	'-'            reduce using rule 8
	'--'           reduce using rule 8
	'-='           reduce using rule 8
	'/'            reduce using rule 8
	'/='           reduce using rule 8
	'<'            reduce using rule 8
	'<='           reduce using rule 8
	'='            reduce using rule 8
	'=='           reduce using rule 8
	'>'            reduce using rule 8
	'>='           reduce using rule 8
	'^'            reduce using rule 8
	'^='           reduce using rule 8
	'_'            reduce using rule 8
	'and'          reduce using rule 8
	'boolean'      reduce using rule 8
	'character'    reduce using rule 8
	'do'           reduce using rule 8
	'else'         reduce using rule 8
	'end'          reduce using rule 8
	'float'        reduce using rule 8
	'function'     reduce using rule 8
	'if'           reduce using rule 8
	'integer'      reduce using rule 8
	'not'          reduce using rule 8
	'or'           reduce using rule 8
	'pointer'      reduce using rule 8
	'repeat'       reduce using rule 8
	'return'       reduce using rule 8
	'string'       reduce using rule 8
	'then'         reduce using rule 8
	'until'        reduce using rule 8
	'while'        reduce using rule 8
	'{'            reduce using rule 8
	'{}'           reduce using rule 8
	'|='           reduce using rule 8
	'}'            reduce using rule 8
	'~='           reduce using rule 8
	L_Pident       reduce using rule 8
	L_Pint         reduce using rule 8
	L_Pbool        reduce using rule 8
	L_Pstring      reduce using rule 8
	L_Preal        reduce using rule 8
	L_Pchar        reduce using rule 8
	%eof           reduce using rule 8


State 26

	Preal -> L_Preal .                                  (rule 9)

	'%'            reduce using rule 9
	'%='           reduce using rule 9
	'&'            reduce using rule 9
	'&='           reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'*'            reduce using rule 9
	'*='           reduce using rule 9
	'+'            reduce using rule 9
	'++'           reduce using rule 9
	'+='           reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	'--'           reduce using rule 9
	'-='           reduce using rule 9
	'/'            reduce using rule 9
	'/='           reduce using rule 9
	'<'            reduce using rule 9
	'<='           reduce using rule 9
	'='            reduce using rule 9
	'=='           reduce using rule 9
	'>'            reduce using rule 9
	'>='           reduce using rule 9
	'^'            reduce using rule 9
	'^='           reduce using rule 9
	'_'            reduce using rule 9
	'and'          reduce using rule 9
	'boolean'      reduce using rule 9
	'character'    reduce using rule 9
	'do'           reduce using rule 9
	'else'         reduce using rule 9
	'end'          reduce using rule 9
	'float'        reduce using rule 9
	'function'     reduce using rule 9
	'if'           reduce using rule 9
	'integer'      reduce using rule 9
	'not'          reduce using rule 9
	'or'           reduce using rule 9
	'pointer'      reduce using rule 9
	'repeat'       reduce using rule 9
	'return'       reduce using rule 9
	'string'       reduce using rule 9
	'then'         reduce using rule 9
	'until'        reduce using rule 9
	'while'        reduce using rule 9
	'{'            reduce using rule 9
	'{}'           reduce using rule 9
	'|='           reduce using rule 9
	'}'            reduce using rule 9
	'~='           reduce using rule 9
	L_Pident       reduce using rule 9
	L_Pint         reduce using rule 9
	L_Pbool        reduce using rule 9
	L_Pstring      reduce using rule 9
	L_Preal        reduce using rule 9
	L_Pchar        reduce using rule 9
	%eof           reduce using rule 9


State 27

	Pchar -> L_Pchar .                                  (rule 10)

	'%'            reduce using rule 10
	'%='           reduce using rule 10
	'&'            reduce using rule 10
	'&='           reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'*='           reduce using rule 10
	'+'            reduce using rule 10
	'++'           reduce using rule 10
	'+='           reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'--'           reduce using rule 10
	'-='           reduce using rule 10
	'/'            reduce using rule 10
	'/='           reduce using rule 10
	'<'            reduce using rule 10
	'<='           reduce using rule 10
	'='            reduce using rule 10
	'=='           reduce using rule 10
	'>'            reduce using rule 10
	'>='           reduce using rule 10
	'^'            reduce using rule 10
	'^='           reduce using rule 10
	'_'            reduce using rule 10
	'and'          reduce using rule 10
	'boolean'      reduce using rule 10
	'character'    reduce using rule 10
	'do'           reduce using rule 10
	'else'         reduce using rule 10
	'end'          reduce using rule 10
	'float'        reduce using rule 10
	'function'     reduce using rule 10
	'if'           reduce using rule 10
	'integer'      reduce using rule 10
	'not'          reduce using rule 10
	'or'           reduce using rule 10
	'pointer'      reduce using rule 10
	'repeat'       reduce using rule 10
	'return'       reduce using rule 10
	'string'       reduce using rule 10
	'then'         reduce using rule 10
	'until'        reduce using rule 10
	'while'        reduce using rule 10
	'{'            reduce using rule 10
	'{}'           reduce using rule 10
	'|='           reduce using rule 10
	'}'            reduce using rule 10
	'~='           reduce using rule 10
	L_Pident       reduce using rule 10
	L_Pint         reduce using rule 10
	L_Pbool        reduce using rule 10
	L_Pstring      reduce using rule 10
	L_Preal        reduce using rule 10
	L_Pchar        reduce using rule 10
	%eof           reduce using rule 10


State 28

	%start_pStm -> Stm .                                (rule 2)

	%eof           accept


State 29

	Stm -> Exp .                                        (rule 39)
	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'&'            reduce using rule 39
	'('            reduce using rule 39
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
			(reduce using rule 39)

	'-'            shift, and enter state 73
			(reduce using rule 39)

	'--'           shift, and enter state 74
			(reduce using rule 39)

	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'_'            reduce using rule 39
	'and'          shift, and enter state 82
	'boolean'      reduce using rule 39
	'character'    reduce using rule 39
	'else'         reduce using rule 39
	'end'          reduce using rule 39
	'float'        reduce using rule 39
	'function'     reduce using rule 39
	'if'           reduce using rule 39
	'integer'      reduce using rule 39
	'not'          reduce using rule 39
	'or'           shift, and enter state 83
	'pointer'      reduce using rule 39
	'repeat'       reduce using rule 39
	'return'       reduce using rule 39
	'string'       reduce using rule 39
	'until'        reduce using rule 39
	'while'        reduce using rule 39
	'{'            reduce using rule 39
	'{}'           reduce using rule 39
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 39
	L_Pint         reduce using rule 39
	L_Pbool        reduce using rule 39
	L_Pstring      reduce using rule 39
	L_Preal        reduce using rule 39
	L_Pchar        reduce using rule 39
	%eof           reduce using rule 39


State 30

	Stm -> Lexp . Assignment_Op Exp                     (rule 37)
	Exp -> Lexp .                                       (rule 68)

	'%'            reduce using rule 68
	'%='           shift, and enter state 60
	'&'            reduce using rule 68
	'&='           shift, and enter state 61
	'('            reduce using rule 68
	'*'            reduce using rule 68
	'*='           shift, and enter state 62
	'+'            reduce using rule 68
	'++'           reduce using rule 68
	'+='           shift, and enter state 63
	'-'            reduce using rule 68
	'--'           reduce using rule 68
	'-='           shift, and enter state 64
	'/'            reduce using rule 68
	'/='           shift, and enter state 65
	'<'            reduce using rule 68
	'<='           reduce using rule 68
	'='            shift, and enter state 66
	'=='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'^'            reduce using rule 68
	'^='           shift, and enter state 67
	'_'            reduce using rule 68
	'and'          reduce using rule 68
	'boolean'      reduce using rule 68
	'character'    reduce using rule 68
	'else'         reduce using rule 68
	'end'          reduce using rule 68
	'float'        reduce using rule 68
	'function'     reduce using rule 68
	'if'           reduce using rule 68
	'integer'      reduce using rule 68
	'not'          reduce using rule 68
	'or'           reduce using rule 68
	'pointer'      reduce using rule 68
	'repeat'       reduce using rule 68
	'return'       reduce using rule 68
	'string'       reduce using rule 68
	'until'        reduce using rule 68
	'while'        reduce using rule 68
	'{'            reduce using rule 68
	'{}'           reduce using rule 68
	'|='           shift, and enter state 68
	'~='           reduce using rule 68
	L_Pident       reduce using rule 68
	L_Pint         reduce using rule 68
	L_Pbool        reduce using rule 68
	L_Pstring      reduce using rule 68
	L_Preal        reduce using rule 68
	L_Pchar        reduce using rule 68
	%eof           reduce using rule 68

	Assignment_Op  goto state 59

State 31

	Stm -> 'if' . Exp 'then' ListDecStm 'end'           (rule 40)
	Stm -> 'if' . Exp 'then' ListDecStm 'else' ListDecStm 'end'    (rule 41)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 58
	Lexp           goto state 13

State 32

	Stm -> 'repeat' . ListDecStm 'until' Exp            (rule 43)

	'&'            reduce using rule 46
	'('            reduce using rule 46
	'++'           reduce using rule 46
	'-'            reduce using rule 46
	'--'           reduce using rule 46
	'_'            reduce using rule 46
	'boolean'      reduce using rule 46
	'character'    reduce using rule 46
	'float'        reduce using rule 46
	'function'     reduce using rule 46
	'if'           reduce using rule 46
	'integer'      reduce using rule 46
	'not'          reduce using rule 46
	'pointer'      reduce using rule 46
	'repeat'       reduce using rule 46
	'return'       reduce using rule 46
	'string'       reduce using rule 46
	'until'        reduce using rule 46
	'while'        reduce using rule 46
	'{'            reduce using rule 46
	'{}'           reduce using rule 46
	L_Pident       reduce using rule 46
	L_Pint         reduce using rule 46
	L_Pbool        reduce using rule 46
	L_Pstring      reduce using rule 46
	L_Preal        reduce using rule 46
	L_Pchar        reduce using rule 46

	ListDecStm     goto state 57

State 33

	Stm -> 'return' . Exp                               (rule 38)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 56
	Lexp           goto state 13

State 34

	Stm -> 'while' . Exp 'do' ListDecStm 'end'          (rule 42)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 55
	Lexp           goto state 13

State 35

	%start_pDec -> Dec .                                (rule 1)

	%eof           accept


State 36

	Dec -> Type_specifier . Pident                      (rule 16)
	Dec -> Type_specifier . Pident '=' Exp              (rule 17)

	L_Pident       shift, and enter state 22

	Pident         goto state 54

State 37

	Type_specifier -> 'boolean' .                       (rule 18)

	L_Pident       reduce using rule 18


State 38

	Type_specifier -> 'character' .                     (rule 19)

	L_Pident       reduce using rule 19


State 39

	Type_specifier -> 'float' .                         (rule 20)

	L_Pident       reduce using rule 20


State 40

	Dec -> 'function' . Type_specifier Pident '(' ListArgument ')' ListDecStm 'end'    (rule 14)
	Dec -> 'function' . Pident '(' ListArgument ')' ListDecStm 'end'    (rule 15)

	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'float'        shift, and enter state 39
	'integer'      shift, and enter state 41
	'pointer'      shift, and enter state 42
	'string'       shift, and enter state 43
	'{'            shift, and enter state 44
	'{}'           shift, and enter state 45
	L_Pident       shift, and enter state 22

	Pident         goto state 52
	Type_specifier goto state 53

State 41

	Type_specifier -> 'integer' .                       (rule 21)

	L_Pident       reduce using rule 21


State 42

	Type_specifier -> 'pointer' . Type_specifier        (rule 23)

	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'float'        shift, and enter state 39
	'integer'      shift, and enter state 41
	'pointer'      shift, and enter state 42
	'string'       shift, and enter state 43
	'{'            shift, and enter state 44
	'{}'           shift, and enter state 45

	Type_specifier goto state 51

State 43

	Type_specifier -> 'string' .                        (rule 22)

	L_Pident       reduce using rule 22


State 44

	Type_specifier -> '{' . Integer '}' Type_specifier    (rule 25)

	L_integ        shift, and enter state 5

	Integer        goto state 50

State 45

	Type_specifier -> '{}' . Type_specifier             (rule 24)

	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'float'        shift, and enter state 39
	'integer'      shift, and enter state 41
	'pointer'      shift, and enter state 42
	'string'       shift, and enter state 43
	'{'            shift, and enter state 44
	'{}'           shift, and enter state 45

	Type_specifier goto state 49

State 46

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 47

	Program -> ListDec .                                (rule 11)
	ListDec -> ListDec . Dec                            (rule 13)

	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'float'        shift, and enter state 39
	'function'     shift, and enter state 40
	'integer'      shift, and enter state 41
	'pointer'      shift, and enter state 42
	'string'       shift, and enter state 43
	'{'            shift, and enter state 44
	'{}'           shift, and enter state 45
	%eof           reduce using rule 11

	Dec            goto state 48
	Type_specifier goto state 36

State 48

	ListDec -> ListDec Dec .                            (rule 13)

	'boolean'      reduce using rule 13
	'character'    reduce using rule 13
	'float'        reduce using rule 13
	'function'     reduce using rule 13
	'integer'      reduce using rule 13
	'pointer'      reduce using rule 13
	'string'       reduce using rule 13
	'{'            reduce using rule 13
	'{}'           reduce using rule 13
	%eof           reduce using rule 13


State 49

	Type_specifier -> '{}' Type_specifier .             (rule 24)

	L_Pident       reduce using rule 24


State 50

	Type_specifier -> '{' Integer . '}' Type_specifier    (rule 25)

	'}'            shift, and enter state 128


State 51

	Type_specifier -> 'pointer' Type_specifier .        (rule 23)

	L_Pident       reduce using rule 23


State 52

	Dec -> 'function' Pident . '(' ListArgument ')' ListDecStm 'end'    (rule 15)

	'('            shift, and enter state 127


State 53

	Dec -> 'function' Type_specifier . Pident '(' ListArgument ')' ListDecStm 'end'    (rule 14)

	L_Pident       shift, and enter state 22

	Pident         goto state 126

State 54

	Dec -> Type_specifier Pident .                      (rule 16)
	Dec -> Type_specifier Pident . '=' Exp              (rule 17)

	'&'            reduce using rule 16
	'('            reduce using rule 16
	'++'           reduce using rule 16
	'-'            reduce using rule 16
	'--'           reduce using rule 16
	'='            shift, and enter state 125
	'_'            reduce using rule 16
	'boolean'      reduce using rule 16
	'character'    reduce using rule 16
	'else'         reduce using rule 16
	'end'          reduce using rule 16
	'float'        reduce using rule 16
	'function'     reduce using rule 16
	'if'           reduce using rule 16
	'integer'      reduce using rule 16
	'not'          reduce using rule 16
	'pointer'      reduce using rule 16
	'repeat'       reduce using rule 16
	'return'       reduce using rule 16
	'string'       reduce using rule 16
	'until'        reduce using rule 16
	'while'        reduce using rule 16
	'{'            reduce using rule 16
	'{}'           reduce using rule 16
	L_Pident       reduce using rule 16
	L_Pint         reduce using rule 16
	L_Pbool        reduce using rule 16
	L_Pstring      reduce using rule 16
	L_Preal        reduce using rule 16
	L_Pchar        reduce using rule 16
	%eof           reduce using rule 16


State 55

	Stm -> 'while' Exp . 'do' ListDecStm 'end'          (rule 42)
	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'and'          shift, and enter state 82
	'do'           shift, and enter state 124
	'or'           shift, and enter state 83
	'~='           shift, and enter state 84


State 56

	Stm -> 'return' Exp .                               (rule 38)
	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'&'            reduce using rule 38
	'('            reduce using rule 38
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
			(reduce using rule 38)

	'-'            shift, and enter state 73
			(reduce using rule 38)

	'--'           shift, and enter state 74
			(reduce using rule 38)

	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'_'            reduce using rule 38
	'and'          shift, and enter state 82
	'boolean'      reduce using rule 38
	'character'    reduce using rule 38
	'else'         reduce using rule 38
	'end'          reduce using rule 38
	'float'        reduce using rule 38
	'function'     reduce using rule 38
	'if'           reduce using rule 38
	'integer'      reduce using rule 38
	'not'          reduce using rule 38
	'or'           shift, and enter state 83
	'pointer'      reduce using rule 38
	'repeat'       reduce using rule 38
	'return'       reduce using rule 38
	'string'       reduce using rule 38
	'until'        reduce using rule 38
	'while'        reduce using rule 38
	'{'            reduce using rule 38
	'{}'           reduce using rule 38
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 38
	L_Pint         reduce using rule 38
	L_Pbool        reduce using rule 38
	L_Pstring      reduce using rule 38
	L_Preal        reduce using rule 38
	L_Pchar        reduce using rule 38
	%eof           reduce using rule 38


State 57

	Stm -> 'repeat' ListDecStm . 'until' Exp            (rule 43)
	ListDecStm -> ListDecStm . DecStm                   (rule 47)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'float'        shift, and enter state 39
	'function'     shift, and enter state 40
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 41
	'not'          shift, and enter state 20
	'pointer'      shift, and enter state 42
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 43
	'until'        shift, and enter state 122
	'while'        shift, and enter state 34
	'{'            shift, and enter state 123
	'{}'           shift, and enter state 45
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 119
	Type_specifier goto state 36
	Stm            goto state 120
	DecStm         goto state 121
	Exp            goto state 29
	Lexp           goto state 30

State 58

	Stm -> 'if' Exp . 'then' ListDecStm 'end'           (rule 40)
	Stm -> 'if' Exp . 'then' ListDecStm 'else' ListDecStm 'end'    (rule 41)
	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'and'          shift, and enter state 82
	'or'           shift, and enter state 83
	'then'         shift, and enter state 118
	'~='           shift, and enter state 84


State 59

	Stm -> Lexp Assignment_Op . Exp                     (rule 37)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 117
	Lexp           goto state 13

State 60

	Assignment_Op -> '%=' .                             (rule 88)

	'&'            reduce using rule 88
	'('            reduce using rule 88
	'++'           reduce using rule 88
	'-'            reduce using rule 88
	'--'           reduce using rule 88
	'_'            reduce using rule 88
	'not'          reduce using rule 88
	'{'            reduce using rule 88
	L_Pident       reduce using rule 88
	L_Pint         reduce using rule 88
	L_Pbool        reduce using rule 88
	L_Pstring      reduce using rule 88
	L_Preal        reduce using rule 88
	L_Pchar        reduce using rule 88


State 61

	Assignment_Op -> '&=' .                             (rule 92)

	'&'            reduce using rule 92
	'('            reduce using rule 92
	'++'           reduce using rule 92
	'-'            reduce using rule 92
	'--'           reduce using rule 92
	'_'            reduce using rule 92
	'not'          reduce using rule 92
	'{'            reduce using rule 92
	L_Pident       reduce using rule 92
	L_Pint         reduce using rule 92
	L_Pbool        reduce using rule 92
	L_Pstring      reduce using rule 92
	L_Preal        reduce using rule 92
	L_Pchar        reduce using rule 92


State 62

	Assignment_Op -> '*=' .                             (rule 86)

	'&'            reduce using rule 86
	'('            reduce using rule 86
	'++'           reduce using rule 86
	'-'            reduce using rule 86
	'--'           reduce using rule 86
	'_'            reduce using rule 86
	'not'          reduce using rule 86
	'{'            reduce using rule 86
	L_Pident       reduce using rule 86
	L_Pint         reduce using rule 86
	L_Pbool        reduce using rule 86
	L_Pstring      reduce using rule 86
	L_Preal        reduce using rule 86
	L_Pchar        reduce using rule 86


State 63

	Assignment_Op -> '+=' .                             (rule 89)

	'&'            reduce using rule 89
	'('            reduce using rule 89
	'++'           reduce using rule 89
	'-'            reduce using rule 89
	'--'           reduce using rule 89
	'_'            reduce using rule 89
	'not'          reduce using rule 89
	'{'            reduce using rule 89
	L_Pident       reduce using rule 89
	L_Pint         reduce using rule 89
	L_Pbool        reduce using rule 89
	L_Pstring      reduce using rule 89
	L_Preal        reduce using rule 89
	L_Pchar        reduce using rule 89


State 64

	Assignment_Op -> '-=' .                             (rule 90)

	'&'            reduce using rule 90
	'('            reduce using rule 90
	'++'           reduce using rule 90
	'-'            reduce using rule 90
	'--'           reduce using rule 90
	'_'            reduce using rule 90
	'not'          reduce using rule 90
	'{'            reduce using rule 90
	L_Pident       reduce using rule 90
	L_Pint         reduce using rule 90
	L_Pbool        reduce using rule 90
	L_Pstring      reduce using rule 90
	L_Preal        reduce using rule 90
	L_Pchar        reduce using rule 90


State 65

	Assignment_Op -> '/=' .                             (rule 87)

	'&'            reduce using rule 87
	'('            reduce using rule 87
	'++'           reduce using rule 87
	'-'            reduce using rule 87
	'--'           reduce using rule 87
	'_'            reduce using rule 87
	'not'          reduce using rule 87
	'{'            reduce using rule 87
	L_Pident       reduce using rule 87
	L_Pint         reduce using rule 87
	L_Pbool        reduce using rule 87
	L_Pstring      reduce using rule 87
	L_Preal        reduce using rule 87
	L_Pchar        reduce using rule 87


State 66

	Assignment_Op -> '=' .                              (rule 85)

	'&'            reduce using rule 85
	'('            reduce using rule 85
	'++'           reduce using rule 85
	'-'            reduce using rule 85
	'--'           reduce using rule 85
	'_'            reduce using rule 85
	'not'          reduce using rule 85
	'{'            reduce using rule 85
	L_Pident       reduce using rule 85
	L_Pint         reduce using rule 85
	L_Pbool        reduce using rule 85
	L_Pstring      reduce using rule 85
	L_Preal        reduce using rule 85
	L_Pchar        reduce using rule 85


State 67

	Assignment_Op -> '^=' .                             (rule 91)

	'&'            reduce using rule 91
	'('            reduce using rule 91
	'++'           reduce using rule 91
	'-'            reduce using rule 91
	'--'           reduce using rule 91
	'_'            reduce using rule 91
	'not'          reduce using rule 91
	'{'            reduce using rule 91
	L_Pident       reduce using rule 91
	L_Pint         reduce using rule 91
	L_Pbool        reduce using rule 91
	L_Pstring      reduce using rule 91
	L_Preal        reduce using rule 91
	L_Pchar        reduce using rule 91


State 68

	Assignment_Op -> '|=' .                             (rule 93)

	'&'            reduce using rule 93
	'('            reduce using rule 93
	'++'           reduce using rule 93
	'-'            reduce using rule 93
	'--'           reduce using rule 93
	'_'            reduce using rule 93
	'not'          reduce using rule 93
	'{'            reduce using rule 93
	L_Pident       reduce using rule 93
	L_Pint         reduce using rule 93
	L_Pbool        reduce using rule 93
	L_Pstring      reduce using rule 93
	L_Preal        reduce using rule 93
	L_Pchar        reduce using rule 93


State 69

	Exp -> Exp '%' . Exp                                (rule 63)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 116
	Lexp           goto state 13

State 70

	Exp -> Exp '*' . Exp                                (rule 60)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 115
	Lexp           goto state 13

State 71

	Exp -> Exp '+' . Exp                                (rule 58)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 114
	Lexp           goto state 13

State 72

	Lexp -> Exp '++' .                                  (rule 83)

	'%'            reduce using rule 83
	'%='           reduce using rule 83
	'&'            reduce using rule 83
	'&='           reduce using rule 83
	'('            reduce using rule 83
	')'            reduce using rule 83
	'*'            reduce using rule 83
	'*='           reduce using rule 83
	'+'            reduce using rule 83
	'++'           reduce using rule 83
	'+='           reduce using rule 83
	','            reduce using rule 83
	'-'            reduce using rule 83
	'--'           reduce using rule 83
	'-='           reduce using rule 83
	'/'            reduce using rule 83
	'/='           reduce using rule 83
	'<'            reduce using rule 83
	'<='           reduce using rule 83
	'='            reduce using rule 83
	'=='           reduce using rule 83
	'>'            reduce using rule 83
	'>='           reduce using rule 83
	'^'            reduce using rule 83
	'^='           reduce using rule 83
	'_'            reduce using rule 83
	'and'          reduce using rule 83
	'boolean'      reduce using rule 83
	'character'    reduce using rule 83
	'do'           reduce using rule 83
	'else'         reduce using rule 83
	'end'          reduce using rule 83
	'float'        reduce using rule 83
	'function'     reduce using rule 83
	'if'           reduce using rule 83
	'integer'      reduce using rule 83
	'not'          reduce using rule 83
	'or'           reduce using rule 83
	'pointer'      reduce using rule 83
	'repeat'       reduce using rule 83
	'return'       reduce using rule 83
	'string'       reduce using rule 83
	'then'         reduce using rule 83
	'until'        reduce using rule 83
	'while'        reduce using rule 83
	'{'            reduce using rule 83
	'{}'           reduce using rule 83
	'|='           reduce using rule 83
	'}'            reduce using rule 83
	'~='           reduce using rule 83
	L_Pident       reduce using rule 83
	L_Pint         reduce using rule 83
	L_Pbool        reduce using rule 83
	L_Pstring      reduce using rule 83
	L_Preal        reduce using rule 83
	L_Pchar        reduce using rule 83
	%eof           reduce using rule 83


State 73

	Exp -> Exp '-' . Exp                                (rule 59)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 113
	Lexp           goto state 13

State 74

	Lexp -> Exp '--' .                                  (rule 84)

	'%'            reduce using rule 84
	'%='           reduce using rule 84
	'&'            reduce using rule 84
	'&='           reduce using rule 84
	'('            reduce using rule 84
	')'            reduce using rule 84
	'*'            reduce using rule 84
	'*='           reduce using rule 84
	'+'            reduce using rule 84
	'++'           reduce using rule 84
	'+='           reduce using rule 84
	','            reduce using rule 84
	'-'            reduce using rule 84
	'--'           reduce using rule 84
	'-='           reduce using rule 84
	'/'            reduce using rule 84
	'/='           reduce using rule 84
	'<'            reduce using rule 84
	'<='           reduce using rule 84
	'='            reduce using rule 84
	'=='           reduce using rule 84
	'>'            reduce using rule 84
	'>='           reduce using rule 84
	'^'            reduce using rule 84
	'^='           reduce using rule 84
	'_'            reduce using rule 84
	'and'          reduce using rule 84
	'boolean'      reduce using rule 84
	'character'    reduce using rule 84
	'do'           reduce using rule 84
	'else'         reduce using rule 84
	'end'          reduce using rule 84
	'float'        reduce using rule 84
	'function'     reduce using rule 84
	'if'           reduce using rule 84
	'integer'      reduce using rule 84
	'not'          reduce using rule 84
	'or'           reduce using rule 84
	'pointer'      reduce using rule 84
	'repeat'       reduce using rule 84
	'return'       reduce using rule 84
	'string'       reduce using rule 84
	'then'         reduce using rule 84
	'until'        reduce using rule 84
	'while'        reduce using rule 84
	'{'            reduce using rule 84
	'{}'           reduce using rule 84
	'|='           reduce using rule 84
	'}'            reduce using rule 84
	'~='           reduce using rule 84
	L_Pident       reduce using rule 84
	L_Pint         reduce using rule 84
	L_Pbool        reduce using rule 84
	L_Pstring      reduce using rule 84
	L_Preal        reduce using rule 84
	L_Pchar        reduce using rule 84
	%eof           reduce using rule 84


State 75

	Exp -> Exp '/' . Exp                                (rule 61)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 112
	Lexp           goto state 13

State 76

	Exp -> Exp '<' . Exp                                (rule 54)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 111
	Lexp           goto state 13

State 77

	Exp -> Exp '<=' . Exp                               (rule 56)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 110
	Lexp           goto state 13

State 78

	Exp -> Exp '==' . Exp                               (rule 52)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 109
	Lexp           goto state 13

State 79

	Exp -> Exp '>' . Exp                                (rule 55)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 108
	Lexp           goto state 13

State 80

	Exp -> Exp '>=' . Exp                               (rule 57)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 107
	Lexp           goto state 13

State 81

	Exp -> Exp '^' . Exp                                (rule 62)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 106
	Lexp           goto state 13

State 82

	Exp -> Exp 'and' . Exp                              (rule 51)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 105
	Lexp           goto state 13

State 83

	Exp -> Exp 'or' . Exp                               (rule 50)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 104
	Lexp           goto state 13

State 84

	Exp -> Exp '~=' . Exp                               (rule 53)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 103
	Lexp           goto state 13

State 85

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	ListExp -> Exp .                                    (rule 75)
	ListExp -> Exp . ',' ListExp                        (rule 76)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	')'            reduce using rule 75
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	','            shift, and enter state 102
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'and'          shift, and enter state 82
	'or'           shift, and enter state 83
	'}'            reduce using rule 75
	'~='           shift, and enter state 84


State 86

	Exp -> '{' ListExp . '}'                            (rule 67)

	'}'            shift, and enter state 101


State 87

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Exp -> 'not' Exp .                                  (rule 66)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 66
	'&'            reduce using rule 66
	'&='           reduce using rule 66
	'('            reduce using rule 66
	')'            reduce using rule 66
	'*'            shift, and enter state 70
	'*='           reduce using rule 66
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 66
	','            reduce using rule 66
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 66
	'/'            shift, and enter state 75
	'/='           reduce using rule 66
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'='            reduce using rule 66
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'^='           reduce using rule 66
	'_'            reduce using rule 66
	'and'          reduce using rule 66
	'boolean'      reduce using rule 66
	'character'    reduce using rule 66
	'do'           reduce using rule 66
	'else'         reduce using rule 66
	'end'          reduce using rule 66
	'float'        reduce using rule 66
	'function'     reduce using rule 66
	'if'           reduce using rule 66
	'integer'      reduce using rule 66
	'not'          reduce using rule 66
	'or'           reduce using rule 66
	'pointer'      reduce using rule 66
	'repeat'       reduce using rule 66
	'return'       reduce using rule 66
	'string'       reduce using rule 66
	'then'         reduce using rule 66
	'until'        reduce using rule 66
	'while'        reduce using rule 66
	'{'            reduce using rule 66
	'{}'           reduce using rule 66
	'|='           reduce using rule 66
	'}'            reduce using rule 66
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 66
	L_Pint         reduce using rule 66
	L_Pbool        reduce using rule 66
	L_Pstring      reduce using rule 66
	L_Preal        reduce using rule 66
	L_Pchar        reduce using rule 66
	%eof           reduce using rule 66


State 88

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> '_' Exp .                                   (rule 79)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 79
	'&'            reduce using rule 79
	'&='           reduce using rule 79
	'('            reduce using rule 79
	')'            reduce using rule 79
	'*'            shift, and enter state 70
	'*='           reduce using rule 79
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 79
	','            reduce using rule 79
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 79
	'/'            shift, and enter state 75
	'/='           reduce using rule 79
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'='            reduce using rule 79
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'^='           reduce using rule 79
	'_'            reduce using rule 79
	'and'          shift, and enter state 82
	'boolean'      reduce using rule 79
	'character'    reduce using rule 79
	'do'           reduce using rule 79
	'else'         reduce using rule 79
	'end'          reduce using rule 79
	'float'        reduce using rule 79
	'function'     reduce using rule 79
	'if'           reduce using rule 79
	'integer'      reduce using rule 79
	'not'          reduce using rule 79
	'or'           shift, and enter state 83
	'pointer'      reduce using rule 79
	'repeat'       reduce using rule 79
	'return'       reduce using rule 79
	'string'       reduce using rule 79
	'then'         reduce using rule 79
	'until'        reduce using rule 79
	'while'        reduce using rule 79
	'{'            reduce using rule 79
	'{}'           reduce using rule 79
	'|='           reduce using rule 79
	'}'            reduce using rule 79
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 79
	L_Pint         reduce using rule 79
	L_Pbool        reduce using rule 79
	L_Pstring      reduce using rule 79
	L_Preal        reduce using rule 79
	L_Pchar        reduce using rule 79
	%eof           reduce using rule 79


State 89

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> '--' Exp .                                  (rule 82)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 82
	'&'            reduce using rule 82
	'&='           reduce using rule 82
	'('            reduce using rule 82
	')'            reduce using rule 82
	'*'            shift, and enter state 70
	'*='           reduce using rule 82
	'+'            shift, and enter state 71
	'++'           fail
	'+='           reduce using rule 82
	','            reduce using rule 82
	'-'            shift, and enter state 73
	'--'           fail
	'-='           reduce using rule 82
	'/'            shift, and enter state 75
	'/='           reduce using rule 82
	'<'            reduce using rule 82
	'<='           reduce using rule 82
	'='            reduce using rule 82
	'=='           reduce using rule 82
	'>'            reduce using rule 82
	'>='           reduce using rule 82
	'^'            shift, and enter state 81
	'^='           reduce using rule 82
	'_'            reduce using rule 82
	'and'          reduce using rule 82
	'boolean'      reduce using rule 82
	'character'    reduce using rule 82
	'do'           reduce using rule 82
	'else'         reduce using rule 82
	'end'          reduce using rule 82
	'float'        reduce using rule 82
	'function'     reduce using rule 82
	'if'           reduce using rule 82
	'integer'      reduce using rule 82
	'not'          reduce using rule 82
	'or'           reduce using rule 82
	'pointer'      reduce using rule 82
	'repeat'       reduce using rule 82
	'return'       reduce using rule 82
	'string'       reduce using rule 82
	'then'         reduce using rule 82
	'until'        reduce using rule 82
	'while'        reduce using rule 82
	'{'            reduce using rule 82
	'{}'           reduce using rule 82
	'|='           reduce using rule 82
	'}'            reduce using rule 82
	'~='           reduce using rule 82
	L_Pident       reduce using rule 82
	L_Pint         reduce using rule 82
	L_Pbool        reduce using rule 82
	L_Pstring      reduce using rule 82
	L_Preal        reduce using rule 82
	L_Pchar        reduce using rule 82
	%eof           reduce using rule 82


State 90

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Exp -> '-' Exp .                                    (rule 65)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            reduce using rule 65
	'%='           reduce using rule 65
	'&'            reduce using rule 65
	'&='           reduce using rule 65
	'('            reduce using rule 65
	')'            reduce using rule 65
	'*'            reduce using rule 65
	'*='           reduce using rule 65
	'+'            reduce using rule 65
	'++'           reduce using rule 65
	'+='           reduce using rule 65
	','            reduce using rule 65
	'-'            reduce using rule 65
	'--'           reduce using rule 65
	'-='           reduce using rule 65
	'/'            reduce using rule 65
	'/='           reduce using rule 65
	'<'            reduce using rule 65
	'<='           reduce using rule 65
	'='            reduce using rule 65
	'=='           reduce using rule 65
	'>'            reduce using rule 65
	'>='           reduce using rule 65
	'^'            reduce using rule 65
	'^='           reduce using rule 65
	'_'            reduce using rule 65
	'and'          reduce using rule 65
	'boolean'      reduce using rule 65
	'character'    reduce using rule 65
	'do'           reduce using rule 65
	'else'         reduce using rule 65
	'end'          reduce using rule 65
	'float'        reduce using rule 65
	'function'     reduce using rule 65
	'if'           reduce using rule 65
	'integer'      reduce using rule 65
	'not'          reduce using rule 65
	'or'           reduce using rule 65
	'pointer'      reduce using rule 65
	'repeat'       reduce using rule 65
	'return'       reduce using rule 65
	'string'       reduce using rule 65
	'then'         reduce using rule 65
	'until'        reduce using rule 65
	'while'        reduce using rule 65
	'{'            reduce using rule 65
	'{}'           reduce using rule 65
	'|='           reduce using rule 65
	'}'            reduce using rule 65
	'~='           reduce using rule 65
	L_Pident       reduce using rule 65
	L_Pint         reduce using rule 65
	L_Pbool        reduce using rule 65
	L_Pstring      reduce using rule 65
	L_Preal        reduce using rule 65
	L_Pchar        reduce using rule 65
	%eof           reduce using rule 65


State 91

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> '++' Exp .                                  (rule 81)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 81
	'&'            reduce using rule 81
	'&='           reduce using rule 81
	'('            reduce using rule 81
	')'            reduce using rule 81
	'*'            shift, and enter state 70
	'*='           reduce using rule 81
	'+'            shift, and enter state 71
	'++'           fail
	'+='           reduce using rule 81
	','            reduce using rule 81
	'-'            shift, and enter state 73
	'--'           fail
	'-='           reduce using rule 81
	'/'            shift, and enter state 75
	'/='           reduce using rule 81
	'<'            reduce using rule 81
	'<='           reduce using rule 81
	'='            reduce using rule 81
	'=='           reduce using rule 81
	'>'            reduce using rule 81
	'>='           reduce using rule 81
	'^'            shift, and enter state 81
	'^='           reduce using rule 81
	'_'            reduce using rule 81
	'and'          reduce using rule 81
	'boolean'      reduce using rule 81
	'character'    reduce using rule 81
	'do'           reduce using rule 81
	'else'         reduce using rule 81
	'end'          reduce using rule 81
	'float'        reduce using rule 81
	'function'     reduce using rule 81
	'if'           reduce using rule 81
	'integer'      reduce using rule 81
	'not'          reduce using rule 81
	'or'           reduce using rule 81
	'pointer'      reduce using rule 81
	'repeat'       reduce using rule 81
	'return'       reduce using rule 81
	'string'       reduce using rule 81
	'then'         reduce using rule 81
	'until'        reduce using rule 81
	'while'        reduce using rule 81
	'{'            reduce using rule 81
	'{}'           reduce using rule 81
	'|='           reduce using rule 81
	'}'            reduce using rule 81
	'~='           reduce using rule 81
	L_Pident       reduce using rule 81
	L_Pint         reduce using rule 81
	L_Pbool        reduce using rule 81
	L_Pstring      reduce using rule 81
	L_Preal        reduce using rule 81
	L_Pchar        reduce using rule 81
	%eof           reduce using rule 81


State 92

	Exp -> '(' Exp . ')'                                (rule 48)
	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	')'            shift, and enter state 100
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'and'          shift, and enter state 82
	'or'           shift, and enter state 83
	'~='           shift, and enter state 84


State 93

	Exp -> Lexp .                                       (rule 68)
	Lexp -> '(' Lexp . ')'                              (rule 78)

	'%'            reduce using rule 68
	')'            shift, and enter state 99
			(reduce using rule 68)

	'*'            reduce using rule 68
	'+'            reduce using rule 68
	'++'           reduce using rule 68
	'-'            reduce using rule 68
	'--'           reduce using rule 68
	'/'            reduce using rule 68
	'<'            reduce using rule 68
	'<='           reduce using rule 68
	'=='           reduce using rule 68
	'>'            reduce using rule 68
	'>='           reduce using rule 68
	'^'            reduce using rule 68
	'and'          reduce using rule 68
	'or'           reduce using rule 68
	'~='           reduce using rule 68


State 94

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Exp -> '&' Exp .                                    (rule 64)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 64
	'&'            reduce using rule 64
	'&='           reduce using rule 64
	'('            reduce using rule 64
	')'            reduce using rule 64
	'*'            shift, and enter state 70
	'*='           reduce using rule 64
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 64
	','            reduce using rule 64
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 64
	'/'            shift, and enter state 75
	'/='           reduce using rule 64
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'='            reduce using rule 64
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'^='           reduce using rule 64
	'_'            reduce using rule 64
	'and'          shift, and enter state 82
	'boolean'      reduce using rule 64
	'character'    reduce using rule 64
	'do'           reduce using rule 64
	'else'         reduce using rule 64
	'end'          reduce using rule 64
	'float'        reduce using rule 64
	'function'     reduce using rule 64
	'if'           reduce using rule 64
	'integer'      reduce using rule 64
	'not'          reduce using rule 64
	'or'           shift, and enter state 83
	'pointer'      reduce using rule 64
	'repeat'       reduce using rule 64
	'return'       reduce using rule 64
	'string'       reduce using rule 64
	'then'         reduce using rule 64
	'until'        reduce using rule 64
	'while'        reduce using rule 64
	'{'            reduce using rule 64
	'{}'           reduce using rule 64
	'|='           reduce using rule 64
	'}'            reduce using rule 64
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 64
	L_Pint         reduce using rule 64
	L_Pbool        reduce using rule 64
	L_Pstring      reduce using rule 64
	L_Preal        reduce using rule 64
	L_Pchar        reduce using rule 64
	%eof           reduce using rule 64


State 95

	Exp -> Pident '(' . ListExp ')'                     (rule 49)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	')'            reduce using rule 74
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 85
	ListExp        goto state 98
	Lexp           goto state 13

State 96

	Lexp -> Pident '{' . Exp '}'                        (rule 80)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 97
	Lexp           goto state 13

State 97

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Pident '{' Exp . '}'                        (rule 80)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'and'          shift, and enter state 82
	'or'           shift, and enter state 83
	'}'            shift, and enter state 146
	'~='           shift, and enter state 84


State 98

	Exp -> Pident '(' ListExp . ')'                     (rule 49)

	')'            shift, and enter state 145


State 99

	Lexp -> '(' Lexp ')' .                              (rule 78)

	'%'            reduce using rule 78
	'%='           reduce using rule 78
	'&'            reduce using rule 78
	'&='           reduce using rule 78
	'('            reduce using rule 78
	')'            reduce using rule 78
	'*'            reduce using rule 78
	'*='           reduce using rule 78
	'+'            reduce using rule 78
	'++'           reduce using rule 78
	'+='           reduce using rule 78
	','            reduce using rule 78
	'-'            reduce using rule 78
	'--'           reduce using rule 78
	'-='           reduce using rule 78
	'/'            reduce using rule 78
	'/='           reduce using rule 78
	'<'            reduce using rule 78
	'<='           reduce using rule 78
	'='            reduce using rule 78
	'=='           reduce using rule 78
	'>'            reduce using rule 78
	'>='           reduce using rule 78
	'^'            reduce using rule 78
	'^='           reduce using rule 78
	'_'            reduce using rule 78
	'and'          reduce using rule 78
	'boolean'      reduce using rule 78
	'character'    reduce using rule 78
	'do'           reduce using rule 78
	'else'         reduce using rule 78
	'end'          reduce using rule 78
	'float'        reduce using rule 78
	'function'     reduce using rule 78
	'if'           reduce using rule 78
	'integer'      reduce using rule 78
	'not'          reduce using rule 78
	'or'           reduce using rule 78
	'pointer'      reduce using rule 78
	'repeat'       reduce using rule 78
	'return'       reduce using rule 78
	'string'       reduce using rule 78
	'then'         reduce using rule 78
	'until'        reduce using rule 78
	'while'        reduce using rule 78
	'{'            reduce using rule 78
	'{}'           reduce using rule 78
	'|='           reduce using rule 78
	'}'            reduce using rule 78
	'~='           reduce using rule 78
	L_Pident       reduce using rule 78
	L_Pint         reduce using rule 78
	L_Pbool        reduce using rule 78
	L_Pstring      reduce using rule 78
	L_Preal        reduce using rule 78
	L_Pchar        reduce using rule 78
	%eof           reduce using rule 78


State 100

	Exp -> '(' Exp ')' .                                (rule 48)

	'%'            reduce using rule 48
	'%='           reduce using rule 48
	'&'            reduce using rule 48
	'&='           reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'*'            reduce using rule 48
	'*='           reduce using rule 48
	'+'            reduce using rule 48
	'++'           reduce using rule 48
	'+='           reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'--'           reduce using rule 48
	'-='           reduce using rule 48
	'/'            reduce using rule 48
	'/='           reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'='            reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'^'            reduce using rule 48
	'^='           reduce using rule 48
	'_'            reduce using rule 48
	'and'          reduce using rule 48
	'boolean'      reduce using rule 48
	'character'    reduce using rule 48
	'do'           reduce using rule 48
	'else'         reduce using rule 48
	'end'          reduce using rule 48
	'float'        reduce using rule 48
	'function'     reduce using rule 48
	'if'           reduce using rule 48
	'integer'      reduce using rule 48
	'not'          reduce using rule 48
	'or'           reduce using rule 48
	'pointer'      reduce using rule 48
	'repeat'       reduce using rule 48
	'return'       reduce using rule 48
	'string'       reduce using rule 48
	'then'         reduce using rule 48
	'until'        reduce using rule 48
	'while'        reduce using rule 48
	'{'            reduce using rule 48
	'{}'           reduce using rule 48
	'|='           reduce using rule 48
	'}'            reduce using rule 48
	'~='           reduce using rule 48
	L_Pident       reduce using rule 48
	L_Pint         reduce using rule 48
	L_Pbool        reduce using rule 48
	L_Pstring      reduce using rule 48
	L_Preal        reduce using rule 48
	L_Pchar        reduce using rule 48
	%eof           reduce using rule 48


State 101

	Exp -> '{' ListExp '}' .                            (rule 67)

	'%'            reduce using rule 67
	'%='           reduce using rule 67
	'&'            reduce using rule 67
	'&='           reduce using rule 67
	'('            reduce using rule 67
	')'            reduce using rule 67
	'*'            reduce using rule 67
	'*='           reduce using rule 67
	'+'            reduce using rule 67
	'++'           reduce using rule 67
	'+='           reduce using rule 67
	','            reduce using rule 67
	'-'            reduce using rule 67
	'--'           reduce using rule 67
	'-='           reduce using rule 67
	'/'            reduce using rule 67
	'/='           reduce using rule 67
	'<'            reduce using rule 67
	'<='           reduce using rule 67
	'='            reduce using rule 67
	'=='           reduce using rule 67
	'>'            reduce using rule 67
	'>='           reduce using rule 67
	'^'            reduce using rule 67
	'^='           reduce using rule 67
	'_'            reduce using rule 67
	'and'          reduce using rule 67
	'boolean'      reduce using rule 67
	'character'    reduce using rule 67
	'do'           reduce using rule 67
	'else'         reduce using rule 67
	'end'          reduce using rule 67
	'float'        reduce using rule 67
	'function'     reduce using rule 67
	'if'           reduce using rule 67
	'integer'      reduce using rule 67
	'not'          reduce using rule 67
	'or'           reduce using rule 67
	'pointer'      reduce using rule 67
	'repeat'       reduce using rule 67
	'return'       reduce using rule 67
	'string'       reduce using rule 67
	'then'         reduce using rule 67
	'until'        reduce using rule 67
	'while'        reduce using rule 67
	'{'            reduce using rule 67
	'{}'           reduce using rule 67
	'|='           reduce using rule 67
	'}'            reduce using rule 67
	'~='           reduce using rule 67
	L_Pident       reduce using rule 67
	L_Pint         reduce using rule 67
	L_Pbool        reduce using rule 67
	L_Pstring      reduce using rule 67
	L_Preal        reduce using rule 67
	L_Pchar        reduce using rule 67
	%eof           reduce using rule 67


State 102

	ListExp -> Exp ',' . ListExp                        (rule 76)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	')'            reduce using rule 74
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	'}'            reduce using rule 74
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 85
	ListExp        goto state 144
	Lexp           goto state 13

State 103

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp '~=' Exp .                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 53
	'&'            reduce using rule 53
	'&='           reduce using rule 53
	'('            reduce using rule 53
	')'            reduce using rule 53
	'*'            shift, and enter state 70
	'*='           reduce using rule 53
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 53
	','            reduce using rule 53
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 53
	'/'            shift, and enter state 75
	'/='           reduce using rule 53
	'<'            fail
	'<='           fail
	'='            reduce using rule 53
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 81
	'^='           reduce using rule 53
	'_'            reduce using rule 53
	'and'          reduce using rule 53
	'boolean'      reduce using rule 53
	'character'    reduce using rule 53
	'do'           reduce using rule 53
	'else'         reduce using rule 53
	'end'          reduce using rule 53
	'float'        reduce using rule 53
	'function'     reduce using rule 53
	'if'           reduce using rule 53
	'integer'      reduce using rule 53
	'not'          reduce using rule 53
	'or'           reduce using rule 53
	'pointer'      reduce using rule 53
	'repeat'       reduce using rule 53
	'return'       reduce using rule 53
	'string'       reduce using rule 53
	'then'         reduce using rule 53
	'until'        reduce using rule 53
	'while'        reduce using rule 53
	'{'            reduce using rule 53
	'{}'           reduce using rule 53
	'|='           reduce using rule 53
	'}'            reduce using rule 53
	'~='           fail
	L_Pident       reduce using rule 53
	L_Pint         reduce using rule 53
	L_Pbool        reduce using rule 53
	L_Pstring      reduce using rule 53
	L_Preal        reduce using rule 53
	L_Pchar        reduce using rule 53
	%eof           reduce using rule 53


State 104

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp 'or' Exp .                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 50
	'&'            reduce using rule 50
	'&='           reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'*'            shift, and enter state 70
	'*='           reduce using rule 50
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 50
	','            reduce using rule 50
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 50
	'/'            shift, and enter state 75
	'/='           reduce using rule 50
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'='            reduce using rule 50
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'^='           reduce using rule 50
	'_'            reduce using rule 50
	'and'          shift, and enter state 82
	'boolean'      reduce using rule 50
	'character'    reduce using rule 50
	'do'           reduce using rule 50
	'else'         reduce using rule 50
	'end'          reduce using rule 50
	'float'        reduce using rule 50
	'function'     reduce using rule 50
	'if'           reduce using rule 50
	'integer'      reduce using rule 50
	'not'          reduce using rule 50
	'or'           reduce using rule 50
	'pointer'      reduce using rule 50
	'repeat'       reduce using rule 50
	'return'       reduce using rule 50
	'string'       reduce using rule 50
	'then'         reduce using rule 50
	'until'        reduce using rule 50
	'while'        reduce using rule 50
	'{'            reduce using rule 50
	'{}'           reduce using rule 50
	'|='           reduce using rule 50
	'}'            reduce using rule 50
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 50
	L_Pint         reduce using rule 50
	L_Pbool        reduce using rule 50
	L_Pstring      reduce using rule 50
	L_Preal        reduce using rule 50
	L_Pchar        reduce using rule 50
	%eof           reduce using rule 50


State 105

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp 'and' Exp .                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 51
	'&'            reduce using rule 51
	'&='           reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'*'            shift, and enter state 70
	'*='           reduce using rule 51
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 51
	','            reduce using rule 51
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 51
	'/'            shift, and enter state 75
	'/='           reduce using rule 51
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'='            reduce using rule 51
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'^='           reduce using rule 51
	'_'            reduce using rule 51
	'and'          reduce using rule 51
	'boolean'      reduce using rule 51
	'character'    reduce using rule 51
	'do'           reduce using rule 51
	'else'         reduce using rule 51
	'end'          reduce using rule 51
	'float'        reduce using rule 51
	'function'     reduce using rule 51
	'if'           reduce using rule 51
	'integer'      reduce using rule 51
	'not'          reduce using rule 51
	'or'           reduce using rule 51
	'pointer'      reduce using rule 51
	'repeat'       reduce using rule 51
	'return'       reduce using rule 51
	'string'       reduce using rule 51
	'then'         reduce using rule 51
	'until'        reduce using rule 51
	'while'        reduce using rule 51
	'{'            reduce using rule 51
	'{}'           reduce using rule 51
	'|='           reduce using rule 51
	'}'            reduce using rule 51
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 51
	L_Pint         reduce using rule 51
	L_Pbool        reduce using rule 51
	L_Pstring      reduce using rule 51
	L_Preal        reduce using rule 51
	L_Pchar        reduce using rule 51
	%eof           reduce using rule 51


State 106

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp '^' Exp .                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            reduce using rule 62
	'%='           reduce using rule 62
	'&'            reduce using rule 62
	'&='           reduce using rule 62
	'('            reduce using rule 62
	')'            reduce using rule 62
	'*'            reduce using rule 62
	'*='           reduce using rule 62
	'+'            reduce using rule 62
	'++'           reduce using rule 62
	'+='           reduce using rule 62
	','            reduce using rule 62
	'-'            reduce using rule 62
	'--'           reduce using rule 62
	'-='           reduce using rule 62
	'/'            reduce using rule 62
	'/='           reduce using rule 62
	'<'            reduce using rule 62
	'<='           reduce using rule 62
	'='            reduce using rule 62
	'=='           reduce using rule 62
	'>'            reduce using rule 62
	'>='           reduce using rule 62
	'^'            reduce using rule 62
	'^='           reduce using rule 62
	'_'            reduce using rule 62
	'and'          reduce using rule 62
	'boolean'      reduce using rule 62
	'character'    reduce using rule 62
	'do'           reduce using rule 62
	'else'         reduce using rule 62
	'end'          reduce using rule 62
	'float'        reduce using rule 62
	'function'     reduce using rule 62
	'if'           reduce using rule 62
	'integer'      reduce using rule 62
	'not'          reduce using rule 62
	'or'           reduce using rule 62
	'pointer'      reduce using rule 62
	'repeat'       reduce using rule 62
	'return'       reduce using rule 62
	'string'       reduce using rule 62
	'then'         reduce using rule 62
	'until'        reduce using rule 62
	'while'        reduce using rule 62
	'{'            reduce using rule 62
	'{}'           reduce using rule 62
	'|='           reduce using rule 62
	'}'            reduce using rule 62
	'~='           reduce using rule 62
	L_Pident       reduce using rule 62
	L_Pint         reduce using rule 62
	L_Pbool        reduce using rule 62
	L_Pstring      reduce using rule 62
	L_Preal        reduce using rule 62
	L_Pchar        reduce using rule 62
	%eof           reduce using rule 62


State 107

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp '>=' Exp .                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 57
	'&'            reduce using rule 57
	'&='           reduce using rule 57
	'('            reduce using rule 57
	')'            reduce using rule 57
	'*'            shift, and enter state 70
	'*='           reduce using rule 57
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 57
	','            reduce using rule 57
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 57
	'/'            shift, and enter state 75
	'/='           reduce using rule 57
	'<'            fail
	'<='           fail
	'='            reduce using rule 57
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 81
	'^='           reduce using rule 57
	'_'            reduce using rule 57
	'and'          reduce using rule 57
	'boolean'      reduce using rule 57
	'character'    reduce using rule 57
	'do'           reduce using rule 57
	'else'         reduce using rule 57
	'end'          reduce using rule 57
	'float'        reduce using rule 57
	'function'     reduce using rule 57
	'if'           reduce using rule 57
	'integer'      reduce using rule 57
	'not'          reduce using rule 57
	'or'           reduce using rule 57
	'pointer'      reduce using rule 57
	'repeat'       reduce using rule 57
	'return'       reduce using rule 57
	'string'       reduce using rule 57
	'then'         reduce using rule 57
	'until'        reduce using rule 57
	'while'        reduce using rule 57
	'{'            reduce using rule 57
	'{}'           reduce using rule 57
	'|='           reduce using rule 57
	'}'            reduce using rule 57
	'~='           fail
	L_Pident       reduce using rule 57
	L_Pint         reduce using rule 57
	L_Pbool        reduce using rule 57
	L_Pstring      reduce using rule 57
	L_Preal        reduce using rule 57
	L_Pchar        reduce using rule 57
	%eof           reduce using rule 57


State 108

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp '>' Exp .                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 55
	'&'            reduce using rule 55
	'&='           reduce using rule 55
	'('            reduce using rule 55
	')'            reduce using rule 55
	'*'            shift, and enter state 70
	'*='           reduce using rule 55
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 55
	','            reduce using rule 55
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 55
	'/'            shift, and enter state 75
	'/='           reduce using rule 55
	'<'            fail
	'<='           fail
	'='            reduce using rule 55
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 81
	'^='           reduce using rule 55
	'_'            reduce using rule 55
	'and'          reduce using rule 55
	'boolean'      reduce using rule 55
	'character'    reduce using rule 55
	'do'           reduce using rule 55
	'else'         reduce using rule 55
	'end'          reduce using rule 55
	'float'        reduce using rule 55
	'function'     reduce using rule 55
	'if'           reduce using rule 55
	'integer'      reduce using rule 55
	'not'          reduce using rule 55
	'or'           reduce using rule 55
	'pointer'      reduce using rule 55
	'repeat'       reduce using rule 55
	'return'       reduce using rule 55
	'string'       reduce using rule 55
	'then'         reduce using rule 55
	'until'        reduce using rule 55
	'while'        reduce using rule 55
	'{'            reduce using rule 55
	'{}'           reduce using rule 55
	'|='           reduce using rule 55
	'}'            reduce using rule 55
	'~='           fail
	L_Pident       reduce using rule 55
	L_Pint         reduce using rule 55
	L_Pbool        reduce using rule 55
	L_Pstring      reduce using rule 55
	L_Preal        reduce using rule 55
	L_Pchar        reduce using rule 55
	%eof           reduce using rule 55


State 109

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp '==' Exp .                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 52
	'&'            reduce using rule 52
	'&='           reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52
	'*'            shift, and enter state 70
	'*='           reduce using rule 52
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 52
	','            reduce using rule 52
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 52
	'/'            shift, and enter state 75
	'/='           reduce using rule 52
	'<'            fail
	'<='           fail
	'='            reduce using rule 52
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 81
	'^='           reduce using rule 52
	'_'            reduce using rule 52
	'and'          reduce using rule 52
	'boolean'      reduce using rule 52
	'character'    reduce using rule 52
	'do'           reduce using rule 52
	'else'         reduce using rule 52
	'end'          reduce using rule 52
	'float'        reduce using rule 52
	'function'     reduce using rule 52
	'if'           reduce using rule 52
	'integer'      reduce using rule 52
	'not'          reduce using rule 52
	'or'           reduce using rule 52
	'pointer'      reduce using rule 52
	'repeat'       reduce using rule 52
	'return'       reduce using rule 52
	'string'       reduce using rule 52
	'then'         reduce using rule 52
	'until'        reduce using rule 52
	'while'        reduce using rule 52
	'{'            reduce using rule 52
	'{}'           reduce using rule 52
	'|='           reduce using rule 52
	'}'            reduce using rule 52
	'~='           fail
	L_Pident       reduce using rule 52
	L_Pint         reduce using rule 52
	L_Pbool        reduce using rule 52
	L_Pstring      reduce using rule 52
	L_Preal        reduce using rule 52
	L_Pchar        reduce using rule 52
	%eof           reduce using rule 52


State 110

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp '<=' Exp .                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 56
	'&'            reduce using rule 56
	'&='           reduce using rule 56
	'('            reduce using rule 56
	')'            reduce using rule 56
	'*'            shift, and enter state 70
	'*='           reduce using rule 56
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 56
	','            reduce using rule 56
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 56
	'/'            shift, and enter state 75
	'/='           reduce using rule 56
	'<'            fail
	'<='           fail
	'='            reduce using rule 56
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 81
	'^='           reduce using rule 56
	'_'            reduce using rule 56
	'and'          reduce using rule 56
	'boolean'      reduce using rule 56
	'character'    reduce using rule 56
	'do'           reduce using rule 56
	'else'         reduce using rule 56
	'end'          reduce using rule 56
	'float'        reduce using rule 56
	'function'     reduce using rule 56
	'if'           reduce using rule 56
	'integer'      reduce using rule 56
	'not'          reduce using rule 56
	'or'           reduce using rule 56
	'pointer'      reduce using rule 56
	'repeat'       reduce using rule 56
	'return'       reduce using rule 56
	'string'       reduce using rule 56
	'then'         reduce using rule 56
	'until'        reduce using rule 56
	'while'        reduce using rule 56
	'{'            reduce using rule 56
	'{}'           reduce using rule 56
	'|='           reduce using rule 56
	'}'            reduce using rule 56
	'~='           fail
	L_Pident       reduce using rule 56
	L_Pint         reduce using rule 56
	L_Pbool        reduce using rule 56
	L_Pstring      reduce using rule 56
	L_Preal        reduce using rule 56
	L_Pchar        reduce using rule 56
	%eof           reduce using rule 56


State 111

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp '<' Exp .                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 54
	'&'            reduce using rule 54
	'&='           reduce using rule 54
	'('            reduce using rule 54
	')'            reduce using rule 54
	'*'            shift, and enter state 70
	'*='           reduce using rule 54
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'+='           reduce using rule 54
	','            reduce using rule 54
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'-='           reduce using rule 54
	'/'            shift, and enter state 75
	'/='           reduce using rule 54
	'<'            fail
	'<='           fail
	'='            reduce using rule 54
	'=='           fail
	'>'            fail
	'>='           fail
	'^'            shift, and enter state 81
	'^='           reduce using rule 54
	'_'            reduce using rule 54
	'and'          reduce using rule 54
	'boolean'      reduce using rule 54
	'character'    reduce using rule 54
	'do'           reduce using rule 54
	'else'         reduce using rule 54
	'end'          reduce using rule 54
	'float'        reduce using rule 54
	'function'     reduce using rule 54
	'if'           reduce using rule 54
	'integer'      reduce using rule 54
	'not'          reduce using rule 54
	'or'           reduce using rule 54
	'pointer'      reduce using rule 54
	'repeat'       reduce using rule 54
	'return'       reduce using rule 54
	'string'       reduce using rule 54
	'then'         reduce using rule 54
	'until'        reduce using rule 54
	'while'        reduce using rule 54
	'{'            reduce using rule 54
	'{}'           reduce using rule 54
	'|='           reduce using rule 54
	'}'            reduce using rule 54
	'~='           fail
	L_Pident       reduce using rule 54
	L_Pint         reduce using rule 54
	L_Pbool        reduce using rule 54
	L_Pstring      reduce using rule 54
	L_Preal        reduce using rule 54
	L_Pchar        reduce using rule 54
	%eof           reduce using rule 54


State 112

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp '/' Exp .                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            reduce using rule 61
	'%='           reduce using rule 61
	'&'            reduce using rule 61
	'&='           reduce using rule 61
	'('            reduce using rule 61
	')'            reduce using rule 61
	'*'            reduce using rule 61
	'*='           reduce using rule 61
	'+'            reduce using rule 61
	'++'           reduce using rule 61
	'+='           reduce using rule 61
	','            reduce using rule 61
	'-'            reduce using rule 61
	'--'           reduce using rule 61
	'-='           reduce using rule 61
	'/'            reduce using rule 61
	'/='           reduce using rule 61
	'<'            reduce using rule 61
	'<='           reduce using rule 61
	'='            reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	'^'            shift, and enter state 81
	'^='           reduce using rule 61
	'_'            reduce using rule 61
	'and'          reduce using rule 61
	'boolean'      reduce using rule 61
	'character'    reduce using rule 61
	'do'           reduce using rule 61
	'else'         reduce using rule 61
	'end'          reduce using rule 61
	'float'        reduce using rule 61
	'function'     reduce using rule 61
	'if'           reduce using rule 61
	'integer'      reduce using rule 61
	'not'          reduce using rule 61
	'or'           reduce using rule 61
	'pointer'      reduce using rule 61
	'repeat'       reduce using rule 61
	'return'       reduce using rule 61
	'string'       reduce using rule 61
	'then'         reduce using rule 61
	'until'        reduce using rule 61
	'while'        reduce using rule 61
	'{'            reduce using rule 61
	'{}'           reduce using rule 61
	'|='           reduce using rule 61
	'}'            reduce using rule 61
	'~='           reduce using rule 61
	L_Pident       reduce using rule 61
	L_Pint         reduce using rule 61
	L_Pbool        reduce using rule 61
	L_Pstring      reduce using rule 61
	L_Preal        reduce using rule 61
	L_Pchar        reduce using rule 61
	%eof           reduce using rule 61


State 113

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp '-' Exp .                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 59
	'&'            reduce using rule 59
	'&='           reduce using rule 59
	'('            reduce using rule 59
	')'            reduce using rule 59
	'*'            shift, and enter state 70
	'*='           reduce using rule 59
	'+'            reduce using rule 59
	'++'           reduce using rule 59
	'+='           reduce using rule 59
	','            reduce using rule 59
	'-'            reduce using rule 59
	'--'           reduce using rule 59
	'-='           reduce using rule 59
	'/'            shift, and enter state 75
	'/='           reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'='            reduce using rule 59
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'^'            shift, and enter state 81
	'^='           reduce using rule 59
	'_'            reduce using rule 59
	'and'          reduce using rule 59
	'boolean'      reduce using rule 59
	'character'    reduce using rule 59
	'do'           reduce using rule 59
	'else'         reduce using rule 59
	'end'          reduce using rule 59
	'float'        reduce using rule 59
	'function'     reduce using rule 59
	'if'           reduce using rule 59
	'integer'      reduce using rule 59
	'not'          reduce using rule 59
	'or'           reduce using rule 59
	'pointer'      reduce using rule 59
	'repeat'       reduce using rule 59
	'return'       reduce using rule 59
	'string'       reduce using rule 59
	'then'         reduce using rule 59
	'until'        reduce using rule 59
	'while'        reduce using rule 59
	'{'            reduce using rule 59
	'{}'           reduce using rule 59
	'|='           reduce using rule 59
	'}'            reduce using rule 59
	'~='           reduce using rule 59
	L_Pident       reduce using rule 59
	L_Pint         reduce using rule 59
	L_Pbool        reduce using rule 59
	L_Pstring      reduce using rule 59
	L_Preal        reduce using rule 59
	L_Pchar        reduce using rule 59
	%eof           reduce using rule 59


State 114

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp '+' Exp .                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'%='           reduce using rule 58
	'&'            reduce using rule 58
	'&='           reduce using rule 58
	'('            reduce using rule 58
	')'            reduce using rule 58
	'*'            shift, and enter state 70
	'*='           reduce using rule 58
	'+'            reduce using rule 58
	'++'           reduce using rule 58
	'+='           reduce using rule 58
	','            reduce using rule 58
	'-'            reduce using rule 58
	'--'           reduce using rule 58
	'-='           reduce using rule 58
	'/'            shift, and enter state 75
	'/='           reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'='            reduce using rule 58
	'=='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'^'            shift, and enter state 81
	'^='           reduce using rule 58
	'_'            reduce using rule 58
	'and'          reduce using rule 58
	'boolean'      reduce using rule 58
	'character'    reduce using rule 58
	'do'           reduce using rule 58
	'else'         reduce using rule 58
	'end'          reduce using rule 58
	'float'        reduce using rule 58
	'function'     reduce using rule 58
	'if'           reduce using rule 58
	'integer'      reduce using rule 58
	'not'          reduce using rule 58
	'or'           reduce using rule 58
	'pointer'      reduce using rule 58
	'repeat'       reduce using rule 58
	'return'       reduce using rule 58
	'string'       reduce using rule 58
	'then'         reduce using rule 58
	'until'        reduce using rule 58
	'while'        reduce using rule 58
	'{'            reduce using rule 58
	'{}'           reduce using rule 58
	'|='           reduce using rule 58
	'}'            reduce using rule 58
	'~='           reduce using rule 58
	L_Pident       reduce using rule 58
	L_Pint         reduce using rule 58
	L_Pbool        reduce using rule 58
	L_Pstring      reduce using rule 58
	L_Preal        reduce using rule 58
	L_Pchar        reduce using rule 58
	%eof           reduce using rule 58


State 115

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp '*' Exp .                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            reduce using rule 60
	'%='           reduce using rule 60
	'&'            reduce using rule 60
	'&='           reduce using rule 60
	'('            reduce using rule 60
	')'            reduce using rule 60
	'*'            reduce using rule 60
	'*='           reduce using rule 60
	'+'            reduce using rule 60
	'++'           reduce using rule 60
	'+='           reduce using rule 60
	','            reduce using rule 60
	'-'            reduce using rule 60
	'--'           reduce using rule 60
	'-='           reduce using rule 60
	'/'            reduce using rule 60
	'/='           reduce using rule 60
	'<'            reduce using rule 60
	'<='           reduce using rule 60
	'='            reduce using rule 60
	'=='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'^'            shift, and enter state 81
	'^='           reduce using rule 60
	'_'            reduce using rule 60
	'and'          reduce using rule 60
	'boolean'      reduce using rule 60
	'character'    reduce using rule 60
	'do'           reduce using rule 60
	'else'         reduce using rule 60
	'end'          reduce using rule 60
	'float'        reduce using rule 60
	'function'     reduce using rule 60
	'if'           reduce using rule 60
	'integer'      reduce using rule 60
	'not'          reduce using rule 60
	'or'           reduce using rule 60
	'pointer'      reduce using rule 60
	'repeat'       reduce using rule 60
	'return'       reduce using rule 60
	'string'       reduce using rule 60
	'then'         reduce using rule 60
	'until'        reduce using rule 60
	'while'        reduce using rule 60
	'{'            reduce using rule 60
	'{}'           reduce using rule 60
	'|='           reduce using rule 60
	'}'            reduce using rule 60
	'~='           reduce using rule 60
	L_Pident       reduce using rule 60
	L_Pint         reduce using rule 60
	L_Pbool        reduce using rule 60
	L_Pstring      reduce using rule 60
	L_Preal        reduce using rule 60
	L_Pchar        reduce using rule 60
	%eof           reduce using rule 60


State 116

	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Exp -> Exp '%' Exp .                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            reduce using rule 63
	'%='           reduce using rule 63
	'&'            reduce using rule 63
	'&='           reduce using rule 63
	'('            reduce using rule 63
	')'            reduce using rule 63
	'*'            reduce using rule 63
	'*='           reduce using rule 63
	'+'            reduce using rule 63
	'++'           reduce using rule 63
	'+='           reduce using rule 63
	','            reduce using rule 63
	'-'            reduce using rule 63
	'--'           reduce using rule 63
	'-='           reduce using rule 63
	'/'            reduce using rule 63
	'/='           reduce using rule 63
	'<'            reduce using rule 63
	'<='           reduce using rule 63
	'='            reduce using rule 63
	'=='           reduce using rule 63
	'>'            reduce using rule 63
	'>='           reduce using rule 63
	'^'            shift, and enter state 81
	'^='           reduce using rule 63
	'_'            reduce using rule 63
	'and'          reduce using rule 63
	'boolean'      reduce using rule 63
	'character'    reduce using rule 63
	'do'           reduce using rule 63
	'else'         reduce using rule 63
	'end'          reduce using rule 63
	'float'        reduce using rule 63
	'function'     reduce using rule 63
	'if'           reduce using rule 63
	'integer'      reduce using rule 63
	'not'          reduce using rule 63
	'or'           reduce using rule 63
	'pointer'      reduce using rule 63
	'repeat'       reduce using rule 63
	'return'       reduce using rule 63
	'string'       reduce using rule 63
	'then'         reduce using rule 63
	'until'        reduce using rule 63
	'while'        reduce using rule 63
	'{'            reduce using rule 63
	'{}'           reduce using rule 63
	'|='           reduce using rule 63
	'}'            reduce using rule 63
	'~='           reduce using rule 63
	L_Pident       reduce using rule 63
	L_Pint         reduce using rule 63
	L_Pbool        reduce using rule 63
	L_Pstring      reduce using rule 63
	L_Preal        reduce using rule 63
	L_Pchar        reduce using rule 63
	%eof           reduce using rule 63


State 117

	Stm -> Lexp Assignment_Op Exp .                     (rule 37)
	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'&'            reduce using rule 37
	'('            reduce using rule 37
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
			(reduce using rule 37)

	'-'            shift, and enter state 73
			(reduce using rule 37)

	'--'           shift, and enter state 74
			(reduce using rule 37)

	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'_'            reduce using rule 37
	'and'          shift, and enter state 82
	'boolean'      reduce using rule 37
	'character'    reduce using rule 37
	'else'         reduce using rule 37
	'end'          reduce using rule 37
	'float'        reduce using rule 37
	'function'     reduce using rule 37
	'if'           reduce using rule 37
	'integer'      reduce using rule 37
	'not'          reduce using rule 37
	'or'           shift, and enter state 83
	'pointer'      reduce using rule 37
	'repeat'       reduce using rule 37
	'return'       reduce using rule 37
	'string'       reduce using rule 37
	'until'        reduce using rule 37
	'while'        reduce using rule 37
	'{'            reduce using rule 37
	'{}'           reduce using rule 37
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 37
	L_Pint         reduce using rule 37
	L_Pbool        reduce using rule 37
	L_Pstring      reduce using rule 37
	L_Preal        reduce using rule 37
	L_Pchar        reduce using rule 37
	%eof           reduce using rule 37


State 118

	Stm -> 'if' Exp 'then' . ListDecStm 'end'           (rule 40)
	Stm -> 'if' Exp 'then' . ListDecStm 'else' ListDecStm 'end'    (rule 41)

	'&'            reduce using rule 46
	'('            reduce using rule 46
	'++'           reduce using rule 46
	'-'            reduce using rule 46
	'--'           reduce using rule 46
	'_'            reduce using rule 46
	'boolean'      reduce using rule 46
	'character'    reduce using rule 46
	'else'         reduce using rule 46
	'end'          reduce using rule 46
	'float'        reduce using rule 46
	'function'     reduce using rule 46
	'if'           reduce using rule 46
	'integer'      reduce using rule 46
	'not'          reduce using rule 46
	'pointer'      reduce using rule 46
	'repeat'       reduce using rule 46
	'return'       reduce using rule 46
	'string'       reduce using rule 46
	'while'        reduce using rule 46
	'{'            reduce using rule 46
	'{}'           reduce using rule 46
	L_Pident       reduce using rule 46
	L_Pint         reduce using rule 46
	L_Pbool        reduce using rule 46
	L_Pstring      reduce using rule 46
	L_Preal        reduce using rule 46
	L_Pchar        reduce using rule 46

	ListDecStm     goto state 143

State 119

	DecStm -> Dec .                                     (rule 44)

	'&'            reduce using rule 44
	'('            reduce using rule 44
	'++'           reduce using rule 44
	'-'            reduce using rule 44
	'--'           reduce using rule 44
	'_'            reduce using rule 44
	'boolean'      reduce using rule 44
	'character'    reduce using rule 44
	'else'         reduce using rule 44
	'end'          reduce using rule 44
	'float'        reduce using rule 44
	'function'     reduce using rule 44
	'if'           reduce using rule 44
	'integer'      reduce using rule 44
	'not'          reduce using rule 44
	'pointer'      reduce using rule 44
	'repeat'       reduce using rule 44
	'return'       reduce using rule 44
	'string'       reduce using rule 44
	'until'        reduce using rule 44
	'while'        reduce using rule 44
	'{'            reduce using rule 44
	'{}'           reduce using rule 44
	L_Pident       reduce using rule 44
	L_Pint         reduce using rule 44
	L_Pbool        reduce using rule 44
	L_Pstring      reduce using rule 44
	L_Preal        reduce using rule 44
	L_Pchar        reduce using rule 44


State 120

	DecStm -> Stm .                                     (rule 45)

	'&'            reduce using rule 45
	'('            reduce using rule 45
	'++'           reduce using rule 45
	'-'            reduce using rule 45
	'--'           reduce using rule 45
	'_'            reduce using rule 45
	'boolean'      reduce using rule 45
	'character'    reduce using rule 45
	'else'         reduce using rule 45
	'end'          reduce using rule 45
	'float'        reduce using rule 45
	'function'     reduce using rule 45
	'if'           reduce using rule 45
	'integer'      reduce using rule 45
	'not'          reduce using rule 45
	'pointer'      reduce using rule 45
	'repeat'       reduce using rule 45
	'return'       reduce using rule 45
	'string'       reduce using rule 45
	'until'        reduce using rule 45
	'while'        reduce using rule 45
	'{'            reduce using rule 45
	'{}'           reduce using rule 45
	L_Pident       reduce using rule 45
	L_Pint         reduce using rule 45
	L_Pbool        reduce using rule 45
	L_Pstring      reduce using rule 45
	L_Preal        reduce using rule 45
	L_Pchar        reduce using rule 45


State 121

	ListDecStm -> ListDecStm DecStm .                   (rule 47)

	'&'            reduce using rule 47
	'('            reduce using rule 47
	'++'           reduce using rule 47
	'-'            reduce using rule 47
	'--'           reduce using rule 47
	'_'            reduce using rule 47
	'boolean'      reduce using rule 47
	'character'    reduce using rule 47
	'else'         reduce using rule 47
	'end'          reduce using rule 47
	'float'        reduce using rule 47
	'function'     reduce using rule 47
	'if'           reduce using rule 47
	'integer'      reduce using rule 47
	'not'          reduce using rule 47
	'pointer'      reduce using rule 47
	'repeat'       reduce using rule 47
	'return'       reduce using rule 47
	'string'       reduce using rule 47
	'until'        reduce using rule 47
	'while'        reduce using rule 47
	'{'            reduce using rule 47
	'{}'           reduce using rule 47
	L_Pident       reduce using rule 47
	L_Pint         reduce using rule 47
	L_Pbool        reduce using rule 47
	L_Pstring      reduce using rule 47
	L_Preal        reduce using rule 47
	L_Pchar        reduce using rule 47


State 122

	Stm -> 'repeat' ListDecStm 'until' . Exp            (rule 43)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 142
	Lexp           goto state 13

State 123

	Type_specifier -> '{' . Integer '}' Type_specifier    (rule 25)
	Exp -> '{' . ListExp '}'                            (rule 67)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	'}'            reduce using rule 74
	L_integ        shift, and enter state 5
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Integer        goto state 50
	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 85
	ListExp        goto state 86
	Lexp           goto state 13

State 124

	Stm -> 'while' Exp 'do' . ListDecStm 'end'          (rule 42)

	'&'            reduce using rule 46
	'('            reduce using rule 46
	'++'           reduce using rule 46
	'-'            reduce using rule 46
	'--'           reduce using rule 46
	'_'            reduce using rule 46
	'boolean'      reduce using rule 46
	'character'    reduce using rule 46
	'end'          reduce using rule 46
	'float'        reduce using rule 46
	'function'     reduce using rule 46
	'if'           reduce using rule 46
	'integer'      reduce using rule 46
	'not'          reduce using rule 46
	'pointer'      reduce using rule 46
	'repeat'       reduce using rule 46
	'return'       reduce using rule 46
	'string'       reduce using rule 46
	'while'        reduce using rule 46
	'{'            reduce using rule 46
	'{}'           reduce using rule 46
	L_Pident       reduce using rule 46
	L_Pint         reduce using rule 46
	L_Pbool        reduce using rule 46
	L_Pstring      reduce using rule 46
	L_Preal        reduce using rule 46
	L_Pchar        reduce using rule 46

	ListDecStm     goto state 141

State 125

	Dec -> Type_specifier Pident '=' . Exp              (rule 17)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'not'          shift, and enter state 20
	'{'            shift, and enter state 21
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Exp            goto state 140
	Lexp           goto state 13

State 126

	Dec -> 'function' Type_specifier Pident . '(' ListArgument ')' ListDecStm 'end'    (rule 14)

	'('            shift, and enter state 139


State 127

	Dec -> 'function' Pident '(' . ListArgument ')' ListDecStm 'end'    (rule 15)

	')'            reduce using rule 27
	'boolean'      reduce using rule 30
	'character'    reduce using rule 30
	'const'        shift, and enter state 133
	'float'        reduce using rule 30
	'integer'      reduce using rule 30
	'name'         shift, and enter state 134
	'pointer'      reduce using rule 30
	'ref'          shift, and enter state 135
	'res'          shift, and enter state 136
	'string'       reduce using rule 30
	'val'          shift, and enter state 137
	'valres'       shift, and enter state 138
	'{'            reduce using rule 30
	'{}'           reduce using rule 30

	Argument       goto state 130
	ListArgument   goto state 131
	Modality       goto state 132

State 128

	Type_specifier -> '{' Integer '}' . Type_specifier    (rule 25)

	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'float'        shift, and enter state 39
	'integer'      shift, and enter state 41
	'pointer'      shift, and enter state 42
	'string'       shift, and enter state 43
	'{'            shift, and enter state 44
	'{}'           shift, and enter state 45

	Type_specifier goto state 129

State 129

	Type_specifier -> '{' Integer '}' Type_specifier .    (rule 25)

	L_Pident       reduce using rule 25


State 130

	ListArgument -> Argument .                          (rule 28)
	ListArgument -> Argument . ',' ListArgument         (rule 29)

	')'            reduce using rule 28
	','            shift, and enter state 153


State 131

	Dec -> 'function' Pident '(' ListArgument . ')' ListDecStm 'end'    (rule 15)

	')'            shift, and enter state 152


State 132

	Argument -> Modality . Type_specifier Pident        (rule 26)

	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'float'        shift, and enter state 39
	'integer'      shift, and enter state 41
	'pointer'      shift, and enter state 42
	'string'       shift, and enter state 43
	'{'            shift, and enter state 44
	'{}'           shift, and enter state 45

	Type_specifier goto state 151

State 133

	Modality -> 'const' .                               (rule 35)

	'boolean'      reduce using rule 35
	'character'    reduce using rule 35
	'float'        reduce using rule 35
	'integer'      reduce using rule 35
	'pointer'      reduce using rule 35
	'string'       reduce using rule 35
	'{'            reduce using rule 35
	'{}'           reduce using rule 35


State 134

	Modality -> 'name' .                                (rule 34)

	'boolean'      reduce using rule 34
	'character'    reduce using rule 34
	'float'        reduce using rule 34
	'integer'      reduce using rule 34
	'pointer'      reduce using rule 34
	'string'       reduce using rule 34
	'{'            reduce using rule 34
	'{}'           reduce using rule 34


State 135

	Modality -> 'ref' .                                 (rule 36)

	'boolean'      reduce using rule 36
	'character'    reduce using rule 36
	'float'        reduce using rule 36
	'integer'      reduce using rule 36
	'pointer'      reduce using rule 36
	'string'       reduce using rule 36
	'{'            reduce using rule 36
	'{}'           reduce using rule 36


State 136

	Modality -> 'res' .                                 (rule 32)

	'boolean'      reduce using rule 32
	'character'    reduce using rule 32
	'float'        reduce using rule 32
	'integer'      reduce using rule 32
	'pointer'      reduce using rule 32
	'string'       reduce using rule 32
	'{'            reduce using rule 32
	'{}'           reduce using rule 32


State 137

	Modality -> 'val' .                                 (rule 31)

	'boolean'      reduce using rule 31
	'character'    reduce using rule 31
	'float'        reduce using rule 31
	'integer'      reduce using rule 31
	'pointer'      reduce using rule 31
	'string'       reduce using rule 31
	'{'            reduce using rule 31
	'{}'           reduce using rule 31


State 138

	Modality -> 'valres' .                              (rule 33)

	'boolean'      reduce using rule 33
	'character'    reduce using rule 33
	'float'        reduce using rule 33
	'integer'      reduce using rule 33
	'pointer'      reduce using rule 33
	'string'       reduce using rule 33
	'{'            reduce using rule 33
	'{}'           reduce using rule 33


State 139

	Dec -> 'function' Type_specifier Pident '(' . ListArgument ')' ListDecStm 'end'    (rule 14)

	')'            reduce using rule 27
	'boolean'      reduce using rule 30
	'character'    reduce using rule 30
	'const'        shift, and enter state 133
	'float'        reduce using rule 30
	'integer'      reduce using rule 30
	'name'         shift, and enter state 134
	'pointer'      reduce using rule 30
	'ref'          shift, and enter state 135
	'res'          shift, and enter state 136
	'string'       reduce using rule 30
	'val'          shift, and enter state 137
	'valres'       shift, and enter state 138
	'{'            reduce using rule 30
	'{}'           reduce using rule 30

	Argument       goto state 130
	ListArgument   goto state 150
	Modality       goto state 132

State 140

	Dec -> Type_specifier Pident '=' Exp .              (rule 17)
	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'&'            reduce using rule 17
	'('            reduce using rule 17
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
	'-'            shift, and enter state 73
	'--'           shift, and enter state 74
	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'_'            reduce using rule 17
	'and'          shift, and enter state 82
	'boolean'      reduce using rule 17
	'character'    reduce using rule 17
	'else'         reduce using rule 17
	'end'          reduce using rule 17
	'float'        reduce using rule 17
	'function'     reduce using rule 17
	'if'           reduce using rule 17
	'integer'      reduce using rule 17
	'not'          reduce using rule 17
	'or'           shift, and enter state 83
	'pointer'      reduce using rule 17
	'repeat'       reduce using rule 17
	'return'       reduce using rule 17
	'string'       reduce using rule 17
	'until'        reduce using rule 17
	'while'        reduce using rule 17
	'{'            reduce using rule 17
	'{}'           reduce using rule 17
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 17
	L_Pint         reduce using rule 17
	L_Pbool        reduce using rule 17
	L_Pstring      reduce using rule 17
	L_Preal        reduce using rule 17
	L_Pchar        reduce using rule 17
	%eof           reduce using rule 17


State 141

	Stm -> 'while' Exp 'do' ListDecStm . 'end'          (rule 42)
	ListDecStm -> ListDecStm . DecStm                   (rule 47)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'end'          shift, and enter state 149
	'float'        shift, and enter state 39
	'function'     shift, and enter state 40
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 41
	'not'          shift, and enter state 20
	'pointer'      shift, and enter state 42
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 43
	'while'        shift, and enter state 34
	'{'            shift, and enter state 123
	'{}'           shift, and enter state 45
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 119
	Type_specifier goto state 36
	Stm            goto state 120
	DecStm         goto state 121
	Exp            goto state 29
	Lexp           goto state 30

State 142

	Stm -> 'repeat' ListDecStm 'until' Exp .            (rule 43)
	Exp -> Exp . 'or' Exp                               (rule 50)
	Exp -> Exp . 'and' Exp                              (rule 51)
	Exp -> Exp . '==' Exp                               (rule 52)
	Exp -> Exp . '~=' Exp                               (rule 53)
	Exp -> Exp . '<' Exp                                (rule 54)
	Exp -> Exp . '>' Exp                                (rule 55)
	Exp -> Exp . '<=' Exp                               (rule 56)
	Exp -> Exp . '>=' Exp                               (rule 57)
	Exp -> Exp . '+' Exp                                (rule 58)
	Exp -> Exp . '-' Exp                                (rule 59)
	Exp -> Exp . '*' Exp                                (rule 60)
	Exp -> Exp . '/' Exp                                (rule 61)
	Exp -> Exp . '^' Exp                                (rule 62)
	Exp -> Exp . '%' Exp                                (rule 63)
	Lexp -> Exp . '++'                                  (rule 83)
	Lexp -> Exp . '--'                                  (rule 84)

	'%'            shift, and enter state 69
	'&'            reduce using rule 43
	'('            reduce using rule 43
	'*'            shift, and enter state 70
	'+'            shift, and enter state 71
	'++'           shift, and enter state 72
			(reduce using rule 43)

	'-'            shift, and enter state 73
			(reduce using rule 43)

	'--'           shift, and enter state 74
			(reduce using rule 43)

	'/'            shift, and enter state 75
	'<'            shift, and enter state 76
	'<='           shift, and enter state 77
	'=='           shift, and enter state 78
	'>'            shift, and enter state 79
	'>='           shift, and enter state 80
	'^'            shift, and enter state 81
	'_'            reduce using rule 43
	'and'          shift, and enter state 82
	'boolean'      reduce using rule 43
	'character'    reduce using rule 43
	'else'         reduce using rule 43
	'end'          reduce using rule 43
	'float'        reduce using rule 43
	'function'     reduce using rule 43
	'if'           reduce using rule 43
	'integer'      reduce using rule 43
	'not'          reduce using rule 43
	'or'           shift, and enter state 83
	'pointer'      reduce using rule 43
	'repeat'       reduce using rule 43
	'return'       reduce using rule 43
	'string'       reduce using rule 43
	'until'        reduce using rule 43
	'while'        reduce using rule 43
	'{'            reduce using rule 43
	'{}'           reduce using rule 43
	'~='           shift, and enter state 84
	L_Pident       reduce using rule 43
	L_Pint         reduce using rule 43
	L_Pbool        reduce using rule 43
	L_Pstring      reduce using rule 43
	L_Preal        reduce using rule 43
	L_Pchar        reduce using rule 43
	%eof           reduce using rule 43


State 143

	Stm -> 'if' Exp 'then' ListDecStm . 'end'           (rule 40)
	Stm -> 'if' Exp 'then' ListDecStm . 'else' ListDecStm 'end'    (rule 41)
	ListDecStm -> ListDecStm . DecStm                   (rule 47)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'else'         shift, and enter state 147
	'end'          shift, and enter state 148
	'float'        shift, and enter state 39
	'function'     shift, and enter state 40
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 41
	'not'          shift, and enter state 20
	'pointer'      shift, and enter state 42
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 43
	'while'        shift, and enter state 34
	'{'            shift, and enter state 123
	'{}'           shift, and enter state 45
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 119
	Type_specifier goto state 36
	Stm            goto state 120
	DecStm         goto state 121
	Exp            goto state 29
	Lexp           goto state 30

State 144

	ListExp -> Exp ',' ListExp .                        (rule 76)

	')'            reduce using rule 76
	'}'            reduce using rule 76


State 145

	Exp -> Pident '(' ListExp ')' .                     (rule 49)

	'%'            reduce using rule 49
	'%='           reduce using rule 49
	'&'            reduce using rule 49
	'&='           reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'*'            reduce using rule 49
	'*='           reduce using rule 49
	'+'            reduce using rule 49
	'++'           reduce using rule 49
	'+='           reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'--'           reduce using rule 49
	'-='           reduce using rule 49
	'/'            reduce using rule 49
	'/='           reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'='            reduce using rule 49
	'=='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'^'            reduce using rule 49
	'^='           reduce using rule 49
	'_'            reduce using rule 49
	'and'          reduce using rule 49
	'boolean'      reduce using rule 49
	'character'    reduce using rule 49
	'do'           reduce using rule 49
	'else'         reduce using rule 49
	'end'          reduce using rule 49
	'float'        reduce using rule 49
	'function'     reduce using rule 49
	'if'           reduce using rule 49
	'integer'      reduce using rule 49
	'not'          reduce using rule 49
	'or'           reduce using rule 49
	'pointer'      reduce using rule 49
	'repeat'       reduce using rule 49
	'return'       reduce using rule 49
	'string'       reduce using rule 49
	'then'         reduce using rule 49
	'until'        reduce using rule 49
	'while'        reduce using rule 49
	'{'            reduce using rule 49
	'{}'           reduce using rule 49
	'|='           reduce using rule 49
	'}'            reduce using rule 49
	'~='           reduce using rule 49
	L_Pident       reduce using rule 49
	L_Pint         reduce using rule 49
	L_Pbool        reduce using rule 49
	L_Pstring      reduce using rule 49
	L_Preal        reduce using rule 49
	L_Pchar        reduce using rule 49
	%eof           reduce using rule 49


State 146

	Lexp -> Pident '{' Exp '}' .                        (rule 80)

	'%'            reduce using rule 80
	'%='           reduce using rule 80
	'&'            reduce using rule 80
	'&='           reduce using rule 80
	'('            reduce using rule 80
	')'            reduce using rule 80
	'*'            reduce using rule 80
	'*='           reduce using rule 80
	'+'            reduce using rule 80
	'++'           reduce using rule 80
	'+='           reduce using rule 80
	','            reduce using rule 80
	'-'            reduce using rule 80
	'--'           reduce using rule 80
	'-='           reduce using rule 80
	'/'            reduce using rule 80
	'/='           reduce using rule 80
	'<'            reduce using rule 80
	'<='           reduce using rule 80
	'='            reduce using rule 80
	'=='           reduce using rule 80
	'>'            reduce using rule 80
	'>='           reduce using rule 80
	'^'            reduce using rule 80
	'^='           reduce using rule 80
	'_'            reduce using rule 80
	'and'          reduce using rule 80
	'boolean'      reduce using rule 80
	'character'    reduce using rule 80
	'do'           reduce using rule 80
	'else'         reduce using rule 80
	'end'          reduce using rule 80
	'float'        reduce using rule 80
	'function'     reduce using rule 80
	'if'           reduce using rule 80
	'integer'      reduce using rule 80
	'not'          reduce using rule 80
	'or'           reduce using rule 80
	'pointer'      reduce using rule 80
	'repeat'       reduce using rule 80
	'return'       reduce using rule 80
	'string'       reduce using rule 80
	'then'         reduce using rule 80
	'until'        reduce using rule 80
	'while'        reduce using rule 80
	'{'            reduce using rule 80
	'{}'           reduce using rule 80
	'|='           reduce using rule 80
	'}'            reduce using rule 80
	'~='           reduce using rule 80
	L_Pident       reduce using rule 80
	L_Pint         reduce using rule 80
	L_Pbool        reduce using rule 80
	L_Pstring      reduce using rule 80
	L_Preal        reduce using rule 80
	L_Pchar        reduce using rule 80
	%eof           reduce using rule 80


State 147

	Stm -> 'if' Exp 'then' ListDecStm 'else' . ListDecStm 'end'    (rule 41)

	'&'            reduce using rule 46
	'('            reduce using rule 46
	'++'           reduce using rule 46
	'-'            reduce using rule 46
	'--'           reduce using rule 46
	'_'            reduce using rule 46
	'boolean'      reduce using rule 46
	'character'    reduce using rule 46
	'end'          reduce using rule 46
	'float'        reduce using rule 46
	'function'     reduce using rule 46
	'if'           reduce using rule 46
	'integer'      reduce using rule 46
	'not'          reduce using rule 46
	'pointer'      reduce using rule 46
	'repeat'       reduce using rule 46
	'return'       reduce using rule 46
	'string'       reduce using rule 46
	'while'        reduce using rule 46
	'{'            reduce using rule 46
	'{}'           reduce using rule 46
	L_Pident       reduce using rule 46
	L_Pint         reduce using rule 46
	L_Pbool        reduce using rule 46
	L_Pstring      reduce using rule 46
	L_Preal        reduce using rule 46
	L_Pchar        reduce using rule 46

	ListDecStm     goto state 158

State 148

	Stm -> 'if' Exp 'then' ListDecStm 'end' .           (rule 40)

	'&'            reduce using rule 40
	'('            reduce using rule 40
	'++'           reduce using rule 40
	'-'            reduce using rule 40
	'--'           reduce using rule 40
	'_'            reduce using rule 40
	'boolean'      reduce using rule 40
	'character'    reduce using rule 40
	'else'         reduce using rule 40
	'end'          reduce using rule 40
	'float'        reduce using rule 40
	'function'     reduce using rule 40
	'if'           reduce using rule 40
	'integer'      reduce using rule 40
	'not'          reduce using rule 40
	'pointer'      reduce using rule 40
	'repeat'       reduce using rule 40
	'return'       reduce using rule 40
	'string'       reduce using rule 40
	'until'        reduce using rule 40
	'while'        reduce using rule 40
	'{'            reduce using rule 40
	'{}'           reduce using rule 40
	L_Pident       reduce using rule 40
	L_Pint         reduce using rule 40
	L_Pbool        reduce using rule 40
	L_Pstring      reduce using rule 40
	L_Preal        reduce using rule 40
	L_Pchar        reduce using rule 40
	%eof           reduce using rule 40


State 149

	Stm -> 'while' Exp 'do' ListDecStm 'end' .          (rule 42)

	'&'            reduce using rule 42
	'('            reduce using rule 42
	'++'           reduce using rule 42
	'-'            reduce using rule 42
	'--'           reduce using rule 42
	'_'            reduce using rule 42
	'boolean'      reduce using rule 42
	'character'    reduce using rule 42
	'else'         reduce using rule 42
	'end'          reduce using rule 42
	'float'        reduce using rule 42
	'function'     reduce using rule 42
	'if'           reduce using rule 42
	'integer'      reduce using rule 42
	'not'          reduce using rule 42
	'pointer'      reduce using rule 42
	'repeat'       reduce using rule 42
	'return'       reduce using rule 42
	'string'       reduce using rule 42
	'until'        reduce using rule 42
	'while'        reduce using rule 42
	'{'            reduce using rule 42
	'{}'           reduce using rule 42
	L_Pident       reduce using rule 42
	L_Pint         reduce using rule 42
	L_Pbool        reduce using rule 42
	L_Pstring      reduce using rule 42
	L_Preal        reduce using rule 42
	L_Pchar        reduce using rule 42
	%eof           reduce using rule 42


State 150

	Dec -> 'function' Type_specifier Pident '(' ListArgument . ')' ListDecStm 'end'    (rule 14)

	')'            shift, and enter state 157


State 151

	Argument -> Modality Type_specifier . Pident        (rule 26)

	L_Pident       shift, and enter state 22

	Pident         goto state 156

State 152

	Dec -> 'function' Pident '(' ListArgument ')' . ListDecStm 'end'    (rule 15)

	'&'            reduce using rule 46
	'('            reduce using rule 46
	'++'           reduce using rule 46
	'-'            reduce using rule 46
	'--'           reduce using rule 46
	'_'            reduce using rule 46
	'boolean'      reduce using rule 46
	'character'    reduce using rule 46
	'end'          reduce using rule 46
	'float'        reduce using rule 46
	'function'     reduce using rule 46
	'if'           reduce using rule 46
	'integer'      reduce using rule 46
	'not'          reduce using rule 46
	'pointer'      reduce using rule 46
	'repeat'       reduce using rule 46
	'return'       reduce using rule 46
	'string'       reduce using rule 46
	'while'        reduce using rule 46
	'{'            reduce using rule 46
	'{}'           reduce using rule 46
	L_Pident       reduce using rule 46
	L_Pint         reduce using rule 46
	L_Pbool        reduce using rule 46
	L_Pstring      reduce using rule 46
	L_Preal        reduce using rule 46
	L_Pchar        reduce using rule 46

	ListDecStm     goto state 155

State 153

	ListArgument -> Argument ',' . ListArgument         (rule 29)

	')'            reduce using rule 27
	'boolean'      reduce using rule 30
	'character'    reduce using rule 30
	'const'        shift, and enter state 133
	'float'        reduce using rule 30
	'integer'      reduce using rule 30
	'name'         shift, and enter state 134
	'pointer'      reduce using rule 30
	'ref'          shift, and enter state 135
	'res'          shift, and enter state 136
	'string'       reduce using rule 30
	'val'          shift, and enter state 137
	'valres'       shift, and enter state 138
	'{'            reduce using rule 30
	'{}'           reduce using rule 30

	Argument       goto state 130
	ListArgument   goto state 154
	Modality       goto state 132

State 154

	ListArgument -> Argument ',' ListArgument .         (rule 29)

	')'            reduce using rule 29


State 155

	Dec -> 'function' Pident '(' ListArgument ')' ListDecStm . 'end'    (rule 15)
	ListDecStm -> ListDecStm . DecStm                   (rule 47)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'end'          shift, and enter state 161
	'float'        shift, and enter state 39
	'function'     shift, and enter state 40
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 41
	'not'          shift, and enter state 20
	'pointer'      shift, and enter state 42
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 43
	'while'        shift, and enter state 34
	'{'            shift, and enter state 123
	'{}'           shift, and enter state 45
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 119
	Type_specifier goto state 36
	Stm            goto state 120
	DecStm         goto state 121
	Exp            goto state 29
	Lexp           goto state 30

State 156

	Argument -> Modality Type_specifier Pident .        (rule 26)

	')'            reduce using rule 26
	','            reduce using rule 26


State 157

	Dec -> 'function' Type_specifier Pident '(' ListArgument ')' . ListDecStm 'end'    (rule 14)

	'&'            reduce using rule 46
	'('            reduce using rule 46
	'++'           reduce using rule 46
	'-'            reduce using rule 46
	'--'           reduce using rule 46
	'_'            reduce using rule 46
	'boolean'      reduce using rule 46
	'character'    reduce using rule 46
	'end'          reduce using rule 46
	'float'        reduce using rule 46
	'function'     reduce using rule 46
	'if'           reduce using rule 46
	'integer'      reduce using rule 46
	'not'          reduce using rule 46
	'pointer'      reduce using rule 46
	'repeat'       reduce using rule 46
	'return'       reduce using rule 46
	'string'       reduce using rule 46
	'while'        reduce using rule 46
	'{'            reduce using rule 46
	'{}'           reduce using rule 46
	L_Pident       reduce using rule 46
	L_Pint         reduce using rule 46
	L_Pbool        reduce using rule 46
	L_Pstring      reduce using rule 46
	L_Preal        reduce using rule 46
	L_Pchar        reduce using rule 46

	ListDecStm     goto state 160

State 158

	Stm -> 'if' Exp 'then' ListDecStm 'else' ListDecStm . 'end'    (rule 41)
	ListDecStm -> ListDecStm . DecStm                   (rule 47)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'end'          shift, and enter state 159
	'float'        shift, and enter state 39
	'function'     shift, and enter state 40
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 41
	'not'          shift, and enter state 20
	'pointer'      shift, and enter state 42
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 43
	'while'        shift, and enter state 34
	'{'            shift, and enter state 123
	'{}'           shift, and enter state 45
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 119
	Type_specifier goto state 36
	Stm            goto state 120
	DecStm         goto state 121
	Exp            goto state 29
	Lexp           goto state 30

State 159

	Stm -> 'if' Exp 'then' ListDecStm 'else' ListDecStm 'end' .    (rule 41)

	'&'            reduce using rule 41
	'('            reduce using rule 41
	'++'           reduce using rule 41
	'-'            reduce using rule 41
	'--'           reduce using rule 41
	'_'            reduce using rule 41
	'boolean'      reduce using rule 41
	'character'    reduce using rule 41
	'else'         reduce using rule 41
	'end'          reduce using rule 41
	'float'        reduce using rule 41
	'function'     reduce using rule 41
	'if'           reduce using rule 41
	'integer'      reduce using rule 41
	'not'          reduce using rule 41
	'pointer'      reduce using rule 41
	'repeat'       reduce using rule 41
	'return'       reduce using rule 41
	'string'       reduce using rule 41
	'until'        reduce using rule 41
	'while'        reduce using rule 41
	'{'            reduce using rule 41
	'{}'           reduce using rule 41
	L_Pident       reduce using rule 41
	L_Pint         reduce using rule 41
	L_Pbool        reduce using rule 41
	L_Pstring      reduce using rule 41
	L_Preal        reduce using rule 41
	L_Pchar        reduce using rule 41
	%eof           reduce using rule 41


State 160

	Dec -> 'function' Type_specifier Pident '(' ListArgument ')' ListDecStm . 'end'    (rule 14)
	ListDecStm -> ListDecStm . DecStm                   (rule 47)

	'&'            shift, and enter state 14
	'('            shift, and enter state 15
	'++'           shift, and enter state 16
	'-'            shift, and enter state 17
	'--'           shift, and enter state 18
	'_'            shift, and enter state 19
	'boolean'      shift, and enter state 37
	'character'    shift, and enter state 38
	'end'          shift, and enter state 162
	'float'        shift, and enter state 39
	'function'     shift, and enter state 40
	'if'           shift, and enter state 31
	'integer'      shift, and enter state 41
	'not'          shift, and enter state 20
	'pointer'      shift, and enter state 42
	'repeat'       shift, and enter state 32
	'return'       shift, and enter state 33
	'string'       shift, and enter state 43
	'while'        shift, and enter state 34
	'{'            shift, and enter state 123
	'{}'           shift, and enter state 45
	L_Pident       shift, and enter state 22
	L_Pint         shift, and enter state 23
	L_Pbool        shift, and enter state 24
	L_Pstring      shift, and enter state 25
	L_Preal        shift, and enter state 26
	L_Pchar        shift, and enter state 27

	Pident         goto state 6
	Pint           goto state 7
	Pbool          goto state 8
	Pstring        goto state 9
	Preal          goto state 10
	Pchar          goto state 11
	Dec            goto state 119
	Type_specifier goto state 36
	Stm            goto state 120
	DecStm         goto state 121
	Exp            goto state 29
	Lexp           goto state 30

State 161

	Dec -> 'function' Pident '(' ListArgument ')' ListDecStm 'end' .    (rule 15)

	'&'            reduce using rule 15
	'('            reduce using rule 15
	'++'           reduce using rule 15
	'-'            reduce using rule 15
	'--'           reduce using rule 15
	'_'            reduce using rule 15
	'boolean'      reduce using rule 15
	'character'    reduce using rule 15
	'else'         reduce using rule 15
	'end'          reduce using rule 15
	'float'        reduce using rule 15
	'function'     reduce using rule 15
	'if'           reduce using rule 15
	'integer'      reduce using rule 15
	'not'          reduce using rule 15
	'pointer'      reduce using rule 15
	'repeat'       reduce using rule 15
	'return'       reduce using rule 15
	'string'       reduce using rule 15
	'until'        reduce using rule 15
	'while'        reduce using rule 15
	'{'            reduce using rule 15
	'{}'           reduce using rule 15
	L_Pident       reduce using rule 15
	L_Pint         reduce using rule 15
	L_Pbool        reduce using rule 15
	L_Pstring      reduce using rule 15
	L_Preal        reduce using rule 15
	L_Pchar        reduce using rule 15
	%eof           reduce using rule 15


State 162

	Dec -> 'function' Type_specifier Pident '(' ListArgument ')' ListDecStm 'end' .    (rule 14)

	'&'            reduce using rule 14
	'('            reduce using rule 14
	'++'           reduce using rule 14
	'-'            reduce using rule 14
	'--'           reduce using rule 14
	'_'            reduce using rule 14
	'boolean'      reduce using rule 14
	'character'    reduce using rule 14
	'else'         reduce using rule 14
	'end'          reduce using rule 14
	'float'        reduce using rule 14
	'function'     reduce using rule 14
	'if'           reduce using rule 14
	'integer'      reduce using rule 14
	'not'          reduce using rule 14
	'pointer'      reduce using rule 14
	'repeat'       reduce using rule 14
	'return'       reduce using rule 14
	'string'       reduce using rule 14
	'until'        reduce using rule 14
	'while'        reduce using rule 14
	'{'            reduce using rule 14
	'{}'           reduce using rule 14
	L_Pident       reduce using rule 14
	L_Pint         reduce using rule 14
	L_Pbool        reduce using rule 14
	L_Pstring      reduce using rule 14
	L_Preal        reduce using rule 14
	L_Pchar        reduce using rule 14
	%eof           reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 94
Number of terminals: 63
Number of non-terminals: 25
Number of states: 163
