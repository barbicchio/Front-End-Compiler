

module AbsLua where

-- Haskell module generated by the BNF converter




newtype Pbool = Pbool ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype Pident = Pident ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype Pint = Pint ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype Pstring = Pstring ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype Preal = Preal ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
newtype Pchar = Pchar ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)
data Program = Progr [Dec]
  deriving (Eq, Ord, Show, Read)

data Dec
    = DecFunction Function_def
    | VarDeclar Type_specifier Pident
    | InitDeclarI Type_specifier Pident Exp
  deriving (Eq, Ord, Show, Read)

data Type_specifier = Typespec BasicType | Typecompl ComplexType
  deriving (Eq, Ord, Show, Read)

data BasicType
    = BasicType_boolean
    | BasicType_character
    | BasicType_float
    | BasicType_integer
    | BasicType_string
    | BasicType_void
  deriving (Eq, Ord, Show, Read)

data ComplexType = Tarray Type_specifier | Tpointer Type_specifier
  deriving (Eq, Ord, Show, Read)

data Function_def = Func Type_specifier Pident [Argument] Chunk_stm
  deriving (Eq, Ord, Show, Read)

data Argument = ParamInt Modality Type_specifier Pident
  deriving (Eq, Ord, Show, Read)

data Modality
    = Modality1
    | Modality_val
    | Modality_res
    | Modality_valres
    | Modality_name
    | Modality_const
    | Modality_ref
  deriving (Eq, Ord, Show, Read)

data Stm
    = CompStm Chunk_stm
    | ReturnStm Return_stm
    | ExpStm Exp
    | IterStm Cond_stm
  deriving (Eq, Ord, Show, Read)

data Cond_stm
    = If Exp Chunk_stm
    | IfThenElse Exp Chunk_stm Chunk_stm
    | While Exp Chunk_stm
    | DoWhile Chunk_stm Exp
  deriving (Eq, Ord, Show, Read)

data Chunk_stm = Chunkstm [Dec] [Stm]
  deriving (Eq, Ord, Show, Read)

data Return_stm = ReturnStm1 Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = Fcall Pident ActPar
    | Eassign Lexp Assignment_op Exp
    | Elor Exp Exp
    | Eland Exp Exp
    | Eeq Exp Exp
    | Eneq Exp Exp
    | Elthen Exp Exp
    | Egrthen Exp Exp
    | Elt Exp Exp
    | Egt Exp Exp
    | Eplus Exp Exp
    | Eminus Exp Exp
    | Etimes Exp Exp
    | Ediv Exp Exp
    | Emod Exp Exp
    | EPow Exp Exp
    | Epreop Unary_operator Exp
    | Efloat Preal
    | Einteger Pint
    | Eboolean Pbool
    | Estring Pstring
    | Echar Pchar
    | Lexp Lexp
    | ArrayExp [Exp]
  deriving (Eq, Ord, Show, Read)

data ActPar = ActParam [Exp]
  deriving (Eq, Ord, Show, Read)

data Lexp
    = Evar Pident
    | Indirection Exp
    | Arraysel Pident Exp
    | PreInc Lexp
    | PreDecr Lexp
    | PostInc Lexp
    | PostDecr Lexp
  deriving (Eq, Ord, Show, Read)

data Unary_operator = Address | Logicalneg | Negnum
  deriving (Eq, Ord, Show, Read)

data Assignment_op
    = Assign
    | AssignMul
    | AssignDiv
    | AssignMod
    | AssignAdd
    | AssignSub
    | AssgnPow
    | AssgnAnd
    | AssgnOr
  deriving (Eq, Ord, Show, Read)

