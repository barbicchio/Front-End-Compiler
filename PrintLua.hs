{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintLua where

-- pretty-printer generated by the BNF converter

import AbsLua
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print Pbreak where
  prt _ (Pbreak (_,i)) = doc (showString ( i))


instance Print Pcontinue where
  prt _ (Pcontinue (_,i)) = doc (showString ( i))


instance Print Pbool where
  prt _ (Pbool (_,i)) = doc (showString ( i))


instance Print Pident where
  prt _ (Pident (_,i)) = doc (showString ( i))


instance Print Pint where
  prt _ (Pint (_,i)) = doc (showString ( i))


instance Print Pstring where
  prt _ (Pstring (_,i)) = doc (showString ( i))


instance Print Preal where
  prt _ (Preal (_,i)) = doc (showString ( i))


instance Print Pchar where
  prt _ (Pchar (_,i)) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    Progr decs -> prPrec i 0 (concatD [prt 0 decs])

instance Print Dec where
  prt i e = case e of
    DecFunction functiondef -> prPrec i 0 (concatD [prt 0 functiondef])
    VarDeclar typespecifier pident -> prPrec i 0 (concatD [prt 0 typespecifier, prt 0 pident])
    InitDeclarI typespecifier pident exp -> prPrec i 0 (concatD [prt 0 typespecifier, prt 0 pident, doc (showString "="), prt 0 exp])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Type_specifier where
  prt i e = case e of
    Typespec basictype -> prPrec i 0 (concatD [prt 0 basictype])
    Typecompl complextype -> prPrec i 0 (concatD [prt 0 complextype])

instance Print BasicType where
  prt i e = case e of
    BasicType_boolean -> prPrec i 0 (concatD [doc (showString "boolean")])
    BasicType_character -> prPrec i 0 (concatD [doc (showString "character")])
    BasicType_float -> prPrec i 0 (concatD [doc (showString "float")])
    BasicType_integer -> prPrec i 0 (concatD [doc (showString "integer")])
    BasicType_string -> prPrec i 0 (concatD [doc (showString "string")])
    BasicType_void -> prPrec i 0 (concatD [doc (showString "void")])

instance Print ComplexType where
  prt i e = case e of
    Tarray typespecifier -> prPrec i 0 (concatD [doc (showString "{}"), prt 0 typespecifier])
    Tpointer typespecifier -> prPrec i 0 (concatD [doc (showString "pointer"), prt 0 typespecifier])

instance Print Function_def where
  prt i e = case e of
    Func typespecifier pident arguments chunkstm -> prPrec i 0 (concatD [doc (showString "function"), prt 0 typespecifier, prt 0 pident, doc (showString "("), prt 0 arguments, doc (showString ")"), prt 0 chunkstm, doc (showString "end")])

instance Print Argument where
  prt i e = case e of
    ParamInt modality typespecifier pident -> prPrec i 0 (concatD [prt 0 modality, prt 0 typespecifier, prt 0 pident])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Modality where
  prt i e = case e of
    Modality1 -> prPrec i 0 (concatD [])
    Modality_val -> prPrec i 0 (concatD [doc (showString "val")])
    Modality_const -> prPrec i 0 (concatD [doc (showString "const")])
    Modality_ref -> prPrec i 0 (concatD [doc (showString "ref")])

instance Print Stm where
  prt i e = case e of
    CompStm chunkstm -> prPrec i 0 (concatD [prt 0 chunkstm])
    ReturnStm returnstm -> prPrec i 0 (concatD [prt 0 returnstm])
    ExpStm exp -> prPrec i 0 (concatD [prt 0 exp])
    IterStm condstm -> prPrec i 0 (concatD [prt 0 condstm])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Cond_stm where
  prt i e = case e of
    TryCatch chunkstm1 chunkstm2 -> prPrec i 0 (concatD [doc (showString "try"), prt 0 chunkstm1, doc (showString "catch"), prt 0 chunkstm2, doc (showString "end")])
    If exp chunkstm -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 0 chunkstm, doc (showString "end")])
    IfThenElse exp chunkstm1 chunkstm2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, doc (showString "then"), prt 0 chunkstm1, doc (showString "else"), prt 0 chunkstm2, doc (showString "end")])
    While exp chunkstm -> prPrec i 0 (concatD [doc (showString "while"), prt 0 exp, doc (showString "do"), prt 0 chunkstm, doc (showString "end")])
    DoWhile chunkstm exp -> prPrec i 0 (concatD [doc (showString "repeat"), prt 0 chunkstm, doc (showString "until"), prt 0 exp])
    For exp chunkstm -> prPrec i 0 (concatD [doc (showString "for"), prt 0 exp, doc (showString "do"), prt 0 chunkstm, doc (showString "end")])

instance Print Chunk_stm where
  prt i e = case e of
    Chunkstm decs stms -> prPrec i 0 (concatD [prt 0 decs, prt 0 stms])

instance Print Return_stm where
  prt i e = case e of
    ReturnStm1 exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp])

instance Print Exp where
  prt i e = case e of
    Fcall pident actpar -> prPrec i 0 (concatD [prt 0 pident, doc (showString "("), prt 0 actpar, doc (showString ")")])
    Eassign lexp assignmentop exp -> prPrec i 1 (concatD [prt 0 lexp, prt 0 assignmentop, prt 0 exp])
    Elor exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "or"), prt 3 exp2])
    Eland exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "and"), prt 4 exp2])
    Eeq exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "=="), prt 5 exp2])
    Eneq exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "~="), prt 6 exp2])
    Elthen exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "<"), prt 7 exp2])
    Egrthen exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString ">"), prt 8 exp2])
    Elt exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "<="), prt 9 exp2])
    Egt exp1 exp2 -> prPrec i 9 (concatD [prt 9 exp1, doc (showString ">="), prt 10 exp2])
    Eplus exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, doc (showString "+"), prt 11 exp2])
    Eminus exp1 exp2 -> prPrec i 11 (concatD [prt 11 exp1, doc (showString "-"), prt 12 exp2])
    Etimes exp1 exp2 -> prPrec i 12 (concatD [prt 12 exp1, doc (showString "*"), prt 13 exp2])
    Ediv exp1 exp2 -> prPrec i 13 (concatD [prt 13 exp1, doc (showString "/"), prt 14 exp2])
    Emod exp1 exp2 -> prPrec i 14 (concatD [prt 14 exp1, doc (showString "%"), prt 15 exp2])
    EPow exp1 exp2 -> prPrec i 15 (concatD [prt 15 exp1, doc (showString "^"), prt 16 exp2])
    Epreop unaryoperator exp -> prPrec i 16 (concatD [prt 0 unaryoperator, prt 14 exp])
    Efloat preal -> prPrec i 17 (concatD [prt 0 preal])
    Einteger pint -> prPrec i 17 (concatD [prt 0 pint])
    Eboolean pbool -> prPrec i 17 (concatD [prt 0 pbool])
    Estring pstring -> prPrec i 17 (concatD [prt 0 pstring])
    Echar pchar -> prPrec i 17 (concatD [prt 0 pchar])
    Lexp lexp -> prPrec i 17 (concatD [prt 0 lexp])
    ArrayExp exps -> prPrec i 18 (concatD [doc (showString "{"), prt 0 exps, doc (showString "}")])
  prtList _ [] = (concatD [])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print ActPar where
  prt i e = case e of
    ActParam exps -> prPrec i 0 (concatD [prt 0 exps])

instance Print Lexp where
  prt i e = case e of
    Evar pident -> prPrec i 0 (concatD [prt 0 pident])
    Indirection exp -> prPrec i 0 (concatD [doc (showString "_"), prt 0 exp])
    Arraysel pident exp -> prPrec i 0 (concatD [prt 0 pident, doc (showString "{"), prt 0 exp, doc (showString "}")])
    InlineIf exp1 exp2 exp3 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "?"), prt 0 exp2, doc (showString ":"), prt 0 exp3])

instance Print Unary_operator where
  prt i e = case e of
    Address -> prPrec i 0 (concatD [doc (showString "&")])
    Logicalneg -> prPrec i 0 (concatD [doc (showString "not")])
    Negnum -> prPrec i 0 (concatD [doc (showString "-")])

instance Print Assignment_op where
  prt i e = case e of
    Assign -> prPrec i 0 (concatD [doc (showString "=")])
    AssignMul -> prPrec i 0 (concatD [doc (showString "*=")])
    AssignDiv -> prPrec i 0 (concatD [doc (showString "/=")])
    AssignMod -> prPrec i 0 (concatD [doc (showString "%=")])
    AssignAdd -> prPrec i 0 (concatD [doc (showString "+=")])
    AssignSub -> prPrec i 0 (concatD [doc (showString "-=")])
    AssgnPow -> prPrec i 0 (concatD [doc (showString "^=")])
    AssgnAnd -> prPrec i 0 (concatD [doc (showString "&=")])
    AssgnOr -> prPrec i 0 (concatD [doc (showString "|=")])


